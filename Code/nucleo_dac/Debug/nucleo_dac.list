
nucleo_dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800b558  0800b558  0001b558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba90  0800ba90  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba90  0800ba90  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba90  0800ba90  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba94  0800ba94  0001ba94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ba98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00001d60  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f3c  20001f3c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c208  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d15  00000000  00000000  0003c457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  00040170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011d7  00000000  00000000  00041860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004c6d  00000000  00000000  00042a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b1f4  00000000  00000000  000476a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b2423  00000000  00000000  00062898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007494  00000000  00000000  00114cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b53c 	.word	0x0800b53c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b53c 	.word	0x0800b53c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff39 	bl	8000adc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	f7ff ff6f 	bl	8000b7c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc30 	bl	8000504 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fca6 	bl	80005f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fae8 	bl	8000288 <__aeabi_dsub>
 8000cb8:	f7ff ff60 	bl	8000b7c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 fd8a 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f84a 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 f93c 	bl	8000f50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 f90a 	bl	8000ef0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000cdc:	f000 f880 	bl	8000de0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000ce0:	f000 f8b6 	bl	8000e50 <MX_DAC2_Init>
  MX_TIM16_Init();
 8000ce4:	f000 f8de 	bl	8000ea4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000ce8:	4814      	ldr	r0, [pc, #80]	; (8000d3c <main+0x74>)
 8000cea:	f002 fd11 	bl	8003710 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4813      	ldr	r0, [pc, #76]	; (8000d40 <main+0x78>)
 8000cf2:	f000 ff3f 	bl	8001b74 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <main+0x78>)
 8000cfa:	f000 ff3b 	bl	8001b74 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4810      	ldr	r0, [pc, #64]	; (8000d44 <main+0x7c>)
 8000d02:	f000 ff37 	bl	8001b74 <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d06:	f004 f963 	bl	8004fd0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <main+0x80>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <main+0x84>)
 8000d10:	f004 f9c6 	bl	80050a0 <osThreadNew>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <main+0x88>)
 8000d18:	6013      	str	r3, [r2, #0]

  /* creation of taskCMD */
  taskCMDHandle = osThreadNew(StartTaskCMD, NULL, &taskCMD_attributes);
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <main+0x8c>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480e      	ldr	r0, [pc, #56]	; (8000d58 <main+0x90>)
 8000d20:	f004 f9be 	bl	80050a0 <osThreadNew>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <main+0x94>)
 8000d28:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of eventCMD */
  eventCMDHandle = osEventFlagsNew(&eventCMD_attributes);
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <main+0x98>)
 8000d2c:	f004 fa90 	bl	8005250 <osEventFlagsNew>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <main+0x9c>)
 8000d34:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d36:	f004 f97f 	bl	8005038 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x72>
 8000d3c:	20000220 	.word	0x20000220
 8000d40:	200001f8 	.word	0x200001f8
 8000d44:	2000020c 	.word	0x2000020c
 8000d48:	0800b5ec 	.word	0x0800b5ec
 8000d4c:	080011b1 	.word	0x080011b1
 8000d50:	200002f4 	.word	0x200002f4
 8000d54:	0800b610 	.word	0x0800b610
 8000d58:	080011c1 	.word	0x080011c1
 8000d5c:	200002f8 	.word	0x200002f8
 8000d60:	0800b634 	.word	0x0800b634
 8000d64:	200002fc 	.word	0x200002fc

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f008 fa6c 	bl	8009254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d92:	2310      	movs	r3, #16
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 f9ea 	bl	8002178 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000daa:	f000 fac3 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fa14 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 faaf 	bl	8001334 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3740      	adds	r7, #64	; 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_DAC1_Init+0x68>)
 8000df2:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <MX_DAC1_Init+0x6c>)
 8000df4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000df6:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_DAC1_Init+0x68>)
 8000df8:	f000 fe6b 	bl	8001ad2 <HAL_DAC_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000e02:	f000 fa97 	bl	8001334 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_DAC1_Init+0x68>)
 8000e16:	f000 ff53 	bl	8001cc0 <HAL_DAC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000e20:	f000 fa88 	bl	8001334 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8000e24:	2302      	movs	r3, #2
 8000e26:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_DAC1_Init+0x68>)
 8000e30:	f000 ff46 	bl	8001cc0 <HAL_DAC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 8000e3a:	f000 fa7b 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001f8 	.word	0x200001f8
 8000e4c:	40007400 	.word	0x40007400

08000e50 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_DAC2_Init+0x4c>)
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <MX_DAC2_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000e66:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_DAC2_Init+0x4c>)
 8000e68:	f000 fe33 	bl	8001ad2 <HAL_DAC_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8000e72:	f000 fa5f 	bl	8001334 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_DAC2_Init+0x4c>)
 8000e86:	f000 ff1b 	bl	8001cc0 <HAL_DAC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000e90:	f000 fa50 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000020c 	.word	0x2000020c
 8000ea0:	40009800 	.word	0x40009800

08000ea4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <MX_TIM16_Init+0x48>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 800-1;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000eb0:	f240 321f 	movw	r2, #799	; 0x31f
 8000eb4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000ebe:	2263      	movs	r2, #99	; 0x63
 8000ec0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_TIM16_Init+0x44>)
 8000ed6:	f002 fbc3 	bl	8003660 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000ee0:	f000 fa28 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000220 	.word	0x20000220
 8000eec:	40014400 	.word	0x40014400

08000ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <MX_USART2_UART_Init+0x5c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART2_UART_Init+0x58>)
 8000f34:	f002 fe26 	bl	8003b84 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f3e:	f000 f9f9 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000026c 	.word	0x2000026c
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_GPIO_Init+0x44>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <MX_GPIO_Init+0x44>)
 8000f5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_GPIO_Init+0x44>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_GPIO_Init+0x44>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <MX_GPIO_Init+0x44>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_GPIO_Init+0x44>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <debug_print_uart>:

/* USER CODE BEGIN 4 */

void debug_print_uart(char *fmt, ...)
{
 8000f98:	b40f      	push	{r0, r1, r2, r3}
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
	va_list va;
	va_start(va, fmt);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	607b      	str	r3, [r7, #4]
	vsnprintf(uart_msg, UART_STR_LEN, fmt, va);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	2150      	movs	r1, #80	; 0x50
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <debug_print_uart+0x40>)
 8000fae:	f008 f943 	bl	8009238 <vsniprintf>
	HAL_UART_Transmit(&huart2, (const uint8_t*)uart_msg, strlen(uart_msg), 500);
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <debug_print_uart+0x40>)
 8000fb4:	f7ff f90c 	bl	80001d0 <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc0:	4905      	ldr	r1, [pc, #20]	; (8000fd8 <debug_print_uart+0x40>)
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <debug_print_uart+0x44>)
 8000fc4:	f002 fe2c 	bl	8003c20 <HAL_UART_Transmit>
	va_end(va);

}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd2:	b004      	add	sp, #16
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000308 	.word	0x20000308
 8000fdc:	2000026c 	.word	0x2000026c

08000fe0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART2) { // Current UART
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <HAL_UART_RxCpltCallback+0xb0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d145      	bne.n	800107e <HAL_UART_RxCpltCallback+0x9e>
	   rcv_buf[rcv_buf_idx][rcv_idx] = rcv_byte;    // Add data to Rx_Buffer
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <HAL_UART_RxCpltCallback+0xb4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461c      	mov	r4, r3
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_UART_RxCpltCallback+0xbc>)
 8001000:	7818      	ldrb	r0, [r3, #0]
 8001002:	4927      	ldr	r1, [pc, #156]	; (80010a0 <HAL_UART_RxCpltCallback+0xc0>)
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	440b      	add	r3, r1
 8001010:	4423      	add	r3, r4
 8001012:	4602      	mov	r2, r0
 8001014:	701a      	strb	r2, [r3, #0]
	   if ((rcv_byte == '\n' || rcv_byte == '\r')) {
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_UART_RxCpltCallback+0xbc>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b0a      	cmp	r3, #10
 800101c:	d003      	beq.n	8001026 <HAL_UART_RxCpltCallback+0x46>
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <HAL_UART_RxCpltCallback+0xbc>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b0d      	cmp	r3, #13
 8001024:	d11e      	bne.n	8001064 <HAL_UART_RxCpltCallback+0x84>
		   // if a \r or \n already handled, ignore the next one until new characters received
		   if (rcv_idx > 0) {
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d027      	beq.n	800107e <HAL_UART_RxCpltCallback+0x9e>
			   rcv_cmd_len = rcv_idx;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_UART_RxCpltCallback+0xc4>)
 8001034:	701a      	strb	r2, [r3, #0]
			   osEventFlagsSet(eventCMDHandle, rcv_buf_idx + 1);
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_UART_RxCpltCallback+0xc8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <HAL_UART_RxCpltCallback+0xb4>)
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	3201      	adds	r2, #1
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f956 	bl	80052f4 <osEventFlagsSet>
			   rcv_buf_idx = (int)(!rcv_buf_idx);
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_UART_RxCpltCallback+0xb4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_UART_RxCpltCallback+0xb4>)
 800105a:	701a      	strb	r2, [r3, #0]
			   rcv_idx = 0;
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
		   if (rcv_idx > 0) {
 8001062:	e00c      	b.n	800107e <HAL_UART_RxCpltCallback+0x9e>
		   }
	   } else {
		   rcv_idx++;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 800106e:	701a      	strb	r2, [r3, #0]
		   if (rcv_idx >= MAX_RCV_LEN) {
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b28      	cmp	r3, #40	; 0x28
 8001076:	d902      	bls.n	800107e <HAL_UART_RxCpltCallback+0x9e>
			   rcv_idx = MAX_RCV_LEN;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_UART_RxCpltCallback+0xb8>)
 800107a:	2229      	movs	r2, #41	; 0x29
 800107c:	701a      	strb	r2, [r3, #0]
			   //TODO, should report error
		   }
	   }
   }

   HAL_UART_Receive_IT(&huart2, &rcv_byte, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	4906      	ldr	r1, [pc, #24]	; (800109c <HAL_UART_RxCpltCallback+0xbc>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <HAL_UART_RxCpltCallback+0xcc>)
 8001084:	f002 fe56 	bl	8003d34 <HAL_UART_Receive_IT>
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	40004400 	.word	0x40004400
 8001094:	200003af 	.word	0x200003af
 8001098:	200003ae 	.word	0x200003ae
 800109c:	20000358 	.word	0x20000358
 80010a0:	2000035c 	.word	0x2000035c
 80010a4:	200003b0 	.word	0x200003b0
 80010a8:	200002fc 	.word	0x200002fc
 80010ac:	2000026c 	.word	0x2000026c

080010b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d114      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value[0] );
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80010cc:	f000 fd2d 	bl	8001b2a <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value[1]);
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010d2:	885b      	ldrh	r3, [r3, #2]
 80010d4:	2200      	movs	r2, #0
 80010d6:	2110      	movs	r1, #16
 80010d8:	4808      	ldr	r0, [pc, #32]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80010da:	f000 fd26 	bl	8001b2a <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value[2]);
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80010e8:	f000 fd1f 	bl	8001b2a <HAL_DAC_SetValue>
	}
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40014400 	.word	0x40014400
 80010f8:	20000300 	.word	0x20000300
 80010fc:	200001f8 	.word	0x200001f8
 8001100:	2000020c 	.word	0x2000020c

08001104 <parse_cmd_buf>:

void parse_cmd_buf(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	char *ptr = strtok(cmd_buf, cmd_delim);
 800110a:	4913      	ldr	r1, [pc, #76]	; (8001158 <parse_cmd_buf+0x54>)
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <parse_cmd_buf+0x58>)
 800110e:	f008 f8cf 	bl	80092b0 <strtok>
 8001112:	6078      	str	r0, [r7, #4]
	strncpy(cmd, ptr, sizeof(cmd));
 8001114:	2210      	movs	r2, #16
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <parse_cmd_buf+0x5c>)
 800111a:	f008 f8b5 	bl	8009288 <strncpy>
	int param_idx = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
	while (ptr != NULL) {
 8001122:	e010      	b.n	8001146 <parse_cmd_buf+0x42>
		ptr = strtok(NULL, cmd_delim);
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <parse_cmd_buf+0x54>)
 8001126:	2000      	movs	r0, #0
 8001128:	f008 f8c2 	bl	80092b0 <strtok>
 800112c:	6078      	str	r0, [r7, #4]
		strncpy(cmd_params[param_idx], ptr, sizeof(cmd_params[param_idx]));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <parse_cmd_buf+0x60>)
 8001134:	4413      	add	r3, r2
 8001136:	2208      	movs	r2, #8
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f008 f8a4 	bl	8009288 <strncpy>
		param_idx++;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
	while (ptr != NULL) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1eb      	bne.n	8001124 <parse_cmd_buf+0x20>
	}

}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000000 	.word	0x20000000
 800115c:	200003b4 	.word	0x200003b4
 8001160:	200003e0 	.word	0x200003e0
 8001164:	200003f0 	.word	0x200003f0

08001168 <clear_cmd_buf>:

void clear_cmd_buf(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	memset(cmd, 0, CMD_MAX_LEN);
 800116e:	2210      	movs	r2, #16
 8001170:	2100      	movs	r1, #0
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <clear_cmd_buf+0x40>)
 8001174:	f008 f86e 	bl	8009254 <memset>
	for (int i=0;i<TOTAL_CMD_PARAMS;i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	e00b      	b.n	8001196 <clear_cmd_buf+0x2e>
		memset(cmd_params[i], 0, PARAM_MAX_LEN);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <clear_cmd_buf+0x44>)
 8001184:	4413      	add	r3, r2
 8001186:	2208      	movs	r2, #8
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f008 f862 	bl	8009254 <memset>
	for (int i=0;i<TOTAL_CMD_PARAMS;i++) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3301      	adds	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	ddf0      	ble.n	800117e <clear_cmd_buf+0x16>
	}
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200003e0 	.word	0x200003e0
 80011ac:	200003f0 	.word	0x200003f0

080011b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  osDelay(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f004 f81b 	bl	80051f4 <osDelay>
 80011be:	e7fb      	b.n	80011b8 <StartDefaultTask+0x8>

080011c0 <StartTaskCMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCMD */
void StartTaskCMD(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCMD */
  /* Infinite loop */
  for(;;) {
	  HAL_UART_Receive_IT(&huart2, &rcv_byte, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	4949      	ldr	r1, [pc, #292]	; (80012f0 <StartTaskCMD+0x130>)
 80011cc:	4849      	ldr	r0, [pc, #292]	; (80012f4 <StartTaskCMD+0x134>)
 80011ce:	f002 fdb1 	bl	8003d34 <HAL_UART_Receive_IT>

		uint32_t flags;
		for(;;) {
			flags = osEventFlagsWait(eventCMDHandle, FLAG_CMD_BUF0_READY | FLAG_CMD_BUF1_READY, osFlagsWaitAny, 100);
 80011d2:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <StartTaskCMD+0x138>)
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	2200      	movs	r2, #0
 80011da:	2103      	movs	r1, #3
 80011dc:	f004 f8e2 	bl	80053a4 <osEventFlagsWait>
 80011e0:	6178      	str	r0, [r7, #20]
			if (flags < 0x80000000) {
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dbf4      	blt.n	80011d2 <StartTaskCMD+0x12>
				memcpy((char*)cmd_buf, (const char*)rcv_buf[flags-1], rcv_cmd_len);
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	4a41      	ldr	r2, [pc, #260]	; (80012fc <StartTaskCMD+0x13c>)
 80011f8:	4413      	add	r3, r2
 80011fa:	4a41      	ldr	r2, [pc, #260]	; (8001300 <StartTaskCMD+0x140>)
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4840      	ldr	r0, [pc, #256]	; (8001304 <StartTaskCMD+0x144>)
 8001202:	f008 f97a 	bl	80094fa <memcpy>
				cmd_buf[rcv_cmd_len] = '\0';
 8001206:	4b3e      	ldr	r3, [pc, #248]	; (8001300 <StartTaskCMD+0x140>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <StartTaskCMD+0x144>)
 800120e:	2100      	movs	r1, #0
 8001210:	5499      	strb	r1, [r3, r2]
				clear_cmd_buf();
 8001212:	f7ff ffa9 	bl	8001168 <clear_cmd_buf>
				parse_cmd_buf();
 8001216:	f7ff ff75 	bl	8001104 <parse_cmd_buf>
				if (strncmp(cmd, "dac", 3) == 0) {
 800121a:	2203      	movs	r2, #3
 800121c:	493a      	ldr	r1, [pc, #232]	; (8001308 <StartTaskCMD+0x148>)
 800121e:	483b      	ldr	r0, [pc, #236]	; (800130c <StartTaskCMD+0x14c>)
 8001220:	f008 f820 	bl	8009264 <strncmp>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d159      	bne.n	80012de <StartTaskCMD+0x11e>
					int dac_idx = atoi(cmd_params[0]);
 800122a:	4839      	ldr	r0, [pc, #228]	; (8001310 <StartTaskCMD+0x150>)
 800122c:	f007 f829 	bl	8008282 <atoi>
 8001230:	6138      	str	r0, [r7, #16]
					if (0 <= dac_idx && dac_idx < TOTAL_DACS) {
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db4d      	blt.n	80012d4 <StartTaskCMD+0x114>
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	2b02      	cmp	r3, #2
 800123c:	dc4a      	bgt.n	80012d4 <StartTaskCMD+0x114>
						float percent = atof(cmd_params[1]);
 800123e:	4835      	ldr	r0, [pc, #212]	; (8001314 <StartTaskCMD+0x154>)
 8001240:	f007 f81c 	bl	800827c <atof>
 8001244:	ec53 2b10 	vmov	r2, r3, d0
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fcb6 	bl	8000bbc <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
						if (percent < 0.0 || percent > 100.0) {
 8001254:	edd7 7a03 	vldr	s15, [r7, #12]
 8001258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	d408      	bmi.n	8001274 <StartTaskCMD+0xb4>
 8001262:	edd7 7a03 	vldr	s15, [r7, #12]
 8001266:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001318 <StartTaskCMD+0x158>
 800126a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	dd08      	ble.n	8001286 <StartTaskCMD+0xc6>
							debug_print_uart("Illegal dac value %d\r\n", dac_value[dac_idx]);
 8001274:	4a29      	ldr	r2, [pc, #164]	; (800131c <StartTaskCMD+0x15c>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127c:	4619      	mov	r1, r3
 800127e:	4828      	ldr	r0, [pc, #160]	; (8001320 <StartTaskCMD+0x160>)
 8001280:	f7ff fe8a 	bl	8000f98 <debug_print_uart>
					if (0 <= dac_idx && dac_idx < TOTAL_DACS) {
 8001284:	e02f      	b.n	80012e6 <StartTaskCMD+0x126>
						} else {
							dac_value[dac_idx] = (int)(percent/100.0 * 4095);
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff f95e 	bl	8000548 <__aeabi_f2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <StartTaskCMD+0x164>)
 8001292:	f7ff fadb 	bl	800084c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	a312      	add	r3, pc, #72	; (adr r3, 80012e8 <StartTaskCMD+0x128>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9a8 	bl	80005f8 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc3c 	bl	8000b2c <__aeabi_d2iz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b299      	uxth	r1, r3
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <StartTaskCMD+0x15c>)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							debug_print_uart("Setting DAC %d to %d\r\n", dac_idx, dac_value[dac_idx]);
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <StartTaskCMD+0x15c>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c8:	461a      	mov	r2, r3
 80012ca:	6939      	ldr	r1, [r7, #16]
 80012cc:	4816      	ldr	r0, [pc, #88]	; (8001328 <StartTaskCMD+0x168>)
 80012ce:	f7ff fe63 	bl	8000f98 <debug_print_uart>
					if (0 <= dac_idx && dac_idx < TOTAL_DACS) {
 80012d2:	e008      	b.n	80012e6 <StartTaskCMD+0x126>
						}
					} else{
						debug_print_uart("Illegal DAC %d\r\n", dac_idx);
 80012d4:	6939      	ldr	r1, [r7, #16]
 80012d6:	4815      	ldr	r0, [pc, #84]	; (800132c <StartTaskCMD+0x16c>)
 80012d8:	f7ff fe5e 	bl	8000f98 <debug_print_uart>
 80012dc:	e779      	b.n	80011d2 <StartTaskCMD+0x12>
					}
				} else {
					debug_print_uart("Unknown cmd |%s|\r\n", cmd);
 80012de:	490b      	ldr	r1, [pc, #44]	; (800130c <StartTaskCMD+0x14c>)
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <StartTaskCMD+0x170>)
 80012e2:	f7ff fe59 	bl	8000f98 <debug_print_uart>
			flags = osEventFlagsWait(eventCMDHandle, FLAG_CMD_BUF0_READY | FLAG_CMD_BUF1_READY, osFlagsWaitAny, 100);
 80012e6:	e774      	b.n	80011d2 <StartTaskCMD+0x12>
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40affe00 	.word	0x40affe00
 80012f0:	20000358 	.word	0x20000358
 80012f4:	2000026c 	.word	0x2000026c
 80012f8:	200002fc 	.word	0x200002fc
 80012fc:	2000035c 	.word	0x2000035c
 8001300:	200003b0 	.word	0x200003b0
 8001304:	200003b4 	.word	0x200003b4
 8001308:	0800b578 	.word	0x0800b578
 800130c:	200003e0 	.word	0x200003e0
 8001310:	200003f0 	.word	0x200003f0
 8001314:	200003f8 	.word	0x200003f8
 8001318:	42c80000 	.word	0x42c80000
 800131c:	20000300 	.word	0x20000300
 8001320:	0800b57c 	.word	0x0800b57c
 8001324:	40590000 	.word	0x40590000
 8001328:	0800b594 	.word	0x0800b594
 800132c:	0800b5ac 	.word	0x0800b5ac
 8001330:	0800b5c0 	.word	0x0800b5c0

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_MspInit+0x4c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_MspInit+0x4c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_MspInit+0x4c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	210f      	movs	r1, #15
 800137a:	f06f 0001 	mvn.w	r0, #1
 800137e:	f000 fb72 	bl	8001a66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_DAC_MspInit+0xdc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12d      	bne.n	800140e <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a2e      	ldr	r2, [pc, #184]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 80013b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	6153      	str	r3, [r2, #20]
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013e2:	2330      	movs	r3, #48	; 0x30
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f000 fd4c 	bl	8001e94 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 5, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2105      	movs	r1, #5
 8001400:	2036      	movs	r0, #54	; 0x36
 8001402:	f000 fb30 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001406:	2036      	movs	r0, #54	; 0x36
 8001408:	f000 fb49 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 800140c:	e029      	b.n	8001462 <HAL_DAC_MspInit+0xd2>
  else if(hdac->Instance==DAC2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_DAC_MspInit+0xe4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d124      	bne.n	8001462 <HAL_DAC_MspInit+0xd2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 800141e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001422:	61d3      	str	r3, [r2, #28]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 8001436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143a:	6153      	str	r3, [r2, #20]
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_DAC_MspInit+0xe0>)
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001448:	2340      	movs	r3, #64	; 0x40
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144c:	2303      	movs	r3, #3
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145e:	f000 fd19 	bl	8001e94 <HAL_GPIO_Init>
}
 8001462:	bf00      	nop
 8001464:	3730      	adds	r7, #48	; 0x30
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40007400 	.word	0x40007400
 8001470:	40021000 	.word	0x40021000
 8001474:	40009800 	.word	0x40009800

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_TIM_Base_MspInit+0x44>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d113      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_TIM_Base_MspInit+0x48>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2105      	movs	r1, #5
 80014a6:	2019      	movs	r0, #25
 80014a8:	f000 fadd 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014ac:	2019      	movs	r0, #25
 80014ae:	f000 faf6 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40014400 	.word	0x40014400
 80014c0:	40021000 	.word	0x40021000

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <HAL_UART_MspInit+0x90>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d131      	bne.n	800154a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_UART_MspInit+0x94>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_UART_MspInit+0x94>)
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_UART_MspInit+0x94>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_UART_MspInit+0x94>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <HAL_UART_MspInit+0x94>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_UART_MspInit+0x94>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001516:	f248 0304 	movw	r3, #32772	; 0x8004
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001528:	2307      	movs	r3, #7
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f000 fcad 	bl	8001e94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	2026      	movs	r0, #38	; 0x26
 8001540:	f000 fa91 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001544:	2026      	movs	r0, #38	; 0x26
 8001546:	f000 faaa 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40004400 	.word	0x40004400
 8001558:	40021000 	.word	0x40021000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 f970 	bl	8001870 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001590:	f005 fe22 	bl	80071d8 <xTaskGetSchedulerState>
 8001594:	4603      	mov	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800159a:	f006 fc05 	bl	8007da8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015aa:	f002 f90d 	bl	80037c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000220 	.word	0x20000220

080015b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USART2_IRQHandler+0x10>)
 80015be:	f002 fbfd 	bl	8003dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000026c 	.word	0x2000026c

080015cc <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM6_DAC1_IRQHandler+0x10>)
 80015d2:	f000 fb1a 	bl	8001c0a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200001f8 	.word	0x200001f8

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	f007 ff51 	bl	80094a0 <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001622:	e7fe      	b.n	8001622 <_exit+0x12>

08001624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e00a      	b.n	800164c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001636:	f3af 8000 	nop.w
 800163a:	4601      	mov	r1, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	b2ca      	uxtb	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf0      	blt.n	8001636 <_read+0x12>
  }

  return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e009      	b.n	8001684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf1      	blt.n	8001670 <_write+0x12>
  }
  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_close>:

int _close(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016be:	605a      	str	r2, [r3, #4]
  return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_isatty>:

int _isatty(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f007 feb6 	bl	80094a0 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20003000 	.word	0x20003000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000408 	.word	0x20000408
 8001768:	20001f40 	.word	0x20001f40

0800176c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f007 fe75 	bl	80094ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7ff fa81 	bl	8000cc8 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017d4:	0800ba98 	.word	0x0800ba98
  ldr r2, =_sbss
 80017d8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017dc:	20001f3c 	.word	0x20001f3c

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x28>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f92b 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fd9e 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f943 	bl	8001aba <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 f90b 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000004 	.word	0x20000004
 8001868:	2000000c 	.word	0x2000000c
 800186c:	20000008 	.word	0x20000008

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000000c 	.word	0x2000000c
 8001894:	2000040c 	.word	0x2000040c

08001898 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;  
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	2000040c 	.word	0x2000040c

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	; (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	; (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e014      	b.n	8001b0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fc4b 	bl	8001390 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001b2a:	b480      	push	{r7}
 8001b2c:	b087      	sub	sp, #28
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3308      	adds	r3, #8
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e004      	b.n	8001b5e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3314      	adds	r3, #20
 8001b5c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	461a      	mov	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	795b      	ldrb	r3, [r3, #5]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_DAC_Start+0x16>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e039      	b.n	8001bfe <HAL_DAC_Start+0x8a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10f      	bne.n	8001bd0 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001bba:	2b3c      	cmp	r3, #60	; 0x3c
 8001bbc:	d118      	bne.n	8001bf0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	e00f      	b.n	8001bf0 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001bda:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001bde:	d107      	bne.n	8001bf0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0202 	orr.w	r2, r2, #2
 8001bee:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c20:	d120      	bne.n	8001c64 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c30:	d118      	bne.n	8001c64 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c5c:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff59 	bl	8001b16 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c72:	d120      	bne.n	8001cb6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c82:	d118      	bne.n	8001cb6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2204      	movs	r2, #4
 8001c88:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cae:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f86d 	bl	8001d90 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	795b      	ldrb	r3, [r3, #5]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DAC_ConfigChannel+0x20>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e04e      	b.n	8001d7e <HAL_DAC_ConfigChannel+0xbe>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_DAC_ConfigChannel+0xcc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d112      	bne.n	8001d24 <HAL_DAC_ConfigChannel+0x64>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10f      	bne.n	8001d24 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d04:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4013      	ands	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e00e      	b.n	8001d42 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001d24:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4013      	ands	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	22c0      	movs	r2, #192	; 0xc0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40007400 	.word	0x40007400

08001d90 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d008      	beq.n	8001dc8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e020      	b.n	8001e0a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020e 	bic.w	r2, r2, #14
 8001dd6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d005      	beq.n	8001e38 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e027      	b.n	8001e88 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020e 	bic.w	r2, r2, #14
 8001e46:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
    } 
  }
  return status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	e14e      	b.n	8002142 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8140 	beq.w	800213c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d005      	beq.n	8001ed4 <HAL_GPIO_Init+0x40>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d130      	bne.n	8001f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 0201 	and.w	r2, r3, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d017      	beq.n	8001f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0203 	and.w	r2, r3, #3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 809a 	beq.w	800213c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002008:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_GPIO_Init+0x2cc>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_GPIO_Init+0x2cc>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b52      	ldr	r3, [pc, #328]	; (8002160 <HAL_GPIO_Init+0x2cc>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002020:	4a50      	ldr	r2, [pc, #320]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1e0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a46      	ldr	r2, [pc, #280]	; (8002168 <HAL_GPIO_Init+0x2d4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_GPIO_Init+0x2d8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1d8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HAL_GPIO_Init+0x2dc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1d4>
 8002064:	2303      	movs	r3, #3
 8002066:	e006      	b.n	8002076 <HAL_GPIO_Init+0x1e2>
 8002068:	2305      	movs	r3, #5
 800206a:	e004      	b.n	8002076 <HAL_GPIO_Init+0x1e2>
 800206c:	2302      	movs	r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x1e2>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_GPIO_Init+0x1e2>
 8002074:	2300      	movs	r3, #0
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	f002 0203 	and.w	r2, r2, #3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4093      	lsls	r3, r2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002086:	4937      	ldr	r1, [pc, #220]	; (8002164 <HAL_GPIO_Init+0x2d0>)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020b8:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002136:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_GPIO_Init+0x2e0>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3301      	adds	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f aea9 	bne.w	8001ea4 <HAL_GPIO_Init+0x10>
  }
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000
 8002168:	48000400 	.word	0x48000400
 800216c:	48000800 	.word	0x48000800
 8002170:	48000c00 	.word	0x48000c00
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800217e:	af00      	add	r7, sp, #0
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002188:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f001 b823 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 817d 	beq.w	80024ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021b4:	4bbc      	ldr	r3, [pc, #752]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00c      	beq.n	80021da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c0:	4bb9      	ldr	r3, [pc, #740]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d15c      	bne.n	8002286 <HAL_RCC_OscConfig+0x10e>
 80021cc:	4bb6      	ldr	r3, [pc, #728]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d155      	bne.n	8002286 <HAL_RCC_OscConfig+0x10e>
 80021da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0x94>
 8002206:	4ba8      	ldr	r3, [pc, #672]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e015      	b.n	8002238 <HAL_RCC_OscConfig+0xc0>
 800220c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002210:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002228:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002234:	4b9c      	ldr	r3, [pc, #624]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800223c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002240:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800224c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f042 0220 	orr.w	r2, r2, #32
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f002 021f 	and.w	r2, r2, #31
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 811f 	beq.w	80024ac <HAL_RCC_OscConfig+0x334>
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8116 	bne.w	80024ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f000 bfaf 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x12e>
 8002298:	4b83      	ldr	r3, [pc, #524]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a82      	ldr	r2, [pc, #520]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e036      	b.n	8002314 <HAL_RCC_OscConfig+0x19c>
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x158>
 80022b6:	4b7c      	ldr	r3, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7b      	ldr	r2, [pc, #492]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b79      	ldr	r3, [pc, #484]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a78      	ldr	r2, [pc, #480]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e021      	b.n	8002314 <HAL_RCC_OscConfig+0x19c>
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x184>
 80022e2:	4b71      	ldr	r3, [pc, #452]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a70      	ldr	r2, [pc, #448]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b6e      	ldr	r3, [pc, #440]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6d      	ldr	r2, [pc, #436]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x19c>
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a69      	ldr	r2, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a66      	ldr	r2, [pc, #408]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002314:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f023 020f 	bic.w	r2, r3, #15
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	495f      	ldr	r1, [pc, #380]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 800232a:	4313      	orrs	r3, r2
 800232c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d059      	beq.n	80023f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff faab 	bl	8001898 <HAL_GetTick>
 8002342:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff faa6 	bl	8001898 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d902      	bls.n	800235e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	f000 bf43 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 800235e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002362:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002372:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_RCC_OscConfig+0x218>
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e015      	b.n	80023bc <HAL_RCC_OscConfig+0x244>
 8002390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002394:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023b8:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023c8:	fa92 f2a2 	rbit	r2, r2
 80023cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ab      	beq.n	8002348 <HAL_RCC_OscConfig+0x1d0>
 80023f0:	e05d      	b.n	80024ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fa51 	bl	8001898 <HAL_GetTick>
 80023f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fa4c 	bl	8001898 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d902      	bls.n	8002412 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	f000 bee9 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002416:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002426:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d102      	bne.n	8002444 <HAL_RCC_OscConfig+0x2cc>
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e015      	b.n	8002470 <HAL_RCC_OscConfig+0x2f8>
 8002444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002448:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002460:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_RCC_OscConfig+0x330>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002474:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002478:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800247c:	fa92 f2a2 	rbit	r2, r2
 8002480:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002484:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f042 0220 	orr.w	r2, r2, #32
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f002 021f 	and.w	r2, r2, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ab      	bne.n	80023fc <HAL_RCC_OscConfig+0x284>
 80024a4:	e003      	b.n	80024ae <HAL_RCC_OscConfig+0x336>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 817d 	beq.w	80027be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024c4:	4ba6      	ldr	r3, [pc, #664]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024d0:	4ba3      	ldr	r3, [pc, #652]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d172      	bne.n	80025c2 <HAL_RCC_OscConfig+0x44a>
 80024dc:	4ba0      	ldr	r3, [pc, #640]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d16c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x44a>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0x3a0>
 8002512:	4b93      	ldr	r3, [pc, #588]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e013      	b.n	8002540 <HAL_RCC_OscConfig+0x3c8>
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002530:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800253c:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2202      	movs	r2, #2
 8002542:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002546:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002552:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002556:	fab2 f282 	clz	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f042 0220 	orr.w	r2, r2, #32
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f002 021f 	and.w	r2, r2, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCC_OscConfig+0x410>
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d002      	beq.n	8002588 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	f000 be2e 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b75      	ldr	r3, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	21f8      	movs	r1, #248	; 0xf8
 800259e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025a6:	fa91 f1a1 	rbit	r1, r1
 80025aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025b2:	fab1 f181 	clz	r1, r1
 80025b6:	b2c9      	uxtb	r1, r1
 80025b8:	408b      	lsls	r3, r1
 80025ba:	4969      	ldr	r1, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c0:	e0fd      	b.n	80027be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8088 	beq.w	80026e4 <HAL_RCC_OscConfig+0x56c>
 80025d4:	2301      	movs	r3, #1
 80025d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	461a      	mov	r2, r3
 80025fc:	2301      	movs	r3, #1
 80025fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff f94a 	bl	8001898 <HAL_GetTick>
 8002604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260a:	f7ff f945 	bl	8001898 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d902      	bls.n	8002620 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	f000 bde2 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002632:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0x4d8>
 800264a:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e013      	b.n	8002678 <HAL_RCC_OscConfig+0x500>
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002668:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2202      	movs	r2, #2
 800267a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800267e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800268a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0af      	beq.n	800260a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	21f8      	movs	r1, #248	; 0xf8
 80026c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026c8:	fa91 f1a1 	rbit	r1, r1
 80026cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026d4:	fab1 f181 	clz	r1, r1
 80026d8:	b2c9      	uxtb	r1, r1
 80026da:	408b      	lsls	r3, r1
 80026dc:	4920      	ldr	r1, [pc, #128]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
 80026e2:	e06c      	b.n	80027be <HAL_RCC_OscConfig+0x646>
 80026e4:	2301      	movs	r3, #1
 80026e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002704:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	2300      	movs	r3, #0
 800270e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff f8c2 	bl	8001898 <HAL_GetTick>
 8002714:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7ff f8bd 	bl	8001898 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	f000 bd5a 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002730:	2302      	movs	r3, #2
 8002732:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d104      	bne.n	8002764 <HAL_RCC_OscConfig+0x5ec>
 800275a:	4b01      	ldr	r3, [pc, #4]	; (8002760 <HAL_RCC_OscConfig+0x5e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e015      	b.n	800278c <HAL_RCC_OscConfig+0x614>
 8002760:	40021000 	.word	0x40021000
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800277c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002788:	4bc8      	ldr	r3, [pc, #800]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2202      	movs	r2, #2
 800278e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002792:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002796:	fa92 f2a2 	rbit	r2, r2
 800279a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800279e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f002 021f 	and.w	r2, r2, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ad      	bne.n	800271a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8110 	beq.w	80029f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d079      	beq.n	80028d8 <HAL_RCC_OscConfig+0x760>
 80027e4:	2301      	movs	r3, #1
 80027e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	4bab      	ldr	r3, [pc, #684]	; (8002ab0 <HAL_RCC_OscConfig+0x938>)
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	461a      	mov	r2, r3
 800280a:	2301      	movs	r3, #1
 800280c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff f843 	bl	8001898 <HAL_GetTick>
 8002812:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff f83e 	bl	8001898 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	f000 bcdb 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 800282e:	2302      	movs	r3, #2
 8002830:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002886:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002888:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 800288a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002890:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002894:	2102      	movs	r1, #2
 8002896:	6019      	str	r1, [r3, #0]
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f1a3 	rbit	r1, r3
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028ae:	6019      	str	r1, [r3, #0]
  return result;
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0a0      	beq.n	8002818 <HAL_RCC_OscConfig+0x6a0>
 80028d6:	e08d      	b.n	80029f4 <HAL_RCC_OscConfig+0x87c>
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002904:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_OscConfig+0x938>)
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	461a      	mov	r2, r3
 8002916:	2300      	movs	r3, #0
 8002918:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7fe ffbd 	bl	8001898 <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002924:	f7fe ffb8 	bl	8001898 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d902      	bls.n	800293a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	f000 bc55 	b.w	80031e4 <HAL_RCC_OscConfig+0x106c>
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002966:	2202      	movs	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fa93 f2a3 	rbit	r2, r3
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 80029a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029b2:	2102      	movs	r1, #2
 80029b4:	6019      	str	r1, [r3, #0]
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f1a3 	rbit	r1, r3
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029cc:	6019      	str	r1, [r3, #0]
  return result;
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d197      	bne.n	8002924 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 81a1 	beq.w	8002d4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d116      	bne.n	8002a4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a26:	61d3      	str	r3, [r2, #28]
 8002a28:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11a      	bne.n	8002a8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe ff19 	bl	8001898 <HAL_GetTick>
 8002a66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	e009      	b.n	8002a80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe ff14 	bl	8001898 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e3b1      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x93c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10d      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x940>
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCC_OscConfig+0x934>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	e03c      	b.n	8002b24 <HAL_RCC_OscConfig+0x9ac>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	10908120 	.word	0x10908120
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x96a>
 8002ac8:	4bc1      	ldr	r3, [pc, #772]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4ac0      	ldr	r2, [pc, #768]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	4bbe      	ldr	r3, [pc, #760]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4abd      	ldr	r2, [pc, #756]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	e020      	b.n	8002b24 <HAL_RCC_OscConfig+0x9ac>
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x994>
 8002af2:	4bb7      	ldr	r3, [pc, #732]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4ab6      	ldr	r2, [pc, #728]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	4bb4      	ldr	r3, [pc, #720]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4ab3      	ldr	r2, [pc, #716]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x9ac>
 8002b0c:	4bb0      	ldr	r3, [pc, #704]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4aaf      	ldr	r2, [pc, #700]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	4bad      	ldr	r3, [pc, #692]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4aac      	ldr	r2, [pc, #688]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8081 	beq.w	8002c38 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe feaf 	bl	8001898 <HAL_GetTick>
 8002b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe feaa 	bl	8001898 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e345      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b84:	2202      	movs	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ba8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xa4c>
 8002bbe:	4b84      	ldr	r3, [pc, #528]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	e013      	b.n	8002bec <HAL_RCC_OscConfig+0xa74>
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bcc:	2202      	movs	r2, #2
 8002bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4b79      	ldr	r3, [pc, #484]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	6011      	str	r1, [r2, #0]
 8002bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	fa92 f1a2 	rbit	r1, r2
 8002c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c0e:	6011      	str	r1, [r2, #0]
  return result;
 8002c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c14:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	fab2 f282 	clz	r2, r2
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f002 021f 	and.w	r2, r2, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d084      	beq.n	8002b40 <HAL_RCC_OscConfig+0x9c8>
 8002c36:	e07f      	b.n	8002d38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fe fe2e 	bl	8001898 <HAL_GetTick>
 8002c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	e00b      	b.n	8002c5a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe fe29 	bl	8001898 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e2c4      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c62:	2202      	movs	r2, #2
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ca0:	601a      	str	r2, [r3, #0]
  return result;
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002caa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f043 0302 	orr.w	r3, r3, #2
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xb4e>
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	e013      	b.n	8002cee <HAL_RCC_OscConfig+0xb76>
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cce:	2202      	movs	r2, #2
 8002cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	6011      	str	r1, [r2, #0]
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fa92 f1a2 	rbit	r1, r2
 8002d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d10:	6011      	str	r1, [r2, #0]
  return result;
 8002d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f002 021f 	and.w	r2, r2, #31
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d184      	bne.n	8002c42 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8242 	beq.w	80031e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <HAL_RCC_OscConfig+0xc58>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	f000 8213 	beq.w	8003192 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	f040 8162 	bne.w	8003042 <HAL_RCC_OscConfig+0xeca>
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002da2:	601a      	str	r2, [r3, #0]
  return result;
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fd68 	bl	8001898 <HAL_GetTick>
 8002dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	e00c      	b.n	8002de8 <HAL_RCC_OscConfig+0xc70>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fd60 	bl	8001898 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e1fd      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	fa93 f2a3 	rbit	r2, r3
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e0c:	601a      	str	r2, [r3, #0]
  return result;
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_OscConfig+0xcba>
 8002e2c:	4bb0      	ldr	r3, [pc, #704]	; (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	e027      	b.n	8002e82 <HAL_RCC_OscConfig+0xd0a>
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4b9c      	ldr	r3, [pc, #624]	; (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e86:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e8e:	6011      	str	r1, [r2, #0]
 8002e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e94:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	fa92 f1a2 	rbit	r1, r2
 8002e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ea6:	6011      	str	r1, [r2, #0]
  return result;
 8002ea8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d182      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ece:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	497f      	ldr	r1, [pc, #508]	; (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	fa93 f2a3 	rbit	r2, r3
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f1a:	601a      	str	r2, [r3, #0]
  return result;
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	461a      	mov	r2, r3
 8002f38:	2301      	movs	r3, #1
 8002f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fcac 	bl	8001898 <HAL_GetTick>
 8002f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f44:	e009      	b.n	8002f5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe fca7 	bl	8001898 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e144      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f7e:	601a      	str	r2, [r3, #0]
  return result;
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xe2c>
 8002f9e:	4b54      	ldr	r3, [pc, #336]	; (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e027      	b.n	8002ff4 <HAL_RCC_OscConfig+0xe7c>
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <HAL_RCC_OscConfig+0xf78>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ffc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003000:	6011      	str	r1, [r2, #0]
 8003002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003006:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	fa92 f1a2 	rbit	r1, r2
 8003010:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003014:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003018:	6011      	str	r1, [r2, #0]
  return result;
 800301a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800301e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	fab2 f282 	clz	r2, r2
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	f042 0220 	orr.w	r2, r2, #32
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f002 021f 	and.w	r2, r2, #31
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d082      	beq.n	8002f46 <HAL_RCC_OscConfig+0xdce>
 8003040:	e0cf      	b.n	80031e2 <HAL_RCC_OscConfig+0x106a>
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800304a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800304e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f2a3 	rbit	r2, r3
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003066:	601a      	str	r2, [r3, #0]
  return result;
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003070:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800307c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fc06 	bl	8001898 <HAL_GetTick>
 800308c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003092:	f7fe fc01 	bl	8001898 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e09e      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030ca:	601a      	str	r2, [r3, #0]
  return result;
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d104      	bne.n	80030f4 <HAL_RCC_OscConfig+0xf7c>
 80030ea:	4b01      	ldr	r3, [pc, #4]	; (80030f0 <HAL_RCC_OscConfig+0xf78>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	e029      	b.n	8003144 <HAL_RCC_OscConfig+0xfcc>
 80030f0:	40021000 	.word	0x40021000
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f2a3 	rbit	r2, r3
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCC_OscConfig+0x1078>)
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003148:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800314c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003150:	6011      	str	r1, [r2, #0]
 8003152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003156:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	fa92 f1a2 	rbit	r1, r2
 8003160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003164:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003168:	6011      	str	r1, [r2, #0]
  return result;
 800316a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800316e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	fab2 f282 	clz	r2, r2
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f002 021f 	and.w	r2, r2, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f202 	lsl.w	r2, r1, r2
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d180      	bne.n	8003092 <HAL_RCC_OscConfig+0xf1a>
 8003190:	e027      	b.n	80031e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e01e      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_RCC_OscConfig+0x1078>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10b      	bne.n	80031de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b09e      	sub	sp, #120	; 0x78
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e162      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b90      	ldr	r3, [pc, #576]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d910      	bls.n	800323c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b8d      	ldr	r3, [pc, #564]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0207 	bic.w	r2, r3, #7
 8003222:	498b      	ldr	r1, [pc, #556]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b89      	ldr	r3, [pc, #548]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e14a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	497f      	ldr	r1, [pc, #508]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80dc 	beq.w	8003420 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13c      	bne.n	80032ea <HAL_RCC_ClockConfig+0xf6>
 8003270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003274:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_RCC_ClockConfig+0xa6>
 8003294:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e00f      	b.n	80032ba <HAL_RCC_ClockConfig+0xc6>
 800329a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	667b      	str	r3, [r7, #100]	; 0x64
 80032a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ac:	663b      	str	r3, [r7, #96]	; 0x60
 80032ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b6:	4b67      	ldr	r3, [pc, #412]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032be:	65ba      	str	r2, [r7, #88]	; 0x58
 80032c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032c2:	fa92 f2a2 	rbit	r2, r2
 80032c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f042 0220 	orr.w	r2, r2, #32
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f002 021f 	and.w	r2, r2, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d17b      	bne.n	80033de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0f3      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d13c      	bne.n	800336c <HAL_RCC_ClockConfig+0x178>
 80032f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_RCC_ClockConfig+0x128>
 8003316:	4b4f      	ldr	r3, [pc, #316]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e00f      	b.n	800333c <HAL_RCC_ClockConfig+0x148>
 800331c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
 800332a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003340:	63ba      	str	r2, [r7, #56]	; 0x38
 8003342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003344:	fa92 f2a2 	rbit	r2, r2
 8003348:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800334a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d13a      	bne.n	80033de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b2      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
 800336c:	2302      	movs	r3, #2
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <HAL_RCC_ClockConfig+0x1a0>
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	e00d      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1bc>
 8003394:	2302      	movs	r3, #2
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2202      	movs	r2, #2
 80033b2:	61ba      	str	r2, [r7, #24]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	fa92 f2a2 	rbit	r2, r2
 80033ba:	617a      	str	r2, [r7, #20]
  return result;
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e079      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	491a      	ldr	r1, [pc, #104]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fa52 	bl	8001898 <HAL_GetTick>
 80033f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fe fa4e 	bl	8001898 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e061      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_RCC_ClockConfig+0x260>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d214      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	4906      	ldr	r1, [pc, #24]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_RCC_ClockConfig+0x25c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e040      	b.n	80034d2 <HAL_RCC_ClockConfig+0x2de>
 8003450:	40022000 	.word	0x40022000
 8003454:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	491a      	ldr	r1, [pc, #104]	; (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4912      	ldr	r1, [pc, #72]	; (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003496:	f000 f829 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 800349a:	4601      	mov	r1, r0
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_RCC_ClockConfig+0x2e8>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a4:	22f0      	movs	r2, #240	; 0xf0
 80034a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	fa92 f2a2 	rbit	r2, r2
 80034ae:	60fa      	str	r2, [r7, #12]
  return result;
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	40d3      	lsrs	r3, r2
 80034ba:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <HAL_RCC_ClockConfig+0x2ec>)
 80034bc:	5cd3      	ldrb	r3, [r2, r3]
 80034be:	fa21 f303 	lsr.w	r3, r1, r3
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <HAL_RCC_ClockConfig+0x2f0>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_RCC_ClockConfig+0x2f4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f9a0 	bl	8001810 <HAL_InitTick>
  
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3778      	adds	r7, #120	; 0x78
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800b644 	.word	0x0800b644
 80034e4:	20000004 	.word	0x20000004
 80034e8:	20000008 	.word	0x20000008

080034ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b08b      	sub	sp, #44	; 0x2c
 80034f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d002      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x30>
 8003516:	2b08      	cmp	r3, #8
 8003518:	d003      	beq.n	8003522 <HAL_RCC_GetSysClockFreq+0x36>
 800351a:	e03c      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800351c:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800351e:	623b      	str	r3, [r7, #32]
      break;
 8003520:	e03c      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003528:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800352c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	fa92 f2a2 	rbit	r2, r2
 8003534:	607a      	str	r2, [r7, #4]
  return result;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	fab2 f282 	clz	r2, r2
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	40d3      	lsrs	r3, r2
 8003540:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003546:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	220f      	movs	r2, #15
 8003550:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	fa92 f2a2 	rbit	r2, r2
 8003558:	60fa      	str	r2, [r7, #12]
  return result;
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	40d3      	lsrs	r3, r2
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003574:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	fbb2 f2f3 	udiv	r2, r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	e004      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	623b      	str	r3, [r7, #32]
      break;
 8003594:	e002      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003598:	623b      	str	r3, [r7, #32]
      break;
 800359a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359c:	6a3b      	ldr	r3, [r7, #32]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	372c      	adds	r7, #44	; 0x2c
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	007a1200 	.word	0x007a1200
 80035b4:	0800b65c 	.word	0x0800b65c
 80035b8:	0800b66c 	.word	0x0800b66c
 80035bc:	003d0900 	.word	0x003d0900

080035c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000004 	.word	0x20000004

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035de:	f7ff ffef 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 80035e2:	4601      	mov	r1, r0
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	fa92 f2a2 	rbit	r2, r2
 80035f8:	603a      	str	r2, [r7, #0]
  return result;
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	fab2 f282 	clz	r2, r2
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	40d3      	lsrs	r3, r2
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	0800b654 	.word	0x0800b654

0800361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003622:	f7ff ffcd 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 8003626:	4601      	mov	r1, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003630:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003634:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	fa92 f2a2 	rbit	r2, r2
 800363c:	603a      	str	r2, [r7, #0]
  return result;
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	40d3      	lsrs	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_RCC_GetPCLK2Freq+0x40>)
 800364a:	5cd3      	ldrb	r3, [r2, r3]
 800364c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	0800b654 	.word	0x0800b654

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e049      	b.n	8003706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fef6 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 f9da 	bl	8003a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d001      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e040      	b.n	80037aa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0x58>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d009      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0x58>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_TIM_Base_Start_IT+0xac>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0x58>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d115      	bne.n	8003794 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d015      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x96>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d011      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	e008      	b.n	80037a6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e000      	b.n	80037a8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	00010007 	.word	0x00010007

080037c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0202 	mvn.w	r2, #2
 80037f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f905 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8f7 	bl	8003a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f908 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0204 	mvn.w	r2, #4
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8db 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8cd 	bl	8003a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f8de 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b08      	cmp	r3, #8
 8003884:	d122      	bne.n	80038cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d11b      	bne.n	80038cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0208 	mvn.w	r2, #8
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2204      	movs	r2, #4
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8b1 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8a3 	bl	8003a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8b4 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d122      	bne.n	8003920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d11b      	bne.n	8003920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0210 	mvn.w	r2, #16
 80038f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2208      	movs	r2, #8
 80038f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f887 	bl	8003a1a <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f879 	bl	8003a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f88a 	bl	8003a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10e      	bne.n	800394c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d107      	bne.n	800394c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0201 	mvn.w	r2, #1
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd fbb2 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b80      	cmp	r3, #128	; 0x80
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8f2 	bl	8003b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003986:	d10e      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b80      	cmp	r3, #128	; 0x80
 8003994:	d107      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800399e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8e5 	bl	8003b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d10e      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d107      	bne.n	80039d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f838 	bl	8003a42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d10e      	bne.n	80039fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f06f 0220 	mvn.w	r2, #32
 80039f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f8a5 	bl	8003b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a32      	ldr	r2, [pc, #200]	; (8003b34 <TIM_Base_SetConfig+0xdc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_Base_SetConfig+0x28>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a76:	d003      	beq.n	8003a80 <TIM_Base_SetConfig+0x28>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a2f      	ldr	r2, [pc, #188]	; (8003b38 <TIM_Base_SetConfig+0xe0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d108      	bne.n	8003a92 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <TIM_Base_SetConfig+0xdc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <TIM_Base_SetConfig+0x6a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d00f      	beq.n	8003ac2 <TIM_Base_SetConfig+0x6a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <TIM_Base_SetConfig+0xe0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <TIM_Base_SetConfig+0x6a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <TIM_Base_SetConfig+0xe4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_Base_SetConfig+0x6a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <TIM_Base_SetConfig+0xe8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_Base_SetConfig+0x6a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <TIM_Base_SetConfig+0xec>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d108      	bne.n	8003ad4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <TIM_Base_SetConfig+0xdc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <TIM_Base_SetConfig+0xc0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a0e      	ldr	r2, [pc, #56]	; (8003b3c <TIM_Base_SetConfig+0xe4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <TIM_Base_SetConfig+0xc0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <TIM_Base_SetConfig+0xe8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0xc0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <TIM_Base_SetConfig+0xec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	615a      	str	r2, [r3, #20]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800

08003b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e040      	b.n	8003c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd fc8c 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	; 0x24
 8003bb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fc00 	bl	80043c8 <UART_SetConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e022      	b.n	8003c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fd2a 	bl	8004634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fdb1 	bl	8004778 <UART_CheckIdleState>
 8003c16:	4603      	mov	r3, r0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d178      	bne.n	8003d2a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_UART_Transmit+0x24>
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e071      	b.n	8003d2c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2221      	movs	r2, #33	; 0x21
 8003c54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c56:	f7fd fe1f 	bl	8001898 <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c74:	d108      	bne.n	8003c88 <HAL_UART_Transmit+0x68>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	e003      	b.n	8003c90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c90:	e030      	b.n	8003cf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fe13 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e03c      	b.n	8003d2c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc4:	b292      	uxth	r2, r2
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	3302      	adds	r3, #2
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e008      	b.n	8003ce2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	b292      	uxth	r2, r2
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1c8      	bne.n	8003c92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2200      	movs	r2, #0
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fddc 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e005      	b.n	8003d2c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d132      	bne.n	8003db2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_UART_Receive_IT+0x24>
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e02b      	b.n	8003db4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d018      	beq.n	8003da2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	69f9      	ldr	r1, [r7, #28]
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e6      	bne.n	8003d70 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	461a      	mov	r2, r3
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fdf5 	bl	8004998 <UART_Start_Receive_IT>
 8003dae:	4603      	mov	r3, r0
 8003db0:	e000      	b.n	8003db4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
  }
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3728      	adds	r7, #40	; 0x28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b0ba      	sub	sp, #232	; 0xe8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003de6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003dea:	4013      	ands	r3, r2
 8003dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d115      	bne.n	8003e24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00f      	beq.n	8003e24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 82ab 	beq.w	8004370 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
      }
      return;
 8003e22:	e2a5      	b.n	8004370 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8117 	beq.w	800405c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e3e:	4b85      	ldr	r3, [pc, #532]	; (8004054 <HAL_UART_IRQHandler+0x298>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 810a 	beq.w	800405c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d011      	beq.n	8003e78 <HAL_UART_IRQHandler+0xbc>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d011      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xec>
 8003e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2202      	movs	r2, #2
 8003e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	f043 0204 	orr.w	r2, r3, #4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d011      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x11c>
 8003eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2208      	movs	r2, #8
 8003f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0a:	f043 0208 	orr.w	r2, r3, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d012      	beq.n	8003f46 <HAL_UART_IRQHandler+0x18a>
 8003f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8211 	beq.w	8004374 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d005      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d04f      	beq.n	800403e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fdc0 	bl	8004b24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d141      	bne.n	8004036 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1d9      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004002:	2b00      	cmp	r3, #0
 8004004:	d013      	beq.n	800402e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <HAL_UART_IRQHandler+0x29c>)
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd feff 	bl	8001e16 <HAL_DMA_Abort_IT>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d017      	beq.n	800404e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004028:	4610      	mov	r0, r2
 800402a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402c:	e00f      	b.n	800404e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9b4 	bl	800439c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	e00b      	b.n	800404e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9b0 	bl	800439c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e007      	b.n	800404e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9ac 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800404c:	e192      	b.n	8004374 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404e:	bf00      	nop
    return;
 8004050:	e190      	b.n	8004374 <HAL_UART_IRQHandler+0x5b8>
 8004052:	bf00      	nop
 8004054:	04000120 	.word	0x04000120
 8004058:	08004bed 	.word	0x08004bed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	2b01      	cmp	r3, #1
 8004062:	f040 814b 	bne.w	80042fc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8144 	beq.w	80042fc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 813d 	beq.w	80042fc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2210      	movs	r2, #16
 8004088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	f040 80b5 	bne.w	8004204 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8164 	beq.w	8004378 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ba:	429a      	cmp	r2, r3
 80040bc:	f080 815c 	bcs.w	8004378 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	f000 8086 	beq.w	80041e2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004100:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004104:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800410c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1da      	bne.n	80040d6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004144:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004148:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800414c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e1      	bne.n	8004120 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800416c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004180:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004182:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004186:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800418e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e3      	bne.n	800415c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b2:	f023 0310 	bic.w	r3, r3, #16
 80041b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80041c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e4      	bne.n	80041a2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd fde1 	bl	8001da4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	4619      	mov	r1, r3
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f8d7 	bl	80043b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004202:	e0b9      	b.n	8004378 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004210:	b29b      	uxth	r3, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80ab 	beq.w	800437c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80a6 	beq.w	800437c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004252:	647b      	str	r3, [r7, #68]	; 0x44
 8004254:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e4      	bne.n	8004230 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	623b      	str	r3, [r7, #32]
   return(result);
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800428a:	633a      	str	r2, [r7, #48]	; 0x30
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e3      	bne.n	8004266 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	617b      	str	r3, [r7, #20]
   return(result);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e4      	bne.n	80042b2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f85b 	bl	80043b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042fa:	e03f      	b.n	800437c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <HAL_UART_IRQHandler+0x56a>
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800430c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800431c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fe4c 	bl	8004fbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004324:	e02d      	b.n	8004382 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00e      	beq.n	8004350 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01c      	beq.n	8004380 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
    }
    return;
 800434e:	e017      	b.n	8004380 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <HAL_UART_IRQHandler+0x5c6>
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00c      	beq.n	8004382 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fc55 	bl	8004c18 <UART_EndTransmit_IT>
    return;
 800436e:	e008      	b.n	8004382 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004370:	bf00      	nop
 8004372:	e006      	b.n	8004382 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004374:	bf00      	nop
 8004376:	e004      	b.n	8004382 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <HAL_UART_IRQHandler+0x5c6>
      return;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004380:	bf00      	nop
  }

}
 8004382:	37e8      	adds	r7, #232	; 0xe8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b8a      	ldr	r3, [pc, #552]	; (800461c <UART_SetConfig+0x254>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	6979      	ldr	r1, [r7, #20]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	430a      	orrs	r2, r1
 8004438:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a78      	ldr	r2, [pc, #480]	; (8004620 <UART_SetConfig+0x258>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d120      	bne.n	8004486 <UART_SetConfig+0xbe>
 8004444:	4b77      	ldr	r3, [pc, #476]	; (8004624 <UART_SetConfig+0x25c>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	2b03      	cmp	r3, #3
 800444e:	d817      	bhi.n	8004480 <UART_SetConfig+0xb8>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0x90>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	08004469 	.word	0x08004469
 800445c:	08004475 	.word	0x08004475
 8004460:	0800447b 	.word	0x0800447b
 8004464:	0800446f 	.word	0x0800446f
 8004468:	2300      	movs	r3, #0
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e01d      	b.n	80044aa <UART_SetConfig+0xe2>
 800446e:	2302      	movs	r3, #2
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e01a      	b.n	80044aa <UART_SetConfig+0xe2>
 8004474:	2304      	movs	r3, #4
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e017      	b.n	80044aa <UART_SetConfig+0xe2>
 800447a:	2308      	movs	r3, #8
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e014      	b.n	80044aa <UART_SetConfig+0xe2>
 8004480:	2310      	movs	r3, #16
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e011      	b.n	80044aa <UART_SetConfig+0xe2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a67      	ldr	r2, [pc, #412]	; (8004628 <UART_SetConfig+0x260>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d102      	bne.n	8004496 <UART_SetConfig+0xce>
 8004490:	2300      	movs	r3, #0
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e009      	b.n	80044aa <UART_SetConfig+0xe2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a64      	ldr	r2, [pc, #400]	; (800462c <UART_SetConfig+0x264>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d102      	bne.n	80044a6 <UART_SetConfig+0xde>
 80044a0:	2300      	movs	r3, #0
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e001      	b.n	80044aa <UART_SetConfig+0xe2>
 80044a6:	2310      	movs	r3, #16
 80044a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b2:	d15a      	bne.n	800456a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044b4:	7ffb      	ldrb	r3, [r7, #31]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d827      	bhi.n	800450a <UART_SetConfig+0x142>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0xf8>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	0800450b 	.word	0x0800450b
 80044d0:	080044fb 	.word	0x080044fb
 80044d4:	0800450b 	.word	0x0800450b
 80044d8:	0800450b 	.word	0x0800450b
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	08004503 	.word	0x08004503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e4:	f7ff f878 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80044e8:	61b8      	str	r0, [r7, #24]
        break;
 80044ea:	e013      	b.n	8004514 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ec:	f7ff f896 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 80044f0:	61b8      	str	r0, [r7, #24]
        break;
 80044f2:	e00f      	b.n	8004514 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f4:	4b4e      	ldr	r3, [pc, #312]	; (8004630 <UART_SetConfig+0x268>)
 80044f6:	61bb      	str	r3, [r7, #24]
        break;
 80044f8:	e00c      	b.n	8004514 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fa:	f7fe fff7 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80044fe:	61b8      	str	r0, [r7, #24]
        break;
 8004500:	e008      	b.n	8004514 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004506:	61bb      	str	r3, [r7, #24]
        break;
 8004508:	e004      	b.n	8004514 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	77bb      	strb	r3, [r7, #30]
        break;
 8004512:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d074      	beq.n	8004604 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	005a      	lsls	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b0f      	cmp	r3, #15
 8004534:	d916      	bls.n	8004564 <UART_SetConfig+0x19c>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d212      	bcs.n	8004564 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f023 030f 	bic.w	r3, r3, #15
 8004546:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	b29b      	uxth	r3, r3
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	b29a      	uxth	r2, r3
 8004554:	89fb      	ldrh	r3, [r7, #14]
 8004556:	4313      	orrs	r3, r2
 8004558:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	89fa      	ldrh	r2, [r7, #14]
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	e04f      	b.n	8004604 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	77bb      	strb	r3, [r7, #30]
 8004568:	e04c      	b.n	8004604 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800456a:	7ffb      	ldrb	r3, [r7, #31]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d828      	bhi.n	80045c2 <UART_SetConfig+0x1fa>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0x1b0>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045ad 	.word	0x080045ad
 8004584:	080045c3 	.word	0x080045c3
 8004588:	080045b3 	.word	0x080045b3
 800458c:	080045c3 	.word	0x080045c3
 8004590:	080045c3 	.word	0x080045c3
 8004594:	080045c3 	.word	0x080045c3
 8004598:	080045bb 	.word	0x080045bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7ff f81c 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80045a0:	61b8      	str	r0, [r7, #24]
        break;
 80045a2:	e013      	b.n	80045cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7ff f83a 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 80045a8:	61b8      	str	r0, [r7, #24]
        break;
 80045aa:	e00f      	b.n	80045cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <UART_SetConfig+0x268>)
 80045ae:	61bb      	str	r3, [r7, #24]
        break;
 80045b0:	e00c      	b.n	80045cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b2:	f7fe ff9b 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80045b6:	61b8      	str	r0, [r7, #24]
        break;
 80045b8:	e008      	b.n	80045cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	61bb      	str	r3, [r7, #24]
        break;
 80045c0:	e004      	b.n	80045cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ca:	bf00      	nop
    }

    if (pclk != 0U)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d018      	beq.n	8004604 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	085a      	lsrs	r2, r3, #1
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	441a      	add	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d909      	bls.n	8004600 <UART_SetConfig+0x238>
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f2:	d205      	bcs.n	8004600 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	e001      	b.n	8004604 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004610:	7fbb      	ldrb	r3, [r7, #30]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	efff69f3 	.word	0xefff69f3
 8004620:	40013800 	.word	0x40013800
 8004624:	40021000 	.word	0x40021000
 8004628:	40004400 	.word	0x40004400
 800462c:	40004800 	.word	0x40004800
 8004630:	007a1200 	.word	0x007a1200

08004634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01a      	beq.n	800474a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004732:	d10a      	bne.n	800474a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	605a      	str	r2, [r3, #4]
  }
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b098      	sub	sp, #96	; 0x60
 800477c:	af02      	add	r7, sp, #8
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004788:	f7fd f886 	bl	8001898 <HAL_GetTick>
 800478c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b08      	cmp	r3, #8
 800479a:	d12e      	bne.n	80047fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800479c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a4:	2200      	movs	r2, #0
 80047a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f88c 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d021      	beq.n	80047fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ca:	653b      	str	r3, [r7, #80]	; 0x50
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d4:	647b      	str	r3, [r7, #68]	; 0x44
 80047d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e062      	b.n	80048c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b04      	cmp	r3, #4
 8004806:	d149      	bne.n	800489c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f856 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d03c      	beq.n	800489c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	623b      	str	r3, [r7, #32]
   return(result);
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
 8004842:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	60fb      	str	r3, [r7, #12]
   return(result);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	64bb      	str	r3, [r7, #72]	; 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	617b      	str	r3, [r7, #20]
   return(result);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e011      	b.n	80048c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3758      	adds	r7, #88	; 0x58
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d8:	e049      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d045      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fc ffd9 	bl	8001898 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e048      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d031      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d110      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2208      	movs	r2, #8
 800491e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f8ff 	bl	8004b24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2208      	movs	r2, #8
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e029      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004948:	d111      	bne.n	800496e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f8e5 	bl	8004b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e00f      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	429a      	cmp	r2, r3
 800498a:	d0a6      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004998:	b480      	push	{r7}
 800499a:	b097      	sub	sp, #92	; 0x5c
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ca:	d10e      	bne.n	80049ea <UART_Start_Receive_IT+0x52>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <UART_Start_Receive_IT+0x48>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049de:	e02d      	b.n	8004a3c <UART_Start_Receive_IT+0xa4>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	22ff      	movs	r2, #255	; 0xff
 80049e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049e8:	e028      	b.n	8004a3c <UART_Start_Receive_IT+0xa4>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <UART_Start_Receive_IT+0x76>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <UART_Start_Receive_IT+0x6c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a02:	e01b      	b.n	8004a3c <UART_Start_Receive_IT+0xa4>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	227f      	movs	r2, #127	; 0x7f
 8004a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a0c:	e016      	b.n	8004a3c <UART_Start_Receive_IT+0xa4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a16:	d10d      	bne.n	8004a34 <UART_Start_Receive_IT+0x9c>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <UART_Start_Receive_IT+0x92>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	227f      	movs	r2, #127	; 0x7f
 8004a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a28:	e008      	b.n	8004a3c <UART_Start_Receive_IT+0xa4>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	223f      	movs	r2, #63	; 0x3f
 8004a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a32:	e003      	b.n	8004a3c <UART_Start_Receive_IT+0xa4>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2222      	movs	r2, #34	; 0x22
 8004a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	657b      	str	r3, [r7, #84]	; 0x54
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a6c:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a88:	d107      	bne.n	8004a9a <UART_Start_Receive_IT+0x102>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <UART_Start_Receive_IT+0x184>)
 8004a96:	669a      	str	r2, [r3, #104]	; 0x68
 8004a98:	e002      	b.n	8004aa0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <UART_Start_Receive_IT+0x188>)
 8004a9e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d019      	beq.n	8004adc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e6      	bne.n	8004aa8 <UART_Start_Receive_IT+0x110>
 8004ada:	e018      	b.n	8004b0e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f043 0320 	orr.w	r3, r3, #32
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	69f9      	ldr	r1, [r7, #28]
 8004b00:	6a3a      	ldr	r2, [r7, #32]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	375c      	adds	r7, #92	; 0x5c
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	08004e15 	.word	0x08004e15
 8004b20:	08004c6d 	.word	0x08004c6d

08004b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b095      	sub	sp, #84	; 0x54
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e6      	bne.n	8004b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d118      	bne.n	8004bcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004be0:	bf00      	nop
 8004be2:	3754      	adds	r7, #84	; 0x54
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fbc6 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fb92 	bl	8004388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c64:	bf00      	nop
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b09c      	sub	sp, #112	; 0x70
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c7a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c84:	2b22      	cmp	r3, #34	; 0x22
 8004c86:	f040 80b9 	bne.w	8004dfc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004c98:	b2d9      	uxtb	r1, r3
 8004c9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	400a      	ands	r2, r1
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f040 809c 	bne.w	8004e0c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cf4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e6      	bne.n	8004cd4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3308      	adds	r3, #8
 8004d24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d26:	647a      	str	r2, [r7, #68]	; 0x44
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e5      	bne.n	8004d06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d018      	beq.n	8004d8e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	623b      	str	r3, [r7, #32]
   return(result);
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d70:	663b      	str	r3, [r7, #96]	; 0x60
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e6      	bne.n	8004d5c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d12e      	bne.n	8004df4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f023 0310 	bic.w	r3, r3, #16
 8004db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	69b9      	ldr	r1, [r7, #24]
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e6      	bne.n	8004d9c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d103      	bne.n	8004de4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2210      	movs	r2, #16
 8004de2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fadf 	bl	80043b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004df2:	e00b      	b.n	8004e0c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fc f8f3 	bl	8000fe0 <HAL_UART_RxCpltCallback>
}
 8004dfa:	e007      	b.n	8004e0c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	619a      	str	r2, [r3, #24]
}
 8004e0c:	bf00      	nop
 8004e0e:	3770      	adds	r7, #112	; 0x70
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b09c      	sub	sp, #112	; 0x70
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2c:	2b22      	cmp	r3, #34	; 0x22
 8004e2e:	f040 80b9 	bne.w	8004fa4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004e46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 809c 	bne.w	8004fb4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e90:	667b      	str	r3, [r7, #100]	; 0x64
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e6      	bne.n	8004e7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ece:	643a      	str	r2, [r7, #64]	; 0x40
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ed4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d018      	beq.n	8004f36 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f24:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d12e      	bne.n	8004f9c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f023 0310 	bic.w	r3, r3, #16
 8004f58:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e6      	bne.n	8004f44 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d103      	bne.n	8004f8c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fa0b 	bl	80043b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f9a:	e00b      	b.n	8004fb4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fc f81f 	bl	8000fe0 <HAL_UART_RxCpltCallback>
}
 8004fa2:	e007      	b.n	8004fb4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0208 	orr.w	r2, r2, #8
 8004fb2:	619a      	str	r2, [r3, #24]
}
 8004fb4:	bf00      	nop
 8004fb6:	3770      	adds	r7, #112	; 0x70
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd6:	f3ef 8305 	mrs	r3, IPSR
 8004fda:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10f      	bne.n	8005002 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe6:	607b      	str	r3, [r7, #4]
  return(result);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <osKernelInitialize+0x32>
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <osKernelInitialize+0x64>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d109      	bne.n	800500a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005002:	f06f 0305 	mvn.w	r3, #5
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e00c      	b.n	8005024 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <osKernelInitialize+0x64>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <osKernelInitialize+0x64>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e002      	b.n	8005024 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800501e:	f04f 33ff 	mov.w	r3, #4294967295
 8005022:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005024:	68fb      	ldr	r3, [r7, #12]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000410 	.word	0x20000410

08005038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800503e:	f3ef 8305 	mrs	r3, IPSR
 8005042:	60bb      	str	r3, [r7, #8]
  return(result);
 8005044:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504a:	f3ef 8310 	mrs	r3, PRIMASK
 800504e:	607b      	str	r3, [r7, #4]
  return(result);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <osKernelStart+0x32>
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <osKernelStart+0x64>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d109      	bne.n	8005072 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800505e:	f3ef 8311 	mrs	r3, BASEPRI
 8005062:	603b      	str	r3, [r7, #0]
  return(result);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <osKernelStart+0x3a>
    stat = osErrorISR;
 800506a:	f06f 0305 	mvn.w	r3, #5
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	e00e      	b.n	8005090 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <osKernelStart+0x64>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <osKernelStart+0x64>)
 800507c:	2202      	movs	r2, #2
 800507e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005080:	f001 fba6 	bl	80067d0 <vTaskStartScheduler>
      stat = osOK;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e002      	b.n	8005090 <osKernelStart+0x58>
    } else {
      stat = osError;
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000410 	.word	0x20000410

080050a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b092      	sub	sp, #72	; 0x48
 80050a4:	af04      	add	r7, sp, #16
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b0:	f3ef 8305 	mrs	r3, IPSR
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8094 	bne.w	80051e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050be:	f3ef 8310 	mrs	r3, PRIMASK
 80050c2:	623b      	str	r3, [r7, #32]
  return(result);
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 808d 	bne.w	80051e6 <osThreadNew+0x146>
 80050cc:	4b48      	ldr	r3, [pc, #288]	; (80051f0 <osThreadNew+0x150>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d106      	bne.n	80050e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050d4:	f3ef 8311 	mrs	r3, BASEPRI
 80050d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 8082 	bne.w	80051e6 <osThreadNew+0x146>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d07e      	beq.n	80051e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80050ec:	2318      	movs	r3, #24
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80050f0:	2300      	movs	r3, #0
 80050f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80050f4:	f107 031b 	add.w	r3, r7, #27
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d045      	beq.n	8005192 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <osThreadNew+0x74>
        name = attr->name;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <osThreadNew+0x9a>
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	2b38      	cmp	r3, #56	; 0x38
 800512c:	d805      	bhi.n	800513a <osThreadNew+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <osThreadNew+0x9e>
        return (NULL);
 800513a:	2300      	movs	r3, #0
 800513c:	e054      	b.n	80051e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	089b      	lsrs	r3, r3, #2
 800514c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <osThreadNew+0xd4>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2ba7      	cmp	r3, #167	; 0xa7
 800515c:	d90a      	bls.n	8005174 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <osThreadNew+0xd4>
        mem = 1;
 800516e:	2301      	movs	r3, #1
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
 8005172:	e010      	b.n	8005196 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10c      	bne.n	8005196 <osThreadNew+0xf6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d108      	bne.n	8005196 <osThreadNew+0xf6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <osThreadNew+0xf6>
          mem = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005190:	e001      	b.n	8005196 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	2b01      	cmp	r3, #1
 800519a:	d110      	bne.n	80051be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051a4:	9202      	str	r2, [sp, #8]
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f001 f928 	bl	8006408 <xTaskCreateStatic>
 80051b8:	4603      	mov	r3, r0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e013      	b.n	80051e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d110      	bne.n	80051e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f001 f972 	bl	80064c0 <xTaskCreate>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d001      	beq.n	80051e6 <osThreadNew+0x146>
          hTask = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051e6:	697b      	ldr	r3, [r7, #20]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3738      	adds	r7, #56	; 0x38
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000410 	.word	0x20000410

080051f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051fc:	f3ef 8305 	mrs	r3, IPSR
 8005200:	613b      	str	r3, [r7, #16]
  return(result);
 8005202:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10f      	bne.n	8005228 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005208:	f3ef 8310 	mrs	r3, PRIMASK
 800520c:	60fb      	str	r3, [r7, #12]
  return(result);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <osDelay+0x34>
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <osDelay+0x58>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d109      	bne.n	8005230 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800521c:	f3ef 8311 	mrs	r3, BASEPRI
 8005220:	60bb      	str	r3, [r7, #8]
  return(result);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <osDelay+0x3c>
    stat = osErrorISR;
 8005228:	f06f 0305 	mvn.w	r3, #5
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e007      	b.n	8005240 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <osDelay+0x4c>
      vTaskDelay(ticks);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fa94 	bl	8006768 <vTaskDelay>
    }
  }

  return (stat);
 8005240:	697b      	ldr	r3, [r7, #20]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000410 	.word	0x20000410

08005250 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800525c:	f3ef 8305 	mrs	r3, IPSR
 8005260:	617b      	str	r3, [r7, #20]
  return(result);
 8005262:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8005264:	2b00      	cmp	r3, #0
 8005266:	d13d      	bne.n	80052e4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005268:	f3ef 8310 	mrs	r3, PRIMASK
 800526c:	613b      	str	r3, [r7, #16]
  return(result);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d137      	bne.n	80052e4 <osEventFlagsNew+0x94>
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <osEventFlagsNew+0xa0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d105      	bne.n	8005288 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800527c:	f3ef 8311 	mrs	r3, BASEPRI
 8005280:	60fb      	str	r3, [r7, #12]
  return(result);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d12d      	bne.n	80052e4 <osEventFlagsNew+0x94>
    mem = -1;
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d015      	beq.n	80052c0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <osEventFlagsNew+0x5a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b1f      	cmp	r3, #31
 80052a2:	d902      	bls.n	80052aa <osEventFlagsNew+0x5a>
        mem = 1;
 80052a4:	2301      	movs	r3, #1
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e00c      	b.n	80052c4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d108      	bne.n	80052c4 <osEventFlagsNew+0x74>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <osEventFlagsNew+0x74>
          mem = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e001      	b.n	80052c4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d106      	bne.n	80052d8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f912 	bl	80054f8 <xEventGroupCreateStatic>
 80052d4:	61f8      	str	r0, [r7, #28]
 80052d6:	e005      	b.n	80052e4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80052de:	f000 f942 	bl	8005566 <xEventGroupCreate>
 80052e2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80052e4:	69fb      	ldr	r3, [r7, #28]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000410 	.word	0x20000410

080052f4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <osEventFlagsSet+0x1e>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005312:	f06f 0303 	mvn.w	r3, #3
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e03a      	b.n	8005390 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800531a:	f3ef 8305 	mrs	r3, IPSR
 800531e:	617b      	str	r3, [r7, #20]
  return(result);
 8005320:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005326:	f3ef 8310 	mrs	r3, PRIMASK
 800532a:	613b      	str	r3, [r7, #16]
  return(result);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <osEventFlagsSet+0x52>
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <osEventFlagsSet+0xa8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d123      	bne.n	8005382 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800533a:	f3ef 8311 	mrs	r3, BASEPRI
 800533e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01d      	beq.n	8005382 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	461a      	mov	r2, r3
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	69b8      	ldr	r0, [r7, #24]
 8005354:	f000 faaa 	bl	80058ac <xEventGroupSetBitsFromISR>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800535e:	f06f 0302 	mvn.w	r3, #2
 8005362:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005364:	e013      	b.n	800538e <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <osEventFlagsSet+0x9a>
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <osEventFlagsSet+0xac>)
 8005372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005380:	e005      	b.n	800538e <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	69b8      	ldr	r0, [r7, #24]
 8005386:	f000 f9d7 	bl	8005738 <xEventGroupSetBits>
 800538a:	61f8      	str	r0, [r7, #28]
 800538c:	e000      	b.n	8005390 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800538e:	bf00      	nop
  }

  return (rflags);
 8005390:	69fb      	ldr	r3, [r7, #28]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000410 	.word	0x20000410
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <osEventFlagsWait+0x22>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80053c6:	f06f 0303 	mvn.w	r3, #3
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
 80053cc:	e059      	b.n	8005482 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ce:	f3ef 8305 	mrs	r3, IPSR
 80053d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80053d4:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10f      	bne.n	80053fa <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053da:	f3ef 8310 	mrs	r3, PRIMASK
 80053de:	61bb      	str	r3, [r7, #24]
  return(result);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <osEventFlagsWait+0x56>
 80053e6:	4b29      	ldr	r3, [pc, #164]	; (800548c <osEventFlagsWait+0xe8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d109      	bne.n	8005402 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053ee:	f3ef 8311 	mrs	r3, BASEPRI
 80053f2:	617b      	str	r3, [r7, #20]
  return(result);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80053fa:	f06f 0305 	mvn.w	r3, #5
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	e03f      	b.n	8005482 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005410:	e001      	b.n	8005416 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8005412:	2300      	movs	r3, #0
 8005414:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8005420:	2300      	movs	r3, #0
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28
 8005424:	e001      	b.n	800542a <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8005426:	2301      	movs	r3, #1
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	6a38      	ldr	r0, [r7, #32]
 8005436:	f000 f8b1 	bl	800559c <xEventGroupWaitBits>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00e      	beq.n	8005464 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	429a      	cmp	r2, r3
 800544c:	d019      	beq.n	8005482 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8005454:	f06f 0301 	mvn.w	r3, #1
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
 800545a:	e012      	b.n	8005482 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800545c:	f06f 0302 	mvn.w	r3, #2
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
 8005462:	e00e      	b.n	8005482 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8005474:	f06f 0301 	mvn.w	r3, #1
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	e002      	b.n	8005482 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 800547c:	f06f 0302 	mvn.w	r3, #2
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005484:	4618      	mov	r0, r3
 8005486:	3730      	adds	r7, #48	; 0x30
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000410 	.word	0x20000410

08005490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a07      	ldr	r2, [pc, #28]	; (80054bc <vApplicationGetIdleTaskMemory+0x2c>)
 80054a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <vApplicationGetIdleTaskMemory+0x30>)
 80054a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	601a      	str	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000414 	.word	0x20000414
 80054c0:	200004bc 	.word	0x200004bc

080054c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80054d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a06      	ldr	r2, [pc, #24]	; (80054f4 <vApplicationGetTimerTaskMemory+0x30>)
 80054da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	200006bc 	.word	0x200006bc
 80054f4:	20000764 	.word	0x20000764

080054f8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800551c:	2320      	movs	r3, #32
 800551e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b20      	cmp	r3, #32
 8005524:	d00a      	beq.n	800553c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60fb      	str	r3, [r7, #12]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3304      	adds	r3, #4
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f9bf 	bl	80058d4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2201      	movs	r2, #1
 800555a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800555c:	697b      	ldr	r3, [r7, #20]
	}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800556c:	2020      	movs	r0, #32
 800556e:	f002 fcab 	bl	8007ec8 <pvPortMalloc>
 8005572:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f9a5 	bl	80058d4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005590:	687b      	ldr	r3, [r7, #4]
	}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b090      	sub	sp, #64	; 0x40
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <xEventGroupWaitBits+0x36>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	623b      	str	r3, [r7, #32]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61fb      	str	r3, [r7, #28]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xEventGroupWaitBits+0x72>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	61bb      	str	r3, [r7, #24]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800560e:	f001 fde3 	bl	80071d8 <xTaskGetSchedulerState>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <xEventGroupWaitBits+0x82>
 8005618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <xEventGroupWaitBits+0x86>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xEventGroupWaitBits+0x88>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	617b      	str	r3, [r7, #20]
}
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800563e:	f001 f937 	bl	80068b0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800564e:	f000 f90b 	bl	8005868 <prvTestWaitCondition>
 8005652:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00e      	beq.n	8005678 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800565e:	2300      	movs	r3, #0
 8005660:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d028      	beq.n	80056ba <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	43db      	mvns	r3, r3
 8005670:	401a      	ands	r2, r3
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e020      	b.n	80056ba <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005682:	2301      	movs	r3, #1
 8005684:	633b      	str	r3, [r7, #48]	; 0x30
 8005686:	e018      	b.n	80056ba <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056a2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	1d18      	adds	r0, r3, #4
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	4313      	orrs	r3, r2
 80056ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b0:	4619      	mov	r1, r3
 80056b2:	f001 faff 	bl	8006cb4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80056ba:	f001 f907 	bl	80068cc <xTaskResumeAll>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80056c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d031      	beq.n	800572a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d107      	bne.n	80056dc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80056cc:	4b19      	ldr	r3, [pc, #100]	; (8005734 <xEventGroupWaitBits+0x198>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80056dc:	f001 fe08 	bl	80072f0 <uxTaskResetEventItemValue>
 80056e0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11a      	bne.n	8005722 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80056ec:	f002 faca 	bl	8007c84 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056fc:	f000 f8b4 	bl	8005868 <prvTestWaitCondition>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	43db      	mvns	r3, r3
 8005714:	401a      	ands	r2, r3
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800571a:	2301      	movs	r3, #1
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800571e:	f002 fae1 	bl	8007ce4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800572c:	4618      	mov	r0, r3
 800572e:	3740      	adds	r7, #64	; 0x40
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005742:	2300      	movs	r3, #0
 8005744:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xEventGroupSetBits+0x32>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	613b      	str	r3, [r7, #16]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <xEventGroupSetBits+0x52>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	60fb      	str	r3, [r7, #12]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	3304      	adds	r3, #4
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	3308      	adds	r3, #8
 8005794:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005796:	f001 f88b 	bl	80068b0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80057ac:	e03c      	b.n	8005828 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057c4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e8:	e008      	b.n	80057fc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d101      	bne.n	80057fc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80057f8:	2301      	movs	r3, #1
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d010      	beq.n	8005824 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	4313      	orrs	r3, r2
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800581c:	4619      	mov	r1, r3
 800581e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005820:	f001 fb14 	bl	8006e4c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	429a      	cmp	r2, r3
 800582e:	d1be      	bne.n	80057ae <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	43db      	mvns	r3, r3
 8005838:	401a      	ands	r2, r3
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800583e:	f001 f845 	bl	80068cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	681b      	ldr	r3, [r3, #0]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3738      	adds	r7, #56	; 0x38
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff6c 	bl	8005738 <xEventGroupSetBits>
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d107      	bne.n	800588e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e007      	b.n	800589e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4013      	ands	r3, r2
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	429a      	cmp	r2, r3
 8005898:	d101      	bne.n	800589e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800589e:	697b      	ldr	r3, [r7, #20]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	4804      	ldr	r0, [pc, #16]	; (80058d0 <xEventGroupSetBitsFromISR+0x24>)
 80058c0:	f002 f894 	bl	80079ec <xTimerPendFunctionCallFromISR>
 80058c4:	6178      	str	r0, [r7, #20]

		return xReturn;
 80058c6:	697b      	ldr	r3, [r7, #20]
	}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	0800584f 	.word	0x0800584f

080058d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f103 0208 	add.w	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f103 0208 	add.w	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f103 0208 	add.w	r2, r3, #8
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d103      	bne.n	8005996 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e00c      	b.n	80059b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3308      	adds	r3, #8
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e002      	b.n	80059a4 <vListInsert+0x2e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d2f6      	bcs.n	800599e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6852      	ldr	r2, [r2, #4]
 8005a08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d103      	bne.n	8005a1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	1e5a      	subs	r2, r3, #1
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xQueueGenericReset+0x2a>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60bb      	str	r3, [r7, #8]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a66:	f002 f90d 	bl	8007c84 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	441a      	add	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	3b01      	subs	r3, #1
 8005a98:	68f9      	ldr	r1, [r7, #12]
 8005a9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	22ff      	movs	r2, #255	; 0xff
 8005aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d114      	bne.n	8005ae6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01a      	beq.n	8005afa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3310      	adds	r3, #16
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 f95b 	bl	8006d84 <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <xQueueGenericReset+0xcc>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	e009      	b.n	8005afa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3310      	adds	r3, #16
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fef2 	bl	80058d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3324      	adds	r3, #36	; 0x24
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff feed 	bl	80058d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005afa:	f002 f8f3 	bl	8007ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005afe:	2301      	movs	r3, #1
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08e      	sub	sp, #56	; 0x38
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <xQueueGenericCreateStatic+0x52>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <xQueueGenericCreateStatic+0x56>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <xQueueGenericCreateStatic+0x58>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	623b      	str	r3, [r7, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <xQueueGenericCreateStatic+0x7e>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <xQueueGenericCreateStatic+0x82>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <xQueueGenericCreateStatic+0x84>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	61fb      	str	r3, [r7, #28]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005baa:	2350      	movs	r3, #80	; 0x50
 8005bac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b50      	cmp	r3, #80	; 0x50
 8005bb2:	d00a      	beq.n	8005bca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	61bb      	str	r3, [r7, #24]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f805 	bl	8005bfa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3730      	adds	r7, #48	; 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e002      	b.n	8005c1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c28:	2101      	movs	r1, #1
 8005c2a:	69b8      	ldr	r0, [r7, #24]
 8005c2c:	f7ff ff06 	bl	8005a3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	; 0x38
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <xQueueGenericSend+0x32>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <xQueueGenericSend+0x40>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <xQueueGenericSend+0x44>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <xQueueGenericSend+0x46>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <xQueueGenericSend+0x60>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSend+0x6e>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <xQueueGenericSend+0x72>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <xQueueGenericSend+0x74>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xQueueGenericSend+0x8e>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	623b      	str	r3, [r7, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cce:	f001 fa83 	bl	80071d8 <xTaskGetSchedulerState>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <xQueueGenericSend+0x9e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <xQueueGenericSend+0xa2>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueGenericSend+0xa4>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueGenericSend+0xbe>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	61fb      	str	r3, [r7, #28]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cfe:	f001 ffc1 	bl	8007c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <xQueueGenericSend+0xd4>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d129      	bne.n	8005d68 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d1a:	f000 fa07 	bl	800612c <prvCopyDataToQueue>
 8005d1e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	3324      	adds	r3, #36	; 0x24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 f829 	bl	8006d84 <xTaskRemoveFromEventList>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d38:	4b3f      	ldr	r3, [pc, #252]	; (8005e38 <xQueueGenericSend+0x1f8>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	e00a      	b.n	8005d60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d50:	4b39      	ldr	r3, [pc, #228]	; (8005e38 <xQueueGenericSend+0x1f8>)
 8005d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d60:	f001 ffc0 	bl	8007ce4 <vPortExitCritical>
				return pdPASS;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e063      	b.n	8005e30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d6e:	f001 ffb9 	bl	8007ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e05c      	b.n	8005e30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 f8c5 	bl	8006f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d86:	2301      	movs	r3, #1
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d8a:	f001 ffab 	bl	8007ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d8e:	f000 fd8f 	bl	80068b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d92:	f001 ff77 	bl	8007c84 <vPortEnterCritical>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d103      	bne.n	8005dac <xQueueGenericSend+0x16c>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d103      	bne.n	8005dc2 <xQueueGenericSend+0x182>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc2:	f001 ff8f 	bl	8007ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dc6:	1d3a      	adds	r2, r7, #4
 8005dc8:	f107 0314 	add.w	r3, r7, #20
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 f8b4 	bl	8006f3c <xTaskCheckForTimeOut>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d124      	bne.n	8005e24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ddc:	f000 fa9e 	bl	800631c <prvIsQueueFull>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d018      	beq.n	8005e18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	3310      	adds	r3, #16
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 ff3c 	bl	8006c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f000 fa29 	bl	800624c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dfa:	f000 fd67 	bl	80068cc <xTaskResumeAll>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f47f af7c 	bne.w	8005cfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <xQueueGenericSend+0x1f8>)
 8005e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	e772      	b.n	8005cfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e1a:	f000 fa17 	bl	800624c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e1e:	f000 fd55 	bl	80068cc <xTaskResumeAll>
 8005e22:	e76c      	b.n	8005cfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e26:	f000 fa11 	bl	800624c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e2a:	f000 fd4f 	bl	80068cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e2e:	2300      	movs	r3, #0
		}
	}
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3738      	adds	r7, #56	; 0x38
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	; 0x38
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d103      	bne.n	8005e78 <xQueueGenericSendFromISR+0x3c>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <xQueueGenericSendFromISR+0x40>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <xQueueGenericSendFromISR+0x42>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	623b      	str	r3, [r7, #32]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x6a>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSendFromISR+0x6e>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSendFromISR+0x70>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	61fb      	str	r3, [r7, #28]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ec6:	f001 ffbf 	bl	8007e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eca:	f3ef 8211 	mrs	r2, BASEPRI
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	61ba      	str	r2, [r7, #24]
 8005ee0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <xQueueGenericSendFromISR+0xbc>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d12c      	bne.n	8005f52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f08:	f000 f910 	bl	800612c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d112      	bne.n	8005f3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	3324      	adds	r3, #36	; 0x24
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 ff2e 	bl	8006d84 <xTaskRemoveFromEventList>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00e      	beq.n	8005f4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e007      	b.n	8005f4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f40:	3301      	adds	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	b25a      	sxtb	r2, r3
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f50:	e001      	b.n	8005f56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3738      	adds	r7, #56	; 0x38
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08c      	sub	sp, #48	; 0x30
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <xQueueReceive+0x30>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	623b      	str	r3, [r7, #32]
}
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <xQueueReceive+0x3e>
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <xQueueReceive+0x42>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <xQueueReceive+0x44>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <xQueueReceive+0x5e>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	61fb      	str	r3, [r7, #28]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fca:	f001 f905 	bl	80071d8 <xTaskGetSchedulerState>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <xQueueReceive+0x6e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <xQueueReceive+0x72>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <xQueueReceive+0x74>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xQueueReceive+0x8e>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	61bb      	str	r3, [r7, #24]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ffa:	f001 fe43 	bl	8007c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01f      	beq.n	800604a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600e:	f000 f8f7 	bl	8006200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00f      	beq.n	8006042 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	3310      	adds	r3, #16
 8006026:	4618      	mov	r0, r3
 8006028:	f000 feac 	bl	8006d84 <xTaskRemoveFromEventList>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006032:	4b3d      	ldr	r3, [pc, #244]	; (8006128 <xQueueReceive+0x1bc>)
 8006034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006042:	f001 fe4f 	bl	8007ce4 <vPortExitCritical>
				return pdPASS;
 8006046:	2301      	movs	r3, #1
 8006048:	e069      	b.n	800611e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006050:	f001 fe48 	bl	8007ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006054:	2300      	movs	r3, #0
 8006056:	e062      	b.n	800611e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800605e:	f107 0310 	add.w	r3, r7, #16
 8006062:	4618      	mov	r0, r3
 8006064:	f000 ff54 	bl	8006f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800606c:	f001 fe3a 	bl	8007ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006070:	f000 fc1e 	bl	80068b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006074:	f001 fe06 	bl	8007c84 <vPortEnterCritical>
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800607e:	b25b      	sxtb	r3, r3
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d103      	bne.n	800608e <xQueueReceive+0x122>
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006094:	b25b      	sxtb	r3, r3
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d103      	bne.n	80060a4 <xQueueReceive+0x138>
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a4:	f001 fe1e 	bl	8007ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060a8:	1d3a      	adds	r2, r7, #4
 80060aa:	f107 0310 	add.w	r3, r7, #16
 80060ae:	4611      	mov	r1, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 ff43 	bl	8006f3c <xTaskCheckForTimeOut>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d123      	bne.n	8006104 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060be:	f000 f917 	bl	80062f0 <prvIsQueueEmpty>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d017      	beq.n	80060f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	3324      	adds	r3, #36	; 0x24
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4611      	mov	r1, r2
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fdcb 	bl	8006c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d8:	f000 f8b8 	bl	800624c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060dc:	f000 fbf6 	bl	80068cc <xTaskResumeAll>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d189      	bne.n	8005ffa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <xQueueReceive+0x1bc>)
 80060e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	e780      	b.n	8005ffa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fa:	f000 f8a7 	bl	800624c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060fe:	f000 fbe5 	bl	80068cc <xTaskResumeAll>
 8006102:	e77a      	b.n	8005ffa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006106:	f000 f8a1 	bl	800624c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800610a:	f000 fbdf 	bl	80068cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800610e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006110:	f000 f8ee 	bl	80062f0 <prvIsQueueEmpty>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	f43f af6f 	beq.w	8005ffa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800611c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800611e:	4618      	mov	r0, r3
 8006120:	3730      	adds	r7, #48	; 0x30
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10d      	bne.n	8006166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d14d      	bne.n	80061ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	f001 f85c 	bl	8007214 <xTaskPriorityDisinherit>
 800615c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	605a      	str	r2, [r3, #4]
 8006164:	e043      	b.n	80061ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d119      	bne.n	80061a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6898      	ldr	r0, [r3, #8]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	461a      	mov	r2, r3
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	f003 f9bf 	bl	80094fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d32b      	bcc.n	80061ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	609a      	str	r2, [r3, #8]
 800619e:	e026      	b.n	80061ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68d8      	ldr	r0, [r3, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	461a      	mov	r2, r3
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	f003 f9a5 	bl	80094fa <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	425b      	negs	r3, r3
 80061ba:	441a      	add	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d207      	bcs.n	80061dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	425b      	negs	r3, r3
 80061d6:	441a      	add	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d105      	bne.n	80061ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061f6:	697b      	ldr	r3, [r7, #20]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d018      	beq.n	8006244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	441a      	add	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d303      	bcc.n	8006234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68d9      	ldr	r1, [r3, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	461a      	mov	r2, r3
 800623e:	6838      	ldr	r0, [r7, #0]
 8006240:	f003 f95b 	bl	80094fa <memcpy>
	}
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006254:	f001 fd16 	bl	8007c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800625e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006260:	e011      	b.n	8006286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d012      	beq.n	8006290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3324      	adds	r3, #36	; 0x24
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fd88 	bl	8006d84 <xTaskRemoveFromEventList>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800627a:	f000 fec1 	bl	8007000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	3b01      	subs	r3, #1
 8006282:	b2db      	uxtb	r3, r3
 8006284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dce9      	bgt.n	8006262 <prvUnlockQueue+0x16>
 800628e:	e000      	b.n	8006292 <prvUnlockQueue+0x46>
					break;
 8006290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	22ff      	movs	r2, #255	; 0xff
 8006296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800629a:	f001 fd23 	bl	8007ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800629e:	f001 fcf1 	bl	8007c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062aa:	e011      	b.n	80062d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d012      	beq.n	80062da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3310      	adds	r3, #16
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fd63 	bl	8006d84 <xTaskRemoveFromEventList>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062c4:	f000 fe9c 	bl	8007000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dce9      	bgt.n	80062ac <prvUnlockQueue+0x60>
 80062d8:	e000      	b.n	80062dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	22ff      	movs	r2, #255	; 0xff
 80062e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062e4:	f001 fcfe 	bl	8007ce4 <vPortExitCritical>
}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062f8:	f001 fcc4 	bl	8007c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006304:	2301      	movs	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e001      	b.n	800630e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800630e:	f001 fce9 	bl	8007ce4 <vPortExitCritical>

	return xReturn;
 8006312:	68fb      	ldr	r3, [r7, #12]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006324:	f001 fcae 	bl	8007c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	429a      	cmp	r2, r3
 8006332:	d102      	bne.n	800633a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e001      	b.n	800633e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800633e:	f001 fcd1 	bl	8007ce4 <vPortExitCritical>

	return xReturn;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e014      	b.n	8006386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800635c:	4a0f      	ldr	r2, [pc, #60]	; (800639c <vQueueAddToRegistry+0x50>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006368:	490c      	ldr	r1, [pc, #48]	; (800639c <vQueueAddToRegistry+0x50>)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006372:	4a0a      	ldr	r2, [pc, #40]	; (800639c <vQueueAddToRegistry+0x50>)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800637e:	e006      	b.n	800638e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b07      	cmp	r3, #7
 800638a:	d9e7      	bls.n	800635c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20000b64 	.word	0x20000b64

080063a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063b0:	f001 fc68 	bl	8007c84 <vPortEnterCritical>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d103      	bne.n	80063ca <vQueueWaitForMessageRestricted+0x2a>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d103      	bne.n	80063e0 <vQueueWaitForMessageRestricted+0x40>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e0:	f001 fc80 	bl	8007ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3324      	adds	r3, #36	; 0x24
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fc99 	bl	8006d2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063fa:	6978      	ldr	r0, [r7, #20]
 80063fc:	f7ff ff26 	bl	800624c <prvUnlockQueue>
	}
 8006400:	bf00      	nop
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08e      	sub	sp, #56	; 0x38
 800640c:	af04      	add	r7, sp, #16
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <xTaskCreateStatic+0x2a>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	623b      	str	r3, [r7, #32]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <xTaskCreateStatic+0x46>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	61fb      	str	r3, [r7, #28]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800644e:	23a8      	movs	r3, #168	; 0xa8
 8006450:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2ba8      	cmp	r3, #168	; 0xa8
 8006456:	d00a      	beq.n	800646e <xTaskCreateStatic+0x66>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61bb      	str	r3, [r7, #24]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01e      	beq.n	80064b2 <xTaskCreateStatic+0xaa>
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01b      	beq.n	80064b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006482:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	2202      	movs	r2, #2
 8006488:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800648c:	2300      	movs	r3, #0
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f851 	bl	800654c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ac:	f000 f8ec 	bl	8006688 <prvAddNewTaskToReadyList>
 80064b0:	e001      	b.n	80064b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064b6:	697b      	ldr	r3, [r7, #20]
	}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	; 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08c      	sub	sp, #48	; 0x30
 80064c4:	af04      	add	r7, sp, #16
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fcf7 	bl	8007ec8 <pvPortMalloc>
 80064da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80064e2:	20a8      	movs	r0, #168	; 0xa8
 80064e4:	f001 fcf0 	bl	8007ec8 <pvPortMalloc>
 80064e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
 80064f6:	e005      	b.n	8006504 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064f8:	6978      	ldr	r0, [r7, #20]
 80064fa:	f001 fda9 	bl	8008050 <vPortFree>
 80064fe:	e001      	b.n	8006504 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	2300      	movs	r3, #0
 8006516:	9303      	str	r3, [sp, #12]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	9302      	str	r3, [sp, #8]
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f80f 	bl	800654c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652e:	69f8      	ldr	r0, [r7, #28]
 8006530:	f000 f8aa 	bl	8006688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006534:	2301      	movs	r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e002      	b.n	8006540 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
 800653e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006540:	69bb      	ldr	r3, [r7, #24]
	}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	461a      	mov	r2, r3
 8006564:	21a5      	movs	r1, #165	; 0xa5
 8006566:	f002 fe75 	bl	8009254 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006574:	3b01      	subs	r3, #1
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f023 0307 	bic.w	r3, r3, #7
 8006582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	617b      	str	r3, [r7, #20]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	e012      	b.n	80065d0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	7819      	ldrb	r1, [r3, #0]
 80065b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	3334      	adds	r3, #52	; 0x34
 80065ba:	460a      	mov	r2, r1
 80065bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	3301      	adds	r3, #1
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d9e9      	bls.n	80065aa <prvInitialiseNewTask+0x5e>
 80065d6:	e000      	b.n	80065da <prvInitialiseNewTask+0x8e>
		{
			break;
 80065d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2b37      	cmp	r3, #55	; 0x37
 80065e6:	d901      	bls.n	80065ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065e8:	2337      	movs	r3, #55	; 0x37
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2200      	movs	r2, #0
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff f986 	bl	8005914 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	3318      	adds	r3, #24
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff f981 	bl	8005914 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2200      	movs	r2, #0
 8006634:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	3354      	adds	r3, #84	; 0x54
 800663c:	224c      	movs	r2, #76	; 0x4c
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f002 fe07 	bl	8009254 <memset>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	4a0c      	ldr	r2, [pc, #48]	; (800667c <prvInitialiseNewTask+0x130>)
 800664a:	659a      	str	r2, [r3, #88]	; 0x58
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <prvInitialiseNewTask+0x134>)
 8006650:	65da      	str	r2, [r3, #92]	; 0x5c
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <prvInitialiseNewTask+0x138>)
 8006656:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	69b8      	ldr	r0, [r7, #24]
 800665e:	f001 f9e5 	bl	8007a2c <pxPortInitialiseStack>
 8006662:	4602      	mov	r2, r0
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006672:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006674:	bf00      	nop
 8006676:	3720      	adds	r7, #32
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20001df0 	.word	0x20001df0
 8006680:	20001e58 	.word	0x20001e58
 8006684:	20001ec0 	.word	0x20001ec0

08006688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006690:	f001 faf8 	bl	8007c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006694:	4b2d      	ldr	r3, [pc, #180]	; (800674c <prvAddNewTaskToReadyList+0xc4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	4a2c      	ldr	r2, [pc, #176]	; (800674c <prvAddNewTaskToReadyList+0xc4>)
 800669c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800669e:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066ac:	4b27      	ldr	r3, [pc, #156]	; (800674c <prvAddNewTaskToReadyList+0xc4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d110      	bne.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066b4:	f000 fcc8 	bl	8007048 <prvInitialiseTaskLists>
 80066b8:	e00d      	b.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066ba:	4b26      	ldr	r3, [pc, #152]	; (8006754 <prvAddNewTaskToReadyList+0xcc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066c2:	4b23      	ldr	r3, [pc, #140]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d802      	bhi.n	80066d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066d0:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <prvAddNewTaskToReadyList+0xd0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <prvAddNewTaskToReadyList+0xd0>)
 80066de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <prvAddNewTaskToReadyList+0xd0>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <prvAddNewTaskToReadyList+0xd4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d903      	bls.n	80066fc <prvAddNewTaskToReadyList+0x74>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a18      	ldr	r2, [pc, #96]	; (800675c <prvAddNewTaskToReadyList+0xd4>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <prvAddNewTaskToReadyList+0xd8>)
 800670a:	441a      	add	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f7ff f90b 	bl	800592e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006718:	f001 fae4 	bl	8007ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800671c:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <prvAddNewTaskToReadyList+0xcc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <prvAddNewTaskToReadyList+0xc8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	429a      	cmp	r2, r3
 8006730:	d207      	bcs.n	8006742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <prvAddNewTaskToReadyList+0xdc>)
 8006734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20001078 	.word	0x20001078
 8006750:	20000ba4 	.word	0x20000ba4
 8006754:	20001084 	.word	0x20001084
 8006758:	20001094 	.word	0x20001094
 800675c:	20001080 	.word	0x20001080
 8006760:	20000ba8 	.word	0x20000ba8
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d017      	beq.n	80067aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800677a:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <vTaskDelay+0x60>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <vTaskDelay+0x30>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	60bb      	str	r3, [r7, #8]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006798:	f000 f88a 	bl	80068b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fdbe 	bl	8007320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067a4:	f000 f892 	bl	80068cc <xTaskResumeAll>
 80067a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <vTaskDelay+0x64>)
 80067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	200010a0 	.word	0x200010a0
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08a      	sub	sp, #40	; 0x28
 80067d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067de:	463a      	mov	r2, r7
 80067e0:	1d39      	adds	r1, r7, #4
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fe52 	bl	8005490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	9202      	str	r2, [sp, #8]
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2300      	movs	r3, #0
 80067fc:	460a      	mov	r2, r1
 80067fe:	4924      	ldr	r1, [pc, #144]	; (8006890 <vTaskStartScheduler+0xc0>)
 8006800:	4824      	ldr	r0, [pc, #144]	; (8006894 <vTaskStartScheduler+0xc4>)
 8006802:	f7ff fe01 	bl	8006408 <xTaskCreateStatic>
 8006806:	4603      	mov	r3, r0
 8006808:	4a23      	ldr	r2, [pc, #140]	; (8006898 <vTaskStartScheduler+0xc8>)
 800680a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800680c:	4b22      	ldr	r3, [pc, #136]	; (8006898 <vTaskStartScheduler+0xc8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e001      	b.n	800681e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d102      	bne.n	800682a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006824:	f000 fdd0 	bl	80073c8 <xTimerCreateTimerTask>
 8006828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d11b      	bne.n	8006868 <vTaskStartScheduler+0x98>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	613b      	str	r3, [r7, #16]
}
 8006842:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006844:	4b15      	ldr	r3, [pc, #84]	; (800689c <vTaskStartScheduler+0xcc>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3354      	adds	r3, #84	; 0x54
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <vTaskStartScheduler+0xd0>)
 800684c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <vTaskStartScheduler+0xd4>)
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <vTaskStartScheduler+0xd8>)
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800685c:	4b13      	ldr	r3, [pc, #76]	; (80068ac <vTaskStartScheduler+0xdc>)
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006862:	f001 f96d 	bl	8007b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006866:	e00e      	b.n	8006886 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d10a      	bne.n	8006886 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <vTaskStartScheduler+0xb4>
}
 8006886:	bf00      	nop
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	0800b5d4 	.word	0x0800b5d4
 8006894:	08007019 	.word	0x08007019
 8006898:	2000109c 	.word	0x2000109c
 800689c:	20000ba4 	.word	0x20000ba4
 80068a0:	200001d8 	.word	0x200001d8
 80068a4:	20001098 	.word	0x20001098
 80068a8:	20001084 	.word	0x20001084
 80068ac:	2000107c 	.word	0x2000107c

080068b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <vTaskSuspendAll+0x18>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	4a03      	ldr	r2, [pc, #12]	; (80068c8 <vTaskSuspendAll+0x18>)
 80068bc:	6013      	str	r3, [r2, #0]
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	200010a0 	.word	0x200010a0

080068cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068da:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <xTaskResumeAll+0x118>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	603b      	str	r3, [r7, #0]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068f8:	f001 f9c4 	bl	8007c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068fc:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <xTaskResumeAll+0x118>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	4a38      	ldr	r2, [pc, #224]	; (80069e4 <xTaskResumeAll+0x118>)
 8006904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006906:	4b37      	ldr	r3, [pc, #220]	; (80069e4 <xTaskResumeAll+0x118>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d162      	bne.n	80069d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800690e:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <xTaskResumeAll+0x11c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d05e      	beq.n	80069d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006916:	e02f      	b.n	8006978 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006918:	4b34      	ldr	r3, [pc, #208]	; (80069ec <xTaskResumeAll+0x120>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3318      	adds	r3, #24
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff f85f 	bl	80059e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3304      	adds	r3, #4
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff f85a 	bl	80059e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	4b2d      	ldr	r3, [pc, #180]	; (80069f0 <xTaskResumeAll+0x124>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d903      	bls.n	8006948 <xTaskResumeAll+0x7c>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <xTaskResumeAll+0x124>)
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <xTaskResumeAll+0x128>)
 8006956:	441a      	add	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3304      	adds	r3, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f7fe ffe5 	bl	800592e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4b23      	ldr	r3, [pc, #140]	; (80069f8 <xTaskResumeAll+0x12c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006972:	4b22      	ldr	r3, [pc, #136]	; (80069fc <xTaskResumeAll+0x130>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006978:	4b1c      	ldr	r3, [pc, #112]	; (80069ec <xTaskResumeAll+0x120>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1cb      	bne.n	8006918 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006986:	f000 fc01 	bl	800718c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800698a:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <xTaskResumeAll+0x134>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d010      	beq.n	80069b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006996:	f000 f847 	bl	8006a28 <xTaskIncrementTick>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069a0:	4b16      	ldr	r3, [pc, #88]	; (80069fc <xTaskResumeAll+0x130>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f1      	bne.n	8006996 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <xTaskResumeAll+0x134>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069b8:	4b10      	ldr	r3, [pc, #64]	; (80069fc <xTaskResumeAll+0x130>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069c0:	2301      	movs	r3, #1
 80069c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069c4:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <xTaskResumeAll+0x138>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069d4:	f001 f986 	bl	8007ce4 <vPortExitCritical>

	return xAlreadyYielded;
 80069d8:	68bb      	ldr	r3, [r7, #8]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200010a0 	.word	0x200010a0
 80069e8:	20001078 	.word	0x20001078
 80069ec:	20001038 	.word	0x20001038
 80069f0:	20001080 	.word	0x20001080
 80069f4:	20000ba8 	.word	0x20000ba8
 80069f8:	20000ba4 	.word	0x20000ba4
 80069fc:	2000108c 	.word	0x2000108c
 8006a00:	20001088 	.word	0x20001088
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <xTaskGetTickCount+0x1c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a14:	687b      	ldr	r3, [r7, #4]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	2000107c 	.word	0x2000107c

08006a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a32:	4b51      	ldr	r3, [pc, #324]	; (8006b78 <xTaskIncrementTick+0x150>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 808e 	bne.w	8006b58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a3c:	4b4f      	ldr	r3, [pc, #316]	; (8006b7c <xTaskIncrementTick+0x154>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a44:	4a4d      	ldr	r2, [pc, #308]	; (8006b7c <xTaskIncrementTick+0x154>)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d120      	bne.n	8006a92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	603b      	str	r3, [r7, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <xTaskIncrementTick+0x46>
 8006a70:	4b43      	ldr	r3, [pc, #268]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <xTaskIncrementTick+0x15c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a41      	ldr	r2, [pc, #260]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	4a41      	ldr	r2, [pc, #260]	; (8006b84 <xTaskIncrementTick+0x15c>)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	4b40      	ldr	r3, [pc, #256]	; (8006b88 <xTaskIncrementTick+0x160>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a3f      	ldr	r2, [pc, #252]	; (8006b88 <xTaskIncrementTick+0x160>)
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	f000 fb7d 	bl	800718c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a92:	4b3e      	ldr	r3, [pc, #248]	; (8006b8c <xTaskIncrementTick+0x164>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d34e      	bcc.n	8006b3a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a9c:	4b38      	ldr	r3, [pc, #224]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <xTaskIncrementTick+0x82>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <xTaskIncrementTick+0x84>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <xTaskIncrementTick+0x164>)
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	601a      	str	r2, [r3, #0]
					break;
 8006ab8:	e03f      	b.n	8006b3a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006aba:	4b31      	ldr	r3, [pc, #196]	; (8006b80 <xTaskIncrementTick+0x158>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d203      	bcs.n	8006ada <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ad2:	4a2e      	ldr	r2, [pc, #184]	; (8006b8c <xTaskIncrementTick+0x164>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6013      	str	r3, [r2, #0]
						break;
 8006ad8:	e02f      	b.n	8006b3a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3304      	adds	r3, #4
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe ff82 	bl	80059e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	3318      	adds	r3, #24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe ff79 	bl	80059e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <xTaskIncrementTick+0x168>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d903      	bls.n	8006b0a <xTaskIncrementTick+0xe2>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <xTaskIncrementTick+0x168>)
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <xTaskIncrementTick+0x16c>)
 8006b18:	441a      	add	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7fe ff04 	bl	800592e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2a:	4b1b      	ldr	r3, [pc, #108]	; (8006b98 <xTaskIncrementTick+0x170>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d3b3      	bcc.n	8006a9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b38:	e7b0      	b.n	8006a9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b3a:	4b17      	ldr	r3, [pc, #92]	; (8006b98 <xTaskIncrementTick+0x170>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4914      	ldr	r1, [pc, #80]	; (8006b94 <xTaskIncrementTick+0x16c>)
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d907      	bls.n	8006b62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b52:	2301      	movs	r3, #1
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e004      	b.n	8006b62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b58:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <xTaskIncrementTick+0x174>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	4a0f      	ldr	r2, [pc, #60]	; (8006b9c <xTaskIncrementTick+0x174>)
 8006b60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <xTaskIncrementTick+0x178>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b6e:	697b      	ldr	r3, [r7, #20]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200010a0 	.word	0x200010a0
 8006b7c:	2000107c 	.word	0x2000107c
 8006b80:	20001030 	.word	0x20001030
 8006b84:	20001034 	.word	0x20001034
 8006b88:	20001090 	.word	0x20001090
 8006b8c:	20001098 	.word	0x20001098
 8006b90:	20001080 	.word	0x20001080
 8006b94:	20000ba8 	.word	0x20000ba8
 8006b98:	20000ba4 	.word	0x20000ba4
 8006b9c:	20001088 	.word	0x20001088
 8006ba0:	2000108c 	.word	0x2000108c

08006ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006baa:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <vTaskSwitchContext+0xb0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <vTaskSwitchContext+0xb4>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bb8:	e046      	b.n	8006c48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006bba:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <vTaskSwitchContext+0xb4>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bc0:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <vTaskSwitchContext+0xb8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e010      	b.n	8006bea <vTaskSwitchContext+0x46>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <vTaskSwitchContext+0x3e>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	491d      	ldr	r1, [pc, #116]	; (8006c60 <vTaskSwitchContext+0xbc>)
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0e4      	beq.n	8006bc8 <vTaskSwitchContext+0x24>
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <vTaskSwitchContext+0xbc>)
 8006c0a:	4413      	add	r3, r2
 8006c0c:	60bb      	str	r3, [r7, #8]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d104      	bne.n	8006c2e <vTaskSwitchContext+0x8a>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4a0b      	ldr	r2, [pc, #44]	; (8006c64 <vTaskSwitchContext+0xc0>)
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	4a08      	ldr	r2, [pc, #32]	; (8006c5c <vTaskSwitchContext+0xb8>)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c3e:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <vTaskSwitchContext+0xc0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3354      	adds	r3, #84	; 0x54
 8006c44:	4a08      	ldr	r2, [pc, #32]	; (8006c68 <vTaskSwitchContext+0xc4>)
 8006c46:	6013      	str	r3, [r2, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	200010a0 	.word	0x200010a0
 8006c58:	2000108c 	.word	0x2000108c
 8006c5c:	20001080 	.word	0x20001080
 8006c60:	20000ba8 	.word	0x20000ba8
 8006c64:	20000ba4 	.word	0x20000ba4
 8006c68:	200001d8 	.word	0x200001d8

08006c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c92:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <vTaskPlaceOnEventList+0x44>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3318      	adds	r3, #24
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fe fe6b 	bl	8005976 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	6838      	ldr	r0, [r7, #0]
 8006ca4:	f000 fb3c 	bl	8007320 <prvAddCurrentTaskToDelayedList>
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000ba4 	.word	0x20000ba4

08006cb4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	617b      	str	r3, [r7, #20]
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006cdc:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	613b      	str	r3, [r7, #16]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d04:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d06:	4b08      	ldr	r3, [pc, #32]	; (8006d28 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7fe fe0d 	bl	800592e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d14:	2101      	movs	r1, #1
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb02 	bl	8007320 <prvAddCurrentTaskToDelayedList>
}
 8006d1c:	bf00      	nop
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200010a0 	.word	0x200010a0
 8006d28:	20000ba4 	.word	0x20000ba4

08006d2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	617b      	str	r3, [r7, #20]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3318      	adds	r3, #24
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7fe fde6 	bl	800592e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d68:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	68b8      	ldr	r0, [r7, #8]
 8006d72:	f000 fad5 	bl	8007320 <prvAddCurrentTaskToDelayedList>
	}
 8006d76:	bf00      	nop
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000ba4 	.word	0x20000ba4

08006d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	60fb      	str	r3, [r7, #12]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	3318      	adds	r3, #24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fe17 	bl	80059e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dba:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <xTaskRemoveFromEventList+0xb0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d11d      	bne.n	8006dfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fe0e 	bl	80059e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	4b19      	ldr	r3, [pc, #100]	; (8006e38 <xTaskRemoveFromEventList+0xb4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d903      	bls.n	8006de0 <xTaskRemoveFromEventList+0x5c>
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	4a16      	ldr	r2, [pc, #88]	; (8006e38 <xTaskRemoveFromEventList+0xb4>)
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <xTaskRemoveFromEventList+0xb8>)
 8006dee:	441a      	add	r2, r3
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f7fe fd99 	bl	800592e <vListInsertEnd>
 8006dfc:	e005      	b.n	8006e0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3318      	adds	r3, #24
 8006e02:	4619      	mov	r1, r3
 8006e04:	480e      	ldr	r0, [pc, #56]	; (8006e40 <xTaskRemoveFromEventList+0xbc>)
 8006e06:	f7fe fd92 	bl	800592e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <xTaskRemoveFromEventList+0xc0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d905      	bls.n	8006e24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <xTaskRemoveFromEventList+0xc4>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e001      	b.n	8006e28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e28:	697b      	ldr	r3, [r7, #20]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200010a0 	.word	0x200010a0
 8006e38:	20001080 	.word	0x20001080
 8006e3c:	20000ba8 	.word	0x20000ba8
 8006e40:	20001038 	.word	0x20001038
 8006e44:	20000ba4 	.word	0x20000ba4
 8006e48:	2000108c 	.word	0x2000108c

08006e4c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006e56:	4b29      	ldr	r3, [pc, #164]	; (8006efc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	613b      	str	r3, [r7, #16]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60fb      	str	r3, [r7, #12]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fe fda1 	bl	80059e8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fd9c 	bl	80059e8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d903      	bls.n	8006ec4 <vTaskRemoveFromUnorderedEventList+0x78>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a0f      	ldr	r2, [pc, #60]	; (8006f00 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	; (8006f04 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006ed2:	441a      	add	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fd27 	bl	800592e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d902      	bls.n	8006ef4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
	}
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	200010a0 	.word	0x200010a0
 8006f00:	20001080 	.word	0x20001080
 8006f04:	20000ba8 	.word	0x20000ba8
 8006f08:	20000ba4 	.word	0x20000ba4
 8006f0c:	2000108c 	.word	0x2000108c

08006f10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <vTaskInternalSetTimeOutState+0x24>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <vTaskInternalSetTimeOutState+0x28>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	605a      	str	r2, [r3, #4]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	20001090 	.word	0x20001090
 8006f38:	2000107c 	.word	0x2000107c

08006f3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	613b      	str	r3, [r7, #16]
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60fb      	str	r3, [r7, #12]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f7e:	f000 fe81 	bl	8007c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f82:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <xTaskCheckForTimeOut+0xbc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d102      	bne.n	8006fa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	e023      	b.n	8006fea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <xTaskCheckForTimeOut+0xc0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d007      	beq.n	8006fbe <xTaskCheckForTimeOut+0x82>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d302      	bcc.n	8006fbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e015      	b.n	8006fea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d20b      	bcs.n	8006fe0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff9b 	bl	8006f10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61fb      	str	r3, [r7, #28]
 8006fde:	e004      	b.n	8006fea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fea:	f000 fe7b 	bl	8007ce4 <vPortExitCritical>

	return xReturn;
 8006fee:	69fb      	ldr	r3, [r7, #28]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	2000107c 	.word	0x2000107c
 8006ffc:	20001090 	.word	0x20001090

08007000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <vTaskMissedYield+0x14>)
 8007006:	2201      	movs	r2, #1
 8007008:	601a      	str	r2, [r3, #0]
}
 800700a:	bf00      	nop
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	2000108c 	.word	0x2000108c

08007018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007020:	f000 f852 	bl	80070c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007024:	4b06      	ldr	r3, [pc, #24]	; (8007040 <prvIdleTask+0x28>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d9f9      	bls.n	8007020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <prvIdleTask+0x2c>)
 800702e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800703c:	e7f0      	b.n	8007020 <prvIdleTask+0x8>
 800703e:	bf00      	nop
 8007040:	20000ba8 	.word	0x20000ba8
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]
 8007052:	e00c      	b.n	800706e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4a12      	ldr	r2, [pc, #72]	; (80070a8 <prvInitialiseTaskLists+0x60>)
 8007060:	4413      	add	r3, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fc36 	bl	80058d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3301      	adds	r3, #1
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b37      	cmp	r3, #55	; 0x37
 8007072:	d9ef      	bls.n	8007054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007074:	480d      	ldr	r0, [pc, #52]	; (80070ac <prvInitialiseTaskLists+0x64>)
 8007076:	f7fe fc2d 	bl	80058d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800707a:	480d      	ldr	r0, [pc, #52]	; (80070b0 <prvInitialiseTaskLists+0x68>)
 800707c:	f7fe fc2a 	bl	80058d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007080:	480c      	ldr	r0, [pc, #48]	; (80070b4 <prvInitialiseTaskLists+0x6c>)
 8007082:	f7fe fc27 	bl	80058d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007086:	480c      	ldr	r0, [pc, #48]	; (80070b8 <prvInitialiseTaskLists+0x70>)
 8007088:	f7fe fc24 	bl	80058d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800708c:	480b      	ldr	r0, [pc, #44]	; (80070bc <prvInitialiseTaskLists+0x74>)
 800708e:	f7fe fc21 	bl	80058d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007092:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <prvInitialiseTaskLists+0x78>)
 8007094:	4a05      	ldr	r2, [pc, #20]	; (80070ac <prvInitialiseTaskLists+0x64>)
 8007096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <prvInitialiseTaskLists+0x7c>)
 800709a:	4a05      	ldr	r2, [pc, #20]	; (80070b0 <prvInitialiseTaskLists+0x68>)
 800709c:	601a      	str	r2, [r3, #0]
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000ba8 	.word	0x20000ba8
 80070ac:	20001008 	.word	0x20001008
 80070b0:	2000101c 	.word	0x2000101c
 80070b4:	20001038 	.word	0x20001038
 80070b8:	2000104c 	.word	0x2000104c
 80070bc:	20001064 	.word	0x20001064
 80070c0:	20001030 	.word	0x20001030
 80070c4:	20001034 	.word	0x20001034

080070c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ce:	e019      	b.n	8007104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070d0:	f000 fdd8 	bl	8007c84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80070d4:	4b10      	ldr	r3, [pc, #64]	; (8007118 <prvCheckTasksWaitingTermination+0x50>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fc81 	bl	80059e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <prvCheckTasksWaitingTermination+0x54>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	4a0b      	ldr	r2, [pc, #44]	; (800711c <prvCheckTasksWaitingTermination+0x54>)
 80070ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <prvCheckTasksWaitingTermination+0x58>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <prvCheckTasksWaitingTermination+0x58>)
 80070f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070fa:	f000 fdf3 	bl	8007ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f810 	bl	8007124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <prvCheckTasksWaitingTermination+0x58>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e1      	bne.n	80070d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	2000104c 	.word	0x2000104c
 800711c:	20001078 	.word	0x20001078
 8007120:	20001060 	.word	0x20001060

08007124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3354      	adds	r3, #84	; 0x54
 8007130:	4618      	mov	r0, r3
 8007132:	f002 f929 	bl	8009388 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800713c:	2b00      	cmp	r3, #0
 800713e:	d108      	bne.n	8007152 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	4618      	mov	r0, r3
 8007146:	f000 ff83 	bl	8008050 <vPortFree>
				vPortFree( pxTCB );
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 ff80 	bl	8008050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007150:	e018      	b.n	8007184 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007158:	2b01      	cmp	r3, #1
 800715a:	d103      	bne.n	8007164 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 ff77 	bl	8008050 <vPortFree>
	}
 8007162:	e00f      	b.n	8007184 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800716a:	2b02      	cmp	r3, #2
 800716c:	d00a      	beq.n	8007184 <prvDeleteTCB+0x60>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	60fb      	str	r3, [r7, #12]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <prvDeleteTCB+0x5e>
	}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <prvResetNextTaskUnblockTime+0x44>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <prvResetNextTaskUnblockTime+0x14>
 800719c:	2301      	movs	r3, #1
 800719e:	e000      	b.n	80071a2 <prvResetNextTaskUnblockTime+0x16>
 80071a0:	2300      	movs	r3, #0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <prvResetNextTaskUnblockTime+0x48>)
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071ae:	e008      	b.n	80071c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <prvResetNextTaskUnblockTime+0x44>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4a05      	ldr	r2, [pc, #20]	; (80071d4 <prvResetNextTaskUnblockTime+0x48>)
 80071c0:	6013      	str	r3, [r2, #0]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20001030 	.word	0x20001030
 80071d4:	20001098 	.word	0x20001098

080071d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071de:	4b0b      	ldr	r3, [pc, #44]	; (800720c <xTaskGetSchedulerState+0x34>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071e6:	2301      	movs	r3, #1
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	e008      	b.n	80071fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ec:	4b08      	ldr	r3, [pc, #32]	; (8007210 <xTaskGetSchedulerState+0x38>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071f4:	2302      	movs	r3, #2
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	e001      	b.n	80071fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071fe:	687b      	ldr	r3, [r7, #4]
	}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20001084 	.word	0x20001084
 8007210:	200010a0 	.word	0x200010a0

08007214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d056      	beq.n	80072d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800722a:	4b2e      	ldr	r3, [pc, #184]	; (80072e4 <xTaskPriorityDisinherit+0xd0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	d00a      	beq.n	800724a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	60bb      	str	r3, [r7, #8]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726c:	1e5a      	subs	r2, r3, #1
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727a:	429a      	cmp	r2, r3
 800727c:	d02c      	beq.n	80072d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007282:	2b00      	cmp	r3, #0
 8007284:	d128      	bne.n	80072d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3304      	adds	r3, #4
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fbac 	bl	80059e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <xTaskPriorityDisinherit+0xd4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d903      	bls.n	80072b8 <xTaskPriorityDisinherit+0xa4>
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <xTaskPriorityDisinherit+0xd4>)
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4a09      	ldr	r2, [pc, #36]	; (80072ec <xTaskPriorityDisinherit+0xd8>)
 80072c6:	441a      	add	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7fe fb2d 	bl	800592e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072d8:	697b      	ldr	r3, [r7, #20]
	}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000ba4 	.word	0x20000ba4
 80072e8:	20001080 	.word	0x20001080
 80072ec:	20000ba8 	.word	0x20000ba8

080072f0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80072f6:	4b09      	ldr	r3, [pc, #36]	; (800731c <uxTaskResetEventItemValue+0x2c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072fe:	4b07      	ldr	r3, [pc, #28]	; (800731c <uxTaskResetEventItemValue+0x2c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <uxTaskResetEventItemValue+0x2c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800730c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800730e:	687b      	ldr	r3, [r7, #4]
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20000ba4 	.word	0x20000ba4

08007320 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800732a:	4b21      	ldr	r3, [pc, #132]	; (80073b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007330:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3304      	adds	r3, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fb56 	bl	80059e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d10a      	bne.n	800735a <prvAddCurrentTaskToDelayedList+0x3a>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4819      	ldr	r0, [pc, #100]	; (80073b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007354:	f7fe faeb 	bl	800592e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007358:	e026      	b.n	80073a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	429a      	cmp	r2, r3
 8007370:	d209      	bcs.n	8007386 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fe faf9 	bl	8005976 <vListInsert>
}
 8007384:	e010      	b.n	80073a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007386:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3304      	adds	r3, #4
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f7fe faef 	bl	8005976 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d202      	bcs.n	80073a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6013      	str	r3, [r2, #0]
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	2000107c 	.word	0x2000107c
 80073b4:	20000ba4 	.word	0x20000ba4
 80073b8:	20001064 	.word	0x20001064
 80073bc:	20001034 	.word	0x20001034
 80073c0:	20001030 	.word	0x20001030
 80073c4:	20001098 	.word	0x20001098

080073c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073d2:	f000 facb 	bl	800796c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073d6:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <xTimerCreateTimerTask+0x80>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d021      	beq.n	8007422 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073e6:	1d3a      	adds	r2, r7, #4
 80073e8:	f107 0108 	add.w	r1, r7, #8
 80073ec:	f107 030c 	add.w	r3, r7, #12
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe f867 	bl	80054c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	9202      	str	r2, [sp, #8]
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	2302      	movs	r3, #2
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	460a      	mov	r2, r1
 8007408:	4910      	ldr	r1, [pc, #64]	; (800744c <xTimerCreateTimerTask+0x84>)
 800740a:	4811      	ldr	r0, [pc, #68]	; (8007450 <xTimerCreateTimerTask+0x88>)
 800740c:	f7fe fffc 	bl	8006408 <xTaskCreateStatic>
 8007410:	4603      	mov	r3, r0
 8007412:	4a10      	ldr	r2, [pc, #64]	; (8007454 <xTimerCreateTimerTask+0x8c>)
 8007414:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <xTimerCreateTimerTask+0x8c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	613b      	str	r3, [r7, #16]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800743e:	697b      	ldr	r3, [r7, #20]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200010d4 	.word	0x200010d4
 800744c:	0800b5dc 	.word	0x0800b5dc
 8007450:	08007575 	.word	0x08007575
 8007454:	200010d8 	.word	0x200010d8

08007458 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007466:	2300      	movs	r3, #0
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	623b      	str	r3, [r7, #32]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <xTimerGenericCommand+0x98>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d02a      	beq.n	80074e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b05      	cmp	r3, #5
 800749e:	dc18      	bgt.n	80074d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074a0:	f7ff fe9a 	bl	80071d8 <xTaskGetSchedulerState>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d109      	bne.n	80074be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <xTimerGenericCommand+0x98>)
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	f107 0110 	add.w	r1, r7, #16
 80074b2:	2300      	movs	r3, #0
 80074b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b6:	f7fe fbc3 	bl	8005c40 <xQueueGenericSend>
 80074ba:	6278      	str	r0, [r7, #36]	; 0x24
 80074bc:	e012      	b.n	80074e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <xTimerGenericCommand+0x98>)
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	f107 0110 	add.w	r1, r7, #16
 80074c6:	2300      	movs	r3, #0
 80074c8:	2200      	movs	r2, #0
 80074ca:	f7fe fbb9 	bl	8005c40 <xQueueGenericSend>
 80074ce:	6278      	str	r0, [r7, #36]	; 0x24
 80074d0:	e008      	b.n	80074e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <xTimerGenericCommand+0x98>)
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f107 0110 	add.w	r1, r7, #16
 80074da:	2300      	movs	r3, #0
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	f7fe fcad 	bl	8005e3c <xQueueGenericSendFromISR>
 80074e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3728      	adds	r7, #40	; 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200010d4 	.word	0x200010d4

080074f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074fe:	4b1c      	ldr	r3, [pc, #112]	; (8007570 <prvProcessExpiredTimer+0x7c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3304      	adds	r3, #4
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fa6b 	bl	80059e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d122      	bne.n	8007560 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	18d1      	adds	r1, r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	6978      	ldr	r0, [r7, #20]
 8007528:	f000 f8c8 	bl	80076bc <prvInsertTimerInActiveList>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d016      	beq.n	8007560 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	2300      	movs	r3, #0
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	2100      	movs	r1, #0
 800753c:	6978      	ldr	r0, [r7, #20]
 800753e:	f7ff ff8b 	bl	8007458 <xTimerGenericCommand>
 8007542:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60fb      	str	r3, [r7, #12]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	6978      	ldr	r0, [r7, #20]
 8007566:	4798      	blx	r3
}
 8007568:	bf00      	nop
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	200010cc 	.word	0x200010cc

08007574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	4618      	mov	r0, r3
 8007582:	f000 f857 	bl	8007634 <prvGetNextExpireTime>
 8007586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4619      	mov	r1, r3
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f803 	bl	8007598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007592:	f000 f8d5 	bl	8007740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007596:	e7f1      	b.n	800757c <prvTimerTask+0x8>

08007598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075a2:	f7ff f985 	bl	80068b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075a6:	f107 0308 	add.w	r3, r7, #8
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f866 	bl	800767c <prvSampleTimeNow>
 80075b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d130      	bne.n	800761a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <prvProcessTimerOrBlockTask+0x3c>
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d806      	bhi.n	80075d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075c6:	f7ff f981 	bl	80068cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ff91 	bl	80074f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075d2:	e024      	b.n	800761e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <prvProcessTimerOrBlockTask+0x90>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf0c      	ite	eq
 80075e4:	2301      	moveq	r3, #1
 80075e6:	2300      	movne	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <prvProcessTimerOrBlockTask+0x94>)
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4619      	mov	r1, r3
 80075fa:	f7fe fed1 	bl	80063a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075fe:	f7ff f965 	bl	80068cc <xTaskResumeAll>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007608:	4b09      	ldr	r3, [pc, #36]	; (8007630 <prvProcessTimerOrBlockTask+0x98>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
}
 8007618:	e001      	b.n	800761e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800761a:	f7ff f957 	bl	80068cc <xTaskResumeAll>
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	200010d0 	.word	0x200010d0
 800762c:	200010d4 	.word	0x200010d4
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <prvGetNextExpireTime+0x44>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <prvGetNextExpireTime+0x44>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e001      	b.n	800766a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800766a:	68fb      	ldr	r3, [r7, #12]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	200010cc 	.word	0x200010cc

0800767c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007684:	f7ff f9c0 	bl	8006a08 <xTaskGetTickCount>
 8007688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800768a:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <prvSampleTimeNow+0x3c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	429a      	cmp	r2, r3
 8007692:	d205      	bcs.n	80076a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007694:	f000 f908 	bl	80078a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e002      	b.n	80076a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076a6:	4a04      	ldr	r2, [pc, #16]	; (80076b8 <prvSampleTimeNow+0x3c>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076ac:	68fb      	ldr	r3, [r7, #12]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200010dc 	.word	0x200010dc

080076bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d812      	bhi.n	8007708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d302      	bcc.n	80076f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	e01b      	b.n	800772e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <prvInsertTimerInActiveList+0x7c>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4619      	mov	r1, r3
 8007700:	4610      	mov	r0, r2
 8007702:	f7fe f938 	bl	8005976 <vListInsert>
 8007706:	e012      	b.n	800772e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d206      	bcs.n	800771e <prvInsertTimerInActiveList+0x62>
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d302      	bcc.n	800771e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e007      	b.n	800772e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <prvInsertTimerInActiveList+0x80>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7fe f924 	bl	8005976 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800772e:	697b      	ldr	r3, [r7, #20]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	200010d0 	.word	0x200010d0
 800773c:	200010cc 	.word	0x200010cc

08007740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08e      	sub	sp, #56	; 0x38
 8007744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007746:	e09d      	b.n	8007884 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	da18      	bge.n	8007780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800774e:	1d3b      	adds	r3, r7, #4
 8007750:	3304      	adds	r3, #4
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	61fb      	str	r3, [r7, #28]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007776:	6850      	ldr	r0, [r2, #4]
 8007778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777a:	6892      	ldr	r2, [r2, #8]
 800777c:	4611      	mov	r1, r2
 800777e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	db7e      	blt.n	8007884 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	3304      	adds	r3, #4
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe f926 	bl	80059e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800779c:	463b      	mov	r3, r7
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff ff6c 	bl	800767c <prvSampleTimeNow>
 80077a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d86a      	bhi.n	8007882 <prvProcessReceivedCommands+0x142>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <prvProcessReceivedCommands+0x74>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077dd 	.word	0x080077dd
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077dd 	.word	0x080077dd
 80077c0:	08007885 	.word	0x08007885
 80077c4:	08007839 	.word	0x08007839
 80077c8:	08007871 	.word	0x08007871
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	080077dd 	.word	0x080077dd
 80077d4:	08007885 	.word	0x08007885
 80077d8:	08007839 	.word	0x08007839
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	18d1      	adds	r1, r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ea:	f7ff ff67 	bl	80076bc <prvInsertTimerInActiveList>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d047      	beq.n	8007884 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d13f      	bne.n	8007884 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	441a      	add	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	2300      	movs	r3, #0
 8007812:	2100      	movs	r1, #0
 8007814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007816:	f7ff fe1f 	bl	8007458 <xTimerGenericCommand>
 800781a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d130      	bne.n	8007884 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	61bb      	str	r3, [r7, #24]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	617b      	str	r3, [r7, #20]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	18d1      	adds	r1, r2, r3
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800786a:	f7ff ff27 	bl	80076bc <prvInsertTimerInActiveList>
					break;
 800786e:	e009      	b.n	8007884 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800787a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787c:	f000 fbe8 	bl	8008050 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007880:	e000      	b.n	8007884 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007882:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007884:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <prvProcessReceivedCommands+0x164>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	1d39      	adds	r1, r7, #4
 800788a:	2200      	movs	r2, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fb6d 	bl	8005f6c <xQueueReceive>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	f47f af57 	bne.w	8007748 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	3730      	adds	r7, #48	; 0x30
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	200010d4 	.word	0x200010d4

080078a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ae:	e045      	b.n	800793c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078b0:	4b2c      	ldr	r3, [pc, #176]	; (8007964 <prvSwitchTimerLists+0xbc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078ba:	4b2a      	ldr	r3, [pc, #168]	; (8007964 <prvSwitchTimerLists+0xbc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe f88d 	bl	80059e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d12e      	bne.n	800793c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4413      	add	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d90e      	bls.n	800790e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <prvSwitchTimerLists+0xbc>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fe f835 	bl	8005976 <vListInsert>
 800790c:	e016      	b.n	800793c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800790e:	2300      	movs	r3, #0
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fd9d 	bl	8007458 <xTimerGenericCommand>
 800791e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <prvSwitchTimerLists+0xbc>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1b4      	bne.n	80078b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <prvSwitchTimerLists+0xbc>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <prvSwitchTimerLists+0xc0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a04      	ldr	r2, [pc, #16]	; (8007964 <prvSwitchTimerLists+0xbc>)
 8007952:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007954:	4a04      	ldr	r2, [pc, #16]	; (8007968 <prvSwitchTimerLists+0xc0>)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6013      	str	r3, [r2, #0]
}
 800795a:	bf00      	nop
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	200010cc 	.word	0x200010cc
 8007968:	200010d0 	.word	0x200010d0

0800796c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007972:	f000 f987 	bl	8007c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007976:	4b15      	ldr	r3, [pc, #84]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d120      	bne.n	80079c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800797e:	4814      	ldr	r0, [pc, #80]	; (80079d0 <prvCheckForValidListAndQueue+0x64>)
 8007980:	f7fd ffa8 	bl	80058d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007984:	4813      	ldr	r0, [pc, #76]	; (80079d4 <prvCheckForValidListAndQueue+0x68>)
 8007986:	f7fd ffa5 	bl	80058d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <prvCheckForValidListAndQueue+0x6c>)
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <prvCheckForValidListAndQueue+0x64>)
 800798e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007990:	4b12      	ldr	r3, [pc, #72]	; (80079dc <prvCheckForValidListAndQueue+0x70>)
 8007992:	4a10      	ldr	r2, [pc, #64]	; (80079d4 <prvCheckForValidListAndQueue+0x68>)
 8007994:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <prvCheckForValidListAndQueue+0x74>)
 800799c:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <prvCheckForValidListAndQueue+0x78>)
 800799e:	2110      	movs	r1, #16
 80079a0:	200a      	movs	r0, #10
 80079a2:	f7fe f8b3 	bl	8005b0c <xQueueGenericCreateStatic>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a08      	ldr	r2, [pc, #32]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <prvCheckForValidListAndQueue+0x60>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	490b      	ldr	r1, [pc, #44]	; (80079e8 <prvCheckForValidListAndQueue+0x7c>)
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe fcc6 	bl	800634c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079c0:	f000 f990 	bl	8007ce4 <vPortExitCritical>
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200010d4 	.word	0x200010d4
 80079d0:	200010a4 	.word	0x200010a4
 80079d4:	200010b8 	.word	0x200010b8
 80079d8:	200010cc 	.word	0x200010cc
 80079dc:	200010d0 	.word	0x200010d0
 80079e0:	20001180 	.word	0x20001180
 80079e4:	200010e0 	.word	0x200010e0
 80079e8:	0800b5e4 	.word	0x0800b5e4

080079ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80079fa:	f06f 0301 	mvn.w	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <xTimerPendFunctionCallFromISR+0x3c>)
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	f107 0114 	add.w	r1, r7, #20
 8007a14:	2300      	movs	r3, #0
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	f7fe fa10 	bl	8005e3c <xQueueGenericSendFromISR>
 8007a1c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3728      	adds	r7, #40	; 0x28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	200010d4 	.word	0x200010d4

08007a2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3b04      	subs	r3, #4
 8007a3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3b04      	subs	r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f023 0201 	bic.w	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3b04      	subs	r3, #4
 8007a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a5c:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <pxPortInitialiseStack+0x64>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3b14      	subs	r3, #20
 8007a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3b04      	subs	r3, #4
 8007a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f06f 0202 	mvn.w	r2, #2
 8007a7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3b20      	subs	r3, #32
 8007a80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	08007a95 	.word	0x08007a95

08007a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a9e:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <prvTaskExitError+0x54>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d00a      	beq.n	8007abe <prvTaskExitError+0x2a>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <prvTaskExitError+0x28>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60bb      	str	r3, [r7, #8]
}
 8007ad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ad2:	bf00      	nop
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0fc      	beq.n	8007ad4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	20000010 	.word	0x20000010
 8007aec:	00000000 	.word	0x00000000

08007af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <pxCurrentTCBConst2>)
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	6808      	ldr	r0, [r1, #0]
 8007af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	f380 8809 	msr	PSP, r0
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8811 	msr	BASEPRI, r0
 8007b0a:	4770      	bx	lr
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst2>:
 8007b10:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b18:	4808      	ldr	r0, [pc, #32]	; (8007b3c <prvPortStartFirstTask+0x24>)
 8007b1a:	6800      	ldr	r0, [r0, #0]
 8007b1c:	6800      	ldr	r0, [r0, #0]
 8007b1e:	f380 8808 	msr	MSP, r0
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8814 	msr	CONTROL, r0
 8007b2a:	b662      	cpsie	i
 8007b2c:	b661      	cpsie	f
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	df00      	svc	0
 8007b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b3a:	bf00      	nop
 8007b3c:	e000ed08 	.word	0xe000ed08

08007b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b46:	4b46      	ldr	r3, [pc, #280]	; (8007c60 <xPortStartScheduler+0x120>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a46      	ldr	r2, [pc, #280]	; (8007c64 <xPortStartScheduler+0x124>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10a      	bne.n	8007b66 <xPortStartScheduler+0x26>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	613b      	str	r3, [r7, #16]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b66:	4b3e      	ldr	r3, [pc, #248]	; (8007c60 <xPortStartScheduler+0x120>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a3f      	ldr	r2, [pc, #252]	; (8007c68 <xPortStartScheduler+0x128>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10a      	bne.n	8007b86 <xPortStartScheduler+0x46>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b86:	4b39      	ldr	r3, [pc, #228]	; (8007c6c <xPortStartScheduler+0x12c>)
 8007b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	4b31      	ldr	r3, [pc, #196]	; (8007c70 <xPortStartScheduler+0x130>)
 8007bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bae:	4b31      	ldr	r3, [pc, #196]	; (8007c74 <xPortStartScheduler+0x134>)
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bb4:	e009      	b.n	8007bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007bb6:	4b2f      	ldr	r3, [pc, #188]	; (8007c74 <xPortStartScheduler+0x134>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	4a2d      	ldr	r2, [pc, #180]	; (8007c74 <xPortStartScheduler+0x134>)
 8007bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	2b80      	cmp	r3, #128	; 0x80
 8007bd4:	d0ef      	beq.n	8007bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bd6:	4b27      	ldr	r3, [pc, #156]	; (8007c74 <xPortStartScheduler+0x134>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1c3 0307 	rsb	r3, r3, #7
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d00a      	beq.n	8007bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60bb      	str	r3, [r7, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bf8:	4b1e      	ldr	r3, [pc, #120]	; (8007c74 <xPortStartScheduler+0x134>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	021b      	lsls	r3, r3, #8
 8007bfe:	4a1d      	ldr	r2, [pc, #116]	; (8007c74 <xPortStartScheduler+0x134>)
 8007c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c02:	4b1c      	ldr	r3, [pc, #112]	; (8007c74 <xPortStartScheduler+0x134>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c0a:	4a1a      	ldr	r2, [pc, #104]	; (8007c74 <xPortStartScheduler+0x134>)
 8007c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c16:	4b18      	ldr	r3, [pc, #96]	; (8007c78 <xPortStartScheduler+0x138>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a17      	ldr	r2, [pc, #92]	; (8007c78 <xPortStartScheduler+0x138>)
 8007c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <xPortStartScheduler+0x138>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a14      	ldr	r2, [pc, #80]	; (8007c78 <xPortStartScheduler+0x138>)
 8007c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c2e:	f000 f8dd 	bl	8007dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c32:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <xPortStartScheduler+0x13c>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c38:	f000 f8fc 	bl	8007e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c3c:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <xPortStartScheduler+0x140>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a0f      	ldr	r2, [pc, #60]	; (8007c80 <xPortStartScheduler+0x140>)
 8007c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c48:	f7ff ff66 	bl	8007b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c4c:	f7fe ffaa 	bl	8006ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8007c50:	f7ff ff20 	bl	8007a94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	e000ed00 	.word	0xe000ed00
 8007c64:	410fc271 	.word	0x410fc271
 8007c68:	410fc270 	.word	0x410fc270
 8007c6c:	e000e400 	.word	0xe000e400
 8007c70:	200011d0 	.word	0x200011d0
 8007c74:	200011d4 	.word	0x200011d4
 8007c78:	e000ed20 	.word	0xe000ed20
 8007c7c:	20000010 	.word	0x20000010
 8007c80:	e000ef34 	.word	0xe000ef34

08007c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	607b      	str	r3, [r7, #4]
}
 8007c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <vPortEnterCritical+0x58>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <vPortEnterCritical+0x58>)
 8007ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <vPortEnterCritical+0x58>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d10f      	bne.n	8007cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <vPortEnterCritical+0x5c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	603b      	str	r3, [r7, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	e7fe      	b.n	8007cce <vPortEnterCritical+0x4a>
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	20000010 	.word	0x20000010
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cea:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <vPortExitCritical+0x50>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <vPortExitCritical+0x24>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	607b      	str	r3, [r7, #4]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <vPortExitCritical+0x50>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <vPortExitCritical+0x50>)
 8007d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d12:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <vPortExitCritical+0x50>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <vPortExitCritical+0x42>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	f383 8811 	msr	BASEPRI, r3
}
 8007d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000010 	.word	0x20000010
	...

08007d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d40:	f3ef 8009 	mrs	r0, PSP
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <pxCurrentTCBConst>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	f01e 0f10 	tst.w	lr, #16
 8007d50:	bf08      	it	eq
 8007d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	6010      	str	r0, [r2, #0]
 8007d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d64:	f380 8811 	msr	BASEPRI, r0
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f7fe ff18 	bl	8006ba4 <vTaskSwitchContext>
 8007d74:	f04f 0000 	mov.w	r0, #0
 8007d78:	f380 8811 	msr	BASEPRI, r0
 8007d7c:	bc09      	pop	{r0, r3}
 8007d7e:	6819      	ldr	r1, [r3, #0]
 8007d80:	6808      	ldr	r0, [r1, #0]
 8007d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d86:	f01e 0f10 	tst.w	lr, #16
 8007d8a:	bf08      	it	eq
 8007d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d90:	f380 8809 	msr	PSP, r0
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	f3af 8000 	nop.w

08007da0 <pxCurrentTCBConst>:
 8007da0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop

08007da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	607b      	str	r3, [r7, #4]
}
 8007dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007dc2:	f7fe fe31 	bl	8006a28 <xTaskIncrementTick>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dcc:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <xPortSysTickHandler+0x40>)
 8007dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f383 8811 	msr	BASEPRI, r3
}
 8007dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <vPortSetupTimerInterrupt+0x34>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007df6:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <vPortSetupTimerInterrupt+0x38>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <vPortSetupTimerInterrupt+0x3c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <vPortSetupTimerInterrupt+0x40>)
 8007e02:	fba2 2303 	umull	r2, r3, r2, r3
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <vPortSetupTimerInterrupt+0x44>)
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e0e:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <vPortSetupTimerInterrupt+0x34>)
 8007e10:	2207      	movs	r2, #7
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	e000e010 	.word	0xe000e010
 8007e24:	e000e018 	.word	0xe000e018
 8007e28:	20000004 	.word	0x20000004
 8007e2c:	10624dd3 	.word	0x10624dd3
 8007e30:	e000e014 	.word	0xe000e014

08007e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e44 <vPortEnableVFP+0x10>
 8007e38:	6801      	ldr	r1, [r0, #0]
 8007e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e3e:	6001      	str	r1, [r0, #0]
 8007e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e42:	bf00      	nop
 8007e44:	e000ed88 	.word	0xe000ed88

08007e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e4e:	f3ef 8305 	mrs	r3, IPSR
 8007e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b0f      	cmp	r3, #15
 8007e58:	d914      	bls.n	8007e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <vPortValidateInterruptPriority+0x70>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e64:	4b15      	ldr	r3, [pc, #84]	; (8007ebc <vPortValidateInterruptPriority+0x74>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	7afa      	ldrb	r2, [r7, #11]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d20a      	bcs.n	8007e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	607b      	str	r3, [r7, #4]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e84:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <vPortValidateInterruptPriority+0x78>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <vPortValidateInterruptPriority+0x7c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d90a      	bls.n	8007eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	603b      	str	r3, [r7, #0]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <vPortValidateInterruptPriority+0x60>
	}
 8007eaa:	bf00      	nop
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	e000e3f0 	.word	0xe000e3f0
 8007ebc:	200011d0 	.word	0x200011d0
 8007ec0:	e000ed0c 	.word	0xe000ed0c
 8007ec4:	200011d4 	.word	0x200011d4

08007ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	; 0x28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ed4:	f7fe fcec 	bl	80068b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ed8:	4b58      	ldr	r3, [pc, #352]	; (800803c <pvPortMalloc+0x174>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ee0:	f000 f910 	bl	8008104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ee4:	4b56      	ldr	r3, [pc, #344]	; (8008040 <pvPortMalloc+0x178>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 808e 	bne.w	800800e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01d      	beq.n	8007f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ef8:	2208      	movs	r2, #8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4413      	add	r3, r2
 8007efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d014      	beq.n	8007f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f023 0307 	bic.w	r3, r3, #7
 8007f10:	3308      	adds	r3, #8
 8007f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <pvPortMalloc+0x6c>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	617b      	str	r3, [r7, #20]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d069      	beq.n	800800e <pvPortMalloc+0x146>
 8007f3a:	4b42      	ldr	r3, [pc, #264]	; (8008044 <pvPortMalloc+0x17c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d864      	bhi.n	800800e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f44:	4b40      	ldr	r3, [pc, #256]	; (8008048 <pvPortMalloc+0x180>)
 8007f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f48:	4b3f      	ldr	r3, [pc, #252]	; (8008048 <pvPortMalloc+0x180>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f4e:	e004      	b.n	8007f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d903      	bls.n	8007f6c <pvPortMalloc+0xa4>
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1f1      	bne.n	8007f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f6c:	4b33      	ldr	r3, [pc, #204]	; (800803c <pvPortMalloc+0x174>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d04b      	beq.n	800800e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	4413      	add	r3, r2
 8007f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	2308      	movs	r3, #8
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d91f      	bls.n	8007fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	613b      	str	r3, [r7, #16]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fd2:	69b8      	ldr	r0, [r7, #24]
 8007fd4:	f000 f8f8 	bl	80081c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <pvPortMalloc+0x17c>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	4a18      	ldr	r2, [pc, #96]	; (8008044 <pvPortMalloc+0x17c>)
 8007fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fe6:	4b17      	ldr	r3, [pc, #92]	; (8008044 <pvPortMalloc+0x17c>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4b18      	ldr	r3, [pc, #96]	; (800804c <pvPortMalloc+0x184>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d203      	bcs.n	8007ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ff2:	4b14      	ldr	r3, [pc, #80]	; (8008044 <pvPortMalloc+0x17c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a15      	ldr	r2, [pc, #84]	; (800804c <pvPortMalloc+0x184>)
 8007ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	4b10      	ldr	r3, [pc, #64]	; (8008040 <pvPortMalloc+0x178>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	431a      	orrs	r2, r3
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800800e:	f7fe fc5d 	bl	80068cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <pvPortMalloc+0x16a>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60fb      	str	r3, [r7, #12]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <pvPortMalloc+0x168>
	return pvReturn;
 8008032:	69fb      	ldr	r3, [r7, #28]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3728      	adds	r7, #40	; 0x28
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20001de0 	.word	0x20001de0
 8008040:	20001dec 	.word	0x20001dec
 8008044:	20001de4 	.word	0x20001de4
 8008048:	20001dd8 	.word	0x20001dd8
 800804c:	20001de8 	.word	0x20001de8

08008050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d048      	beq.n	80080f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008062:	2308      	movs	r3, #8
 8008064:	425b      	negs	r3, r3
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4413      	add	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	4b21      	ldr	r3, [pc, #132]	; (80080fc <vPortFree+0xac>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4013      	ands	r3, r2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <vPortFree+0x44>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60fb      	str	r3, [r7, #12]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <vPortFree+0x62>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	60bb      	str	r3, [r7, #8]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	4b11      	ldr	r3, [pc, #68]	; (80080fc <vPortFree+0xac>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d019      	beq.n	80080f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d115      	bne.n	80080f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <vPortFree+0xac>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	43db      	mvns	r3, r3
 80080d2:	401a      	ands	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080d8:	f7fe fbea 	bl	80068b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	4b07      	ldr	r3, [pc, #28]	; (8008100 <vPortFree+0xb0>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	4a06      	ldr	r2, [pc, #24]	; (8008100 <vPortFree+0xb0>)
 80080e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080ea:	6938      	ldr	r0, [r7, #16]
 80080ec:	f000 f86c 	bl	80081c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080f0:	f7fe fbec 	bl	80068cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080f4:	bf00      	nop
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20001dec 	.word	0x20001dec
 8008100:	20001de4 	.word	0x20001de4

08008104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800810a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800810e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008110:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <prvHeapInit+0xac>)
 8008112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00c      	beq.n	8008138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3307      	adds	r3, #7
 8008122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0307 	bic.w	r3, r3, #7
 800812a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	4a1f      	ldr	r2, [pc, #124]	; (80081b0 <prvHeapInit+0xac>)
 8008134:	4413      	add	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <prvHeapInit+0xb0>)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <prvHeapInit+0xb0>)
 8008144:	2200      	movs	r2, #0
 8008146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	4413      	add	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008150:	2208      	movs	r2, #8
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	1a9b      	subs	r3, r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0307 	bic.w	r3, r3, #7
 800815e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <prvHeapInit+0xb4>)
 8008164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008166:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <prvHeapInit+0xb4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <prvHeapInit+0xb4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <prvHeapInit+0xb4>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <prvHeapInit+0xb8>)
 8008192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <prvHeapInit+0xbc>)
 800819a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <prvHeapInit+0xc0>)
 800819e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	200011d8 	.word	0x200011d8
 80081b4:	20001dd8 	.word	0x20001dd8
 80081b8:	20001de0 	.word	0x20001de0
 80081bc:	20001de8 	.word	0x20001de8
 80081c0:	20001de4 	.word	0x20001de4
 80081c4:	20001dec 	.word	0x20001dec

080081c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081d0:	4b28      	ldr	r3, [pc, #160]	; (8008274 <prvInsertBlockIntoFreeList+0xac>)
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e002      	b.n	80081dc <prvInsertBlockIntoFreeList+0x14>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d8f7      	bhi.n	80081d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d108      	bne.n	800820a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	441a      	add	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	441a      	add	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d118      	bne.n	8008250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <prvInsertBlockIntoFreeList+0xb0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d00d      	beq.n	8008246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	441a      	add	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e008      	b.n	8008258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008246:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <prvInsertBlockIntoFreeList+0xb0>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	e003      	b.n	8008258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	d002      	beq.n	8008266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	20001dd8 	.word	0x20001dd8
 8008278:	20001de0 	.word	0x20001de0

0800827c <atof>:
 800827c:	2100      	movs	r1, #0
 800827e:	f000 be13 	b.w	8008ea8 <strtod>

08008282 <atoi>:
 8008282:	220a      	movs	r2, #10
 8008284:	2100      	movs	r1, #0
 8008286:	f000 be9d 	b.w	8008fc4 <strtol>

0800828a <sulp>:
 800828a:	b570      	push	{r4, r5, r6, lr}
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	ec45 4b10 	vmov	d0, r4, r5
 8008294:	4616      	mov	r6, r2
 8008296:	f002 f93b 	bl	800a510 <__ulp>
 800829a:	ec51 0b10 	vmov	r0, r1, d0
 800829e:	b17e      	cbz	r6, 80082c0 <sulp+0x36>
 80082a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dd09      	ble.n	80082c0 <sulp+0x36>
 80082ac:	051b      	lsls	r3, r3, #20
 80082ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80082b2:	2400      	movs	r4, #0
 80082b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80082b8:	4622      	mov	r2, r4
 80082ba:	462b      	mov	r3, r5
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	bd70      	pop	{r4, r5, r6, pc}
 80082c2:	0000      	movs	r0, r0
 80082c4:	0000      	movs	r0, r0
	...

080082c8 <_strtod_l>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ed2d 8b02 	vpush	{d8}
 80082d0:	b09b      	sub	sp, #108	; 0x6c
 80082d2:	4604      	mov	r4, r0
 80082d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80082d6:	2200      	movs	r2, #0
 80082d8:	9216      	str	r2, [sp, #88]	; 0x58
 80082da:	460d      	mov	r5, r1
 80082dc:	f04f 0800 	mov.w	r8, #0
 80082e0:	f04f 0900 	mov.w	r9, #0
 80082e4:	460a      	mov	r2, r1
 80082e6:	9215      	str	r2, [sp, #84]	; 0x54
 80082e8:	7811      	ldrb	r1, [r2, #0]
 80082ea:	292b      	cmp	r1, #43	; 0x2b
 80082ec:	d04c      	beq.n	8008388 <_strtod_l+0xc0>
 80082ee:	d83a      	bhi.n	8008366 <_strtod_l+0x9e>
 80082f0:	290d      	cmp	r1, #13
 80082f2:	d834      	bhi.n	800835e <_strtod_l+0x96>
 80082f4:	2908      	cmp	r1, #8
 80082f6:	d834      	bhi.n	8008362 <_strtod_l+0x9a>
 80082f8:	2900      	cmp	r1, #0
 80082fa:	d03d      	beq.n	8008378 <_strtod_l+0xb0>
 80082fc:	2200      	movs	r2, #0
 80082fe:	920a      	str	r2, [sp, #40]	; 0x28
 8008300:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008302:	7832      	ldrb	r2, [r6, #0]
 8008304:	2a30      	cmp	r2, #48	; 0x30
 8008306:	f040 80b4 	bne.w	8008472 <_strtod_l+0x1aa>
 800830a:	7872      	ldrb	r2, [r6, #1]
 800830c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008310:	2a58      	cmp	r2, #88	; 0x58
 8008312:	d170      	bne.n	80083f6 <_strtod_l+0x12e>
 8008314:	9302      	str	r3, [sp, #8]
 8008316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	ab16      	add	r3, sp, #88	; 0x58
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	4a8e      	ldr	r2, [pc, #568]	; (8008558 <_strtod_l+0x290>)
 8008320:	ab17      	add	r3, sp, #92	; 0x5c
 8008322:	a915      	add	r1, sp, #84	; 0x54
 8008324:	4620      	mov	r0, r4
 8008326:	f001 f9d1 	bl	80096cc <__gethex>
 800832a:	f010 070f 	ands.w	r7, r0, #15
 800832e:	4605      	mov	r5, r0
 8008330:	d005      	beq.n	800833e <_strtod_l+0x76>
 8008332:	2f06      	cmp	r7, #6
 8008334:	d12a      	bne.n	800838c <_strtod_l+0xc4>
 8008336:	3601      	adds	r6, #1
 8008338:	2300      	movs	r3, #0
 800833a:	9615      	str	r6, [sp, #84]	; 0x54
 800833c:	930a      	str	r3, [sp, #40]	; 0x28
 800833e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008340:	2b00      	cmp	r3, #0
 8008342:	f040 857f 	bne.w	8008e44 <_strtod_l+0xb7c>
 8008346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008348:	b1db      	cbz	r3, 8008382 <_strtod_l+0xba>
 800834a:	4642      	mov	r2, r8
 800834c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008350:	ec43 2b10 	vmov	d0, r2, r3
 8008354:	b01b      	add	sp, #108	; 0x6c
 8008356:	ecbd 8b02 	vpop	{d8}
 800835a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800835e:	2920      	cmp	r1, #32
 8008360:	d1cc      	bne.n	80082fc <_strtod_l+0x34>
 8008362:	3201      	adds	r2, #1
 8008364:	e7bf      	b.n	80082e6 <_strtod_l+0x1e>
 8008366:	292d      	cmp	r1, #45	; 0x2d
 8008368:	d1c8      	bne.n	80082fc <_strtod_l+0x34>
 800836a:	2101      	movs	r1, #1
 800836c:	910a      	str	r1, [sp, #40]	; 0x28
 800836e:	1c51      	adds	r1, r2, #1
 8008370:	9115      	str	r1, [sp, #84]	; 0x54
 8008372:	7852      	ldrb	r2, [r2, #1]
 8008374:	2a00      	cmp	r2, #0
 8008376:	d1c3      	bne.n	8008300 <_strtod_l+0x38>
 8008378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800837a:	9515      	str	r5, [sp, #84]	; 0x54
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 855f 	bne.w	8008e40 <_strtod_l+0xb78>
 8008382:	4642      	mov	r2, r8
 8008384:	464b      	mov	r3, r9
 8008386:	e7e3      	b.n	8008350 <_strtod_l+0x88>
 8008388:	2100      	movs	r1, #0
 800838a:	e7ef      	b.n	800836c <_strtod_l+0xa4>
 800838c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800838e:	b13a      	cbz	r2, 80083a0 <_strtod_l+0xd8>
 8008390:	2135      	movs	r1, #53	; 0x35
 8008392:	a818      	add	r0, sp, #96	; 0x60
 8008394:	f002 f9b9 	bl	800a70a <__copybits>
 8008398:	9916      	ldr	r1, [sp, #88]	; 0x58
 800839a:	4620      	mov	r0, r4
 800839c:	f001 fd8c 	bl	8009eb8 <_Bfree>
 80083a0:	3f01      	subs	r7, #1
 80083a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083a4:	2f04      	cmp	r7, #4
 80083a6:	d806      	bhi.n	80083b6 <_strtod_l+0xee>
 80083a8:	e8df f007 	tbb	[pc, r7]
 80083ac:	201d0314 	.word	0x201d0314
 80083b0:	14          	.byte	0x14
 80083b1:	00          	.byte	0x00
 80083b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80083b6:	05e9      	lsls	r1, r5, #23
 80083b8:	bf48      	it	mi
 80083ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80083be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083c2:	0d1b      	lsrs	r3, r3, #20
 80083c4:	051b      	lsls	r3, r3, #20
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1b9      	bne.n	800833e <_strtod_l+0x76>
 80083ca:	f001 f869 	bl	80094a0 <__errno>
 80083ce:	2322      	movs	r3, #34	; 0x22
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	e7b4      	b.n	800833e <_strtod_l+0x76>
 80083d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80083d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80083e4:	e7e7      	b.n	80083b6 <_strtod_l+0xee>
 80083e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008560 <_strtod_l+0x298>
 80083ea:	e7e4      	b.n	80083b6 <_strtod_l+0xee>
 80083ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80083f0:	f04f 38ff 	mov.w	r8, #4294967295
 80083f4:	e7df      	b.n	80083b6 <_strtod_l+0xee>
 80083f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	9215      	str	r2, [sp, #84]	; 0x54
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b30      	cmp	r3, #48	; 0x30
 8008400:	d0f9      	beq.n	80083f6 <_strtod_l+0x12e>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d09b      	beq.n	800833e <_strtod_l+0x76>
 8008406:	2301      	movs	r3, #1
 8008408:	f04f 0a00 	mov.w	sl, #0
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008410:	930b      	str	r3, [sp, #44]	; 0x2c
 8008412:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008416:	46d3      	mov	fp, sl
 8008418:	220a      	movs	r2, #10
 800841a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800841c:	7806      	ldrb	r6, [r0, #0]
 800841e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008422:	b2d9      	uxtb	r1, r3
 8008424:	2909      	cmp	r1, #9
 8008426:	d926      	bls.n	8008476 <_strtod_l+0x1ae>
 8008428:	494c      	ldr	r1, [pc, #304]	; (800855c <_strtod_l+0x294>)
 800842a:	2201      	movs	r2, #1
 800842c:	f000 ff1a 	bl	8009264 <strncmp>
 8008430:	2800      	cmp	r0, #0
 8008432:	d030      	beq.n	8008496 <_strtod_l+0x1ce>
 8008434:	2000      	movs	r0, #0
 8008436:	4632      	mov	r2, r6
 8008438:	9005      	str	r0, [sp, #20]
 800843a:	465e      	mov	r6, fp
 800843c:	4603      	mov	r3, r0
 800843e:	2a65      	cmp	r2, #101	; 0x65
 8008440:	d001      	beq.n	8008446 <_strtod_l+0x17e>
 8008442:	2a45      	cmp	r2, #69	; 0x45
 8008444:	d113      	bne.n	800846e <_strtod_l+0x1a6>
 8008446:	b91e      	cbnz	r6, 8008450 <_strtod_l+0x188>
 8008448:	9a04      	ldr	r2, [sp, #16]
 800844a:	4302      	orrs	r2, r0
 800844c:	d094      	beq.n	8008378 <_strtod_l+0xb0>
 800844e:	2600      	movs	r6, #0
 8008450:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008452:	1c6a      	adds	r2, r5, #1
 8008454:	9215      	str	r2, [sp, #84]	; 0x54
 8008456:	786a      	ldrb	r2, [r5, #1]
 8008458:	2a2b      	cmp	r2, #43	; 0x2b
 800845a:	d074      	beq.n	8008546 <_strtod_l+0x27e>
 800845c:	2a2d      	cmp	r2, #45	; 0x2d
 800845e:	d078      	beq.n	8008552 <_strtod_l+0x28a>
 8008460:	f04f 0c00 	mov.w	ip, #0
 8008464:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008468:	2909      	cmp	r1, #9
 800846a:	d97f      	bls.n	800856c <_strtod_l+0x2a4>
 800846c:	9515      	str	r5, [sp, #84]	; 0x54
 800846e:	2700      	movs	r7, #0
 8008470:	e09e      	b.n	80085b0 <_strtod_l+0x2e8>
 8008472:	2300      	movs	r3, #0
 8008474:	e7c8      	b.n	8008408 <_strtod_l+0x140>
 8008476:	f1bb 0f08 	cmp.w	fp, #8
 800847a:	bfd8      	it	le
 800847c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800847e:	f100 0001 	add.w	r0, r0, #1
 8008482:	bfda      	itte	le
 8008484:	fb02 3301 	mlale	r3, r2, r1, r3
 8008488:	9309      	strle	r3, [sp, #36]	; 0x24
 800848a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800848e:	f10b 0b01 	add.w	fp, fp, #1
 8008492:	9015      	str	r0, [sp, #84]	; 0x54
 8008494:	e7c1      	b.n	800841a <_strtod_l+0x152>
 8008496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	9215      	str	r2, [sp, #84]	; 0x54
 800849c:	785a      	ldrb	r2, [r3, #1]
 800849e:	f1bb 0f00 	cmp.w	fp, #0
 80084a2:	d037      	beq.n	8008514 <_strtod_l+0x24c>
 80084a4:	9005      	str	r0, [sp, #20]
 80084a6:	465e      	mov	r6, fp
 80084a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	d912      	bls.n	80084d6 <_strtod_l+0x20e>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7c4      	b.n	800843e <_strtod_l+0x176>
 80084b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	9215      	str	r2, [sp, #84]	; 0x54
 80084ba:	785a      	ldrb	r2, [r3, #1]
 80084bc:	3001      	adds	r0, #1
 80084be:	2a30      	cmp	r2, #48	; 0x30
 80084c0:	d0f8      	beq.n	80084b4 <_strtod_l+0x1ec>
 80084c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	f200 84c1 	bhi.w	8008e4e <_strtod_l+0xb86>
 80084cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ce:	9005      	str	r0, [sp, #20]
 80084d0:	2000      	movs	r0, #0
 80084d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084d4:	4606      	mov	r6, r0
 80084d6:	3a30      	subs	r2, #48	; 0x30
 80084d8:	f100 0301 	add.w	r3, r0, #1
 80084dc:	d014      	beq.n	8008508 <_strtod_l+0x240>
 80084de:	9905      	ldr	r1, [sp, #20]
 80084e0:	4419      	add	r1, r3
 80084e2:	9105      	str	r1, [sp, #20]
 80084e4:	4633      	mov	r3, r6
 80084e6:	eb00 0c06 	add.w	ip, r0, r6
 80084ea:	210a      	movs	r1, #10
 80084ec:	4563      	cmp	r3, ip
 80084ee:	d113      	bne.n	8008518 <_strtod_l+0x250>
 80084f0:	1833      	adds	r3, r6, r0
 80084f2:	2b08      	cmp	r3, #8
 80084f4:	f106 0601 	add.w	r6, r6, #1
 80084f8:	4406      	add	r6, r0
 80084fa:	dc1a      	bgt.n	8008532 <_strtod_l+0x26a>
 80084fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084fe:	230a      	movs	r3, #10
 8008500:	fb03 2301 	mla	r3, r3, r1, r2
 8008504:	9309      	str	r3, [sp, #36]	; 0x24
 8008506:	2300      	movs	r3, #0
 8008508:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800850a:	1c51      	adds	r1, r2, #1
 800850c:	9115      	str	r1, [sp, #84]	; 0x54
 800850e:	7852      	ldrb	r2, [r2, #1]
 8008510:	4618      	mov	r0, r3
 8008512:	e7c9      	b.n	80084a8 <_strtod_l+0x1e0>
 8008514:	4658      	mov	r0, fp
 8008516:	e7d2      	b.n	80084be <_strtod_l+0x1f6>
 8008518:	2b08      	cmp	r3, #8
 800851a:	f103 0301 	add.w	r3, r3, #1
 800851e:	dc03      	bgt.n	8008528 <_strtod_l+0x260>
 8008520:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008522:	434f      	muls	r7, r1
 8008524:	9709      	str	r7, [sp, #36]	; 0x24
 8008526:	e7e1      	b.n	80084ec <_strtod_l+0x224>
 8008528:	2b10      	cmp	r3, #16
 800852a:	bfd8      	it	le
 800852c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008530:	e7dc      	b.n	80084ec <_strtod_l+0x224>
 8008532:	2e10      	cmp	r6, #16
 8008534:	bfdc      	itt	le
 8008536:	230a      	movle	r3, #10
 8008538:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800853c:	e7e3      	b.n	8008506 <_strtod_l+0x23e>
 800853e:	2300      	movs	r3, #0
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	2301      	movs	r3, #1
 8008544:	e780      	b.n	8008448 <_strtod_l+0x180>
 8008546:	f04f 0c00 	mov.w	ip, #0
 800854a:	1caa      	adds	r2, r5, #2
 800854c:	9215      	str	r2, [sp, #84]	; 0x54
 800854e:	78aa      	ldrb	r2, [r5, #2]
 8008550:	e788      	b.n	8008464 <_strtod_l+0x19c>
 8008552:	f04f 0c01 	mov.w	ip, #1
 8008556:	e7f8      	b.n	800854a <_strtod_l+0x282>
 8008558:	0800b68c 	.word	0x0800b68c
 800855c:	0800b67c 	.word	0x0800b67c
 8008560:	7ff00000 	.word	0x7ff00000
 8008564:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008566:	1c51      	adds	r1, r2, #1
 8008568:	9115      	str	r1, [sp, #84]	; 0x54
 800856a:	7852      	ldrb	r2, [r2, #1]
 800856c:	2a30      	cmp	r2, #48	; 0x30
 800856e:	d0f9      	beq.n	8008564 <_strtod_l+0x29c>
 8008570:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008574:	2908      	cmp	r1, #8
 8008576:	f63f af7a 	bhi.w	800846e <_strtod_l+0x1a6>
 800857a:	3a30      	subs	r2, #48	; 0x30
 800857c:	9208      	str	r2, [sp, #32]
 800857e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008580:	920c      	str	r2, [sp, #48]	; 0x30
 8008582:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008584:	1c57      	adds	r7, r2, #1
 8008586:	9715      	str	r7, [sp, #84]	; 0x54
 8008588:	7852      	ldrb	r2, [r2, #1]
 800858a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800858e:	f1be 0f09 	cmp.w	lr, #9
 8008592:	d938      	bls.n	8008606 <_strtod_l+0x33e>
 8008594:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008596:	1a7f      	subs	r7, r7, r1
 8008598:	2f08      	cmp	r7, #8
 800859a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800859e:	dc03      	bgt.n	80085a8 <_strtod_l+0x2e0>
 80085a0:	9908      	ldr	r1, [sp, #32]
 80085a2:	428f      	cmp	r7, r1
 80085a4:	bfa8      	it	ge
 80085a6:	460f      	movge	r7, r1
 80085a8:	f1bc 0f00 	cmp.w	ip, #0
 80085ac:	d000      	beq.n	80085b0 <_strtod_l+0x2e8>
 80085ae:	427f      	negs	r7, r7
 80085b0:	2e00      	cmp	r6, #0
 80085b2:	d14f      	bne.n	8008654 <_strtod_l+0x38c>
 80085b4:	9904      	ldr	r1, [sp, #16]
 80085b6:	4301      	orrs	r1, r0
 80085b8:	f47f aec1 	bne.w	800833e <_strtod_l+0x76>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f47f aedb 	bne.w	8008378 <_strtod_l+0xb0>
 80085c2:	2a69      	cmp	r2, #105	; 0x69
 80085c4:	d029      	beq.n	800861a <_strtod_l+0x352>
 80085c6:	dc26      	bgt.n	8008616 <_strtod_l+0x34e>
 80085c8:	2a49      	cmp	r2, #73	; 0x49
 80085ca:	d026      	beq.n	800861a <_strtod_l+0x352>
 80085cc:	2a4e      	cmp	r2, #78	; 0x4e
 80085ce:	f47f aed3 	bne.w	8008378 <_strtod_l+0xb0>
 80085d2:	499b      	ldr	r1, [pc, #620]	; (8008840 <_strtod_l+0x578>)
 80085d4:	a815      	add	r0, sp, #84	; 0x54
 80085d6:	f001 fab9 	bl	8009b4c <__match>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f43f aecc 	beq.w	8008378 <_strtod_l+0xb0>
 80085e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b28      	cmp	r3, #40	; 0x28
 80085e6:	d12f      	bne.n	8008648 <_strtod_l+0x380>
 80085e8:	4996      	ldr	r1, [pc, #600]	; (8008844 <_strtod_l+0x57c>)
 80085ea:	aa18      	add	r2, sp, #96	; 0x60
 80085ec:	a815      	add	r0, sp, #84	; 0x54
 80085ee:	f001 fac1 	bl	8009b74 <__hexnan>
 80085f2:	2805      	cmp	r0, #5
 80085f4:	d128      	bne.n	8008648 <_strtod_l+0x380>
 80085f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008600:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008604:	e69b      	b.n	800833e <_strtod_l+0x76>
 8008606:	9f08      	ldr	r7, [sp, #32]
 8008608:	210a      	movs	r1, #10
 800860a:	fb01 2107 	mla	r1, r1, r7, r2
 800860e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008612:	9208      	str	r2, [sp, #32]
 8008614:	e7b5      	b.n	8008582 <_strtod_l+0x2ba>
 8008616:	2a6e      	cmp	r2, #110	; 0x6e
 8008618:	e7d9      	b.n	80085ce <_strtod_l+0x306>
 800861a:	498b      	ldr	r1, [pc, #556]	; (8008848 <_strtod_l+0x580>)
 800861c:	a815      	add	r0, sp, #84	; 0x54
 800861e:	f001 fa95 	bl	8009b4c <__match>
 8008622:	2800      	cmp	r0, #0
 8008624:	f43f aea8 	beq.w	8008378 <_strtod_l+0xb0>
 8008628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862a:	4988      	ldr	r1, [pc, #544]	; (800884c <_strtod_l+0x584>)
 800862c:	3b01      	subs	r3, #1
 800862e:	a815      	add	r0, sp, #84	; 0x54
 8008630:	9315      	str	r3, [sp, #84]	; 0x54
 8008632:	f001 fa8b 	bl	8009b4c <__match>
 8008636:	b910      	cbnz	r0, 800863e <_strtod_l+0x376>
 8008638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800863a:	3301      	adds	r3, #1
 800863c:	9315      	str	r3, [sp, #84]	; 0x54
 800863e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800885c <_strtod_l+0x594>
 8008642:	f04f 0800 	mov.w	r8, #0
 8008646:	e67a      	b.n	800833e <_strtod_l+0x76>
 8008648:	4881      	ldr	r0, [pc, #516]	; (8008850 <_strtod_l+0x588>)
 800864a:	f000 ff65 	bl	8009518 <nan>
 800864e:	ec59 8b10 	vmov	r8, r9, d0
 8008652:	e674      	b.n	800833e <_strtod_l+0x76>
 8008654:	9b05      	ldr	r3, [sp, #20]
 8008656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008658:	1afb      	subs	r3, r7, r3
 800865a:	f1bb 0f00 	cmp.w	fp, #0
 800865e:	bf08      	it	eq
 8008660:	46b3      	moveq	fp, r6
 8008662:	2e10      	cmp	r6, #16
 8008664:	9308      	str	r3, [sp, #32]
 8008666:	4635      	mov	r5, r6
 8008668:	bfa8      	it	ge
 800866a:	2510      	movge	r5, #16
 800866c:	f7f7 ff4a 	bl	8000504 <__aeabi_ui2d>
 8008670:	2e09      	cmp	r6, #9
 8008672:	4680      	mov	r8, r0
 8008674:	4689      	mov	r9, r1
 8008676:	dd13      	ble.n	80086a0 <_strtod_l+0x3d8>
 8008678:	4b76      	ldr	r3, [pc, #472]	; (8008854 <_strtod_l+0x58c>)
 800867a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800867e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008682:	f7f7 ffb9 	bl	80005f8 <__aeabi_dmul>
 8008686:	4680      	mov	r8, r0
 8008688:	4650      	mov	r0, sl
 800868a:	4689      	mov	r9, r1
 800868c:	f7f7 ff3a 	bl	8000504 <__aeabi_ui2d>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4640      	mov	r0, r8
 8008696:	4649      	mov	r1, r9
 8008698:	f7f7 fdf8 	bl	800028c <__adddf3>
 800869c:	4680      	mov	r8, r0
 800869e:	4689      	mov	r9, r1
 80086a0:	2e0f      	cmp	r6, #15
 80086a2:	dc38      	bgt.n	8008716 <_strtod_l+0x44e>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f43f ae49 	beq.w	800833e <_strtod_l+0x76>
 80086ac:	dd24      	ble.n	80086f8 <_strtod_l+0x430>
 80086ae:	2b16      	cmp	r3, #22
 80086b0:	dc0b      	bgt.n	80086ca <_strtod_l+0x402>
 80086b2:	4968      	ldr	r1, [pc, #416]	; (8008854 <_strtod_l+0x58c>)
 80086b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	f7f7 ff9a 	bl	80005f8 <__aeabi_dmul>
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	e639      	b.n	800833e <_strtod_l+0x76>
 80086ca:	9a08      	ldr	r2, [sp, #32]
 80086cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80086d0:	4293      	cmp	r3, r2
 80086d2:	db20      	blt.n	8008716 <_strtod_l+0x44e>
 80086d4:	4c5f      	ldr	r4, [pc, #380]	; (8008854 <_strtod_l+0x58c>)
 80086d6:	f1c6 060f 	rsb	r6, r6, #15
 80086da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80086de:	4642      	mov	r2, r8
 80086e0:	464b      	mov	r3, r9
 80086e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e6:	f7f7 ff87 	bl	80005f8 <__aeabi_dmul>
 80086ea:	9b08      	ldr	r3, [sp, #32]
 80086ec:	1b9e      	subs	r6, r3, r6
 80086ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80086f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086f6:	e7e3      	b.n	80086c0 <_strtod_l+0x3f8>
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	3316      	adds	r3, #22
 80086fc:	db0b      	blt.n	8008716 <_strtod_l+0x44e>
 80086fe:	9b05      	ldr	r3, [sp, #20]
 8008700:	1bdf      	subs	r7, r3, r7
 8008702:	4b54      	ldr	r3, [pc, #336]	; (8008854 <_strtod_l+0x58c>)
 8008704:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870c:	4640      	mov	r0, r8
 800870e:	4649      	mov	r1, r9
 8008710:	f7f8 f89c 	bl	800084c <__aeabi_ddiv>
 8008714:	e7d6      	b.n	80086c4 <_strtod_l+0x3fc>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	1b75      	subs	r5, r6, r5
 800871a:	441d      	add	r5, r3
 800871c:	2d00      	cmp	r5, #0
 800871e:	dd70      	ble.n	8008802 <_strtod_l+0x53a>
 8008720:	f015 030f 	ands.w	r3, r5, #15
 8008724:	d00a      	beq.n	800873c <_strtod_l+0x474>
 8008726:	494b      	ldr	r1, [pc, #300]	; (8008854 <_strtod_l+0x58c>)
 8008728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008734:	f7f7 ff60 	bl	80005f8 <__aeabi_dmul>
 8008738:	4680      	mov	r8, r0
 800873a:	4689      	mov	r9, r1
 800873c:	f035 050f 	bics.w	r5, r5, #15
 8008740:	d04d      	beq.n	80087de <_strtod_l+0x516>
 8008742:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008746:	dd22      	ble.n	800878e <_strtod_l+0x4c6>
 8008748:	2500      	movs	r5, #0
 800874a:	46ab      	mov	fp, r5
 800874c:	9509      	str	r5, [sp, #36]	; 0x24
 800874e:	9505      	str	r5, [sp, #20]
 8008750:	2322      	movs	r3, #34	; 0x22
 8008752:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800885c <_strtod_l+0x594>
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	f04f 0800 	mov.w	r8, #0
 800875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	f43f aded 	beq.w	800833e <_strtod_l+0x76>
 8008764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008766:	4620      	mov	r0, r4
 8008768:	f001 fba6 	bl	8009eb8 <_Bfree>
 800876c:	9905      	ldr	r1, [sp, #20]
 800876e:	4620      	mov	r0, r4
 8008770:	f001 fba2 	bl	8009eb8 <_Bfree>
 8008774:	4659      	mov	r1, fp
 8008776:	4620      	mov	r0, r4
 8008778:	f001 fb9e 	bl	8009eb8 <_Bfree>
 800877c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800877e:	4620      	mov	r0, r4
 8008780:	f001 fb9a 	bl	8009eb8 <_Bfree>
 8008784:	4629      	mov	r1, r5
 8008786:	4620      	mov	r0, r4
 8008788:	f001 fb96 	bl	8009eb8 <_Bfree>
 800878c:	e5d7      	b.n	800833e <_strtod_l+0x76>
 800878e:	4b32      	ldr	r3, [pc, #200]	; (8008858 <_strtod_l+0x590>)
 8008790:	9304      	str	r3, [sp, #16]
 8008792:	2300      	movs	r3, #0
 8008794:	112d      	asrs	r5, r5, #4
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	469a      	mov	sl, r3
 800879c:	2d01      	cmp	r5, #1
 800879e:	dc21      	bgt.n	80087e4 <_strtod_l+0x51c>
 80087a0:	b10b      	cbz	r3, 80087a6 <_strtod_l+0x4de>
 80087a2:	4680      	mov	r8, r0
 80087a4:	4689      	mov	r9, r1
 80087a6:	492c      	ldr	r1, [pc, #176]	; (8008858 <_strtod_l+0x590>)
 80087a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80087ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80087b0:	4642      	mov	r2, r8
 80087b2:	464b      	mov	r3, r9
 80087b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b8:	f7f7 ff1e 	bl	80005f8 <__aeabi_dmul>
 80087bc:	4b27      	ldr	r3, [pc, #156]	; (800885c <_strtod_l+0x594>)
 80087be:	460a      	mov	r2, r1
 80087c0:	400b      	ands	r3, r1
 80087c2:	4927      	ldr	r1, [pc, #156]	; (8008860 <_strtod_l+0x598>)
 80087c4:	428b      	cmp	r3, r1
 80087c6:	4680      	mov	r8, r0
 80087c8:	d8be      	bhi.n	8008748 <_strtod_l+0x480>
 80087ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80087ce:	428b      	cmp	r3, r1
 80087d0:	bf86      	itte	hi
 80087d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008864 <_strtod_l+0x59c>
 80087d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80087da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80087de:	2300      	movs	r3, #0
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	e07b      	b.n	80088dc <_strtod_l+0x614>
 80087e4:	07ea      	lsls	r2, r5, #31
 80087e6:	d505      	bpl.n	80087f4 <_strtod_l+0x52c>
 80087e8:	9b04      	ldr	r3, [sp, #16]
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f7f7 ff03 	bl	80005f8 <__aeabi_dmul>
 80087f2:	2301      	movs	r3, #1
 80087f4:	9a04      	ldr	r2, [sp, #16]
 80087f6:	3208      	adds	r2, #8
 80087f8:	f10a 0a01 	add.w	sl, sl, #1
 80087fc:	106d      	asrs	r5, r5, #1
 80087fe:	9204      	str	r2, [sp, #16]
 8008800:	e7cc      	b.n	800879c <_strtod_l+0x4d4>
 8008802:	d0ec      	beq.n	80087de <_strtod_l+0x516>
 8008804:	426d      	negs	r5, r5
 8008806:	f015 020f 	ands.w	r2, r5, #15
 800880a:	d00a      	beq.n	8008822 <_strtod_l+0x55a>
 800880c:	4b11      	ldr	r3, [pc, #68]	; (8008854 <_strtod_l+0x58c>)
 800880e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f8 f817 	bl	800084c <__aeabi_ddiv>
 800881e:	4680      	mov	r8, r0
 8008820:	4689      	mov	r9, r1
 8008822:	112d      	asrs	r5, r5, #4
 8008824:	d0db      	beq.n	80087de <_strtod_l+0x516>
 8008826:	2d1f      	cmp	r5, #31
 8008828:	dd1e      	ble.n	8008868 <_strtod_l+0x5a0>
 800882a:	2500      	movs	r5, #0
 800882c:	46ab      	mov	fp, r5
 800882e:	9509      	str	r5, [sp, #36]	; 0x24
 8008830:	9505      	str	r5, [sp, #20]
 8008832:	2322      	movs	r3, #34	; 0x22
 8008834:	f04f 0800 	mov.w	r8, #0
 8008838:	f04f 0900 	mov.w	r9, #0
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	e78d      	b.n	800875c <_strtod_l+0x494>
 8008840:	0800b687 	.word	0x0800b687
 8008844:	0800b6a0 	.word	0x0800b6a0
 8008848:	0800b67e 	.word	0x0800b67e
 800884c:	0800b681 	.word	0x0800b681
 8008850:	0800b895 	.word	0x0800b895
 8008854:	0800b988 	.word	0x0800b988
 8008858:	0800b960 	.word	0x0800b960
 800885c:	7ff00000 	.word	0x7ff00000
 8008860:	7ca00000 	.word	0x7ca00000
 8008864:	7fefffff 	.word	0x7fefffff
 8008868:	f015 0310 	ands.w	r3, r5, #16
 800886c:	bf18      	it	ne
 800886e:	236a      	movne	r3, #106	; 0x6a
 8008870:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008c14 <_strtod_l+0x94c>
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	4640      	mov	r0, r8
 8008878:	4649      	mov	r1, r9
 800887a:	2300      	movs	r3, #0
 800887c:	07ea      	lsls	r2, r5, #31
 800887e:	d504      	bpl.n	800888a <_strtod_l+0x5c2>
 8008880:	e9da 2300 	ldrd	r2, r3, [sl]
 8008884:	f7f7 feb8 	bl	80005f8 <__aeabi_dmul>
 8008888:	2301      	movs	r3, #1
 800888a:	106d      	asrs	r5, r5, #1
 800888c:	f10a 0a08 	add.w	sl, sl, #8
 8008890:	d1f4      	bne.n	800887c <_strtod_l+0x5b4>
 8008892:	b10b      	cbz	r3, 8008898 <_strtod_l+0x5d0>
 8008894:	4680      	mov	r8, r0
 8008896:	4689      	mov	r9, r1
 8008898:	9b04      	ldr	r3, [sp, #16]
 800889a:	b1bb      	cbz	r3, 80088cc <_strtod_l+0x604>
 800889c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80088a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	4649      	mov	r1, r9
 80088a8:	dd10      	ble.n	80088cc <_strtod_l+0x604>
 80088aa:	2b1f      	cmp	r3, #31
 80088ac:	f340 811e 	ble.w	8008aec <_strtod_l+0x824>
 80088b0:	2b34      	cmp	r3, #52	; 0x34
 80088b2:	bfde      	ittt	le
 80088b4:	f04f 33ff 	movle.w	r3, #4294967295
 80088b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80088bc:	4093      	lslle	r3, r2
 80088be:	f04f 0800 	mov.w	r8, #0
 80088c2:	bfcc      	ite	gt
 80088c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80088c8:	ea03 0901 	andle.w	r9, r3, r1
 80088cc:	2200      	movs	r2, #0
 80088ce:	2300      	movs	r3, #0
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f8 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d1a6      	bne.n	800882a <_strtod_l+0x562>
 80088dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088e2:	4633      	mov	r3, r6
 80088e4:	465a      	mov	r2, fp
 80088e6:	4620      	mov	r0, r4
 80088e8:	f001 fb4e 	bl	8009f88 <__s2b>
 80088ec:	9009      	str	r0, [sp, #36]	; 0x24
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f43f af2a 	beq.w	8008748 <_strtod_l+0x480>
 80088f4:	9a08      	ldr	r2, [sp, #32]
 80088f6:	9b05      	ldr	r3, [sp, #20]
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	eba3 0307 	sub.w	r3, r3, r7
 80088fe:	bfa8      	it	ge
 8008900:	2300      	movge	r3, #0
 8008902:	930c      	str	r3, [sp, #48]	; 0x30
 8008904:	2500      	movs	r5, #0
 8008906:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800890a:	9312      	str	r3, [sp, #72]	; 0x48
 800890c:	46ab      	mov	fp, r5
 800890e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008910:	4620      	mov	r0, r4
 8008912:	6859      	ldr	r1, [r3, #4]
 8008914:	f001 fa90 	bl	8009e38 <_Balloc>
 8008918:	9005      	str	r0, [sp, #20]
 800891a:	2800      	cmp	r0, #0
 800891c:	f43f af18 	beq.w	8008750 <_strtod_l+0x488>
 8008920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	3202      	adds	r2, #2
 8008926:	f103 010c 	add.w	r1, r3, #12
 800892a:	0092      	lsls	r2, r2, #2
 800892c:	300c      	adds	r0, #12
 800892e:	f000 fde4 	bl	80094fa <memcpy>
 8008932:	ec49 8b10 	vmov	d0, r8, r9
 8008936:	aa18      	add	r2, sp, #96	; 0x60
 8008938:	a917      	add	r1, sp, #92	; 0x5c
 800893a:	4620      	mov	r0, r4
 800893c:	f001 fe58 	bl	800a5f0 <__d2b>
 8008940:	ec49 8b18 	vmov	d8, r8, r9
 8008944:	9016      	str	r0, [sp, #88]	; 0x58
 8008946:	2800      	cmp	r0, #0
 8008948:	f43f af02 	beq.w	8008750 <_strtod_l+0x488>
 800894c:	2101      	movs	r1, #1
 800894e:	4620      	mov	r0, r4
 8008950:	f001 fbb2 	bl	800a0b8 <__i2b>
 8008954:	4683      	mov	fp, r0
 8008956:	2800      	cmp	r0, #0
 8008958:	f43f aefa 	beq.w	8008750 <_strtod_l+0x488>
 800895c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800895e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008960:	2e00      	cmp	r6, #0
 8008962:	bfab      	itete	ge
 8008964:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008966:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008968:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800896a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800896e:	bfac      	ite	ge
 8008970:	eb06 0a03 	addge.w	sl, r6, r3
 8008974:	1b9f      	sublt	r7, r3, r6
 8008976:	9b04      	ldr	r3, [sp, #16]
 8008978:	1af6      	subs	r6, r6, r3
 800897a:	4416      	add	r6, r2
 800897c:	4ba0      	ldr	r3, [pc, #640]	; (8008c00 <_strtod_l+0x938>)
 800897e:	3e01      	subs	r6, #1
 8008980:	429e      	cmp	r6, r3
 8008982:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008986:	f280 80c4 	bge.w	8008b12 <_strtod_l+0x84a>
 800898a:	1b9b      	subs	r3, r3, r6
 800898c:	2b1f      	cmp	r3, #31
 800898e:	eba2 0203 	sub.w	r2, r2, r3
 8008992:	f04f 0101 	mov.w	r1, #1
 8008996:	f300 80b0 	bgt.w	8008afa <_strtod_l+0x832>
 800899a:	fa01 f303 	lsl.w	r3, r1, r3
 800899e:	930e      	str	r3, [sp, #56]	; 0x38
 80089a0:	2300      	movs	r3, #0
 80089a2:	930d      	str	r3, [sp, #52]	; 0x34
 80089a4:	eb0a 0602 	add.w	r6, sl, r2
 80089a8:	9b04      	ldr	r3, [sp, #16]
 80089aa:	45b2      	cmp	sl, r6
 80089ac:	4417      	add	r7, r2
 80089ae:	441f      	add	r7, r3
 80089b0:	4653      	mov	r3, sl
 80089b2:	bfa8      	it	ge
 80089b4:	4633      	movge	r3, r6
 80089b6:	42bb      	cmp	r3, r7
 80089b8:	bfa8      	it	ge
 80089ba:	463b      	movge	r3, r7
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfc2      	ittt	gt
 80089c0:	1af6      	subgt	r6, r6, r3
 80089c2:	1aff      	subgt	r7, r7, r3
 80089c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80089c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dd17      	ble.n	80089fe <_strtod_l+0x736>
 80089ce:	4659      	mov	r1, fp
 80089d0:	461a      	mov	r2, r3
 80089d2:	4620      	mov	r0, r4
 80089d4:	f001 fc30 	bl	800a238 <__pow5mult>
 80089d8:	4683      	mov	fp, r0
 80089da:	2800      	cmp	r0, #0
 80089dc:	f43f aeb8 	beq.w	8008750 <_strtod_l+0x488>
 80089e0:	4601      	mov	r1, r0
 80089e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089e4:	4620      	mov	r0, r4
 80089e6:	f001 fb7d 	bl	800a0e4 <__multiply>
 80089ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f43f aeaf 	beq.w	8008750 <_strtod_l+0x488>
 80089f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089f4:	4620      	mov	r0, r4
 80089f6:	f001 fa5f 	bl	8009eb8 <_Bfree>
 80089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fc:	9316      	str	r3, [sp, #88]	; 0x58
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	f300 808c 	bgt.w	8008b1c <_strtod_l+0x854>
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dd08      	ble.n	8008a1c <_strtod_l+0x754>
 8008a0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a0c:	9905      	ldr	r1, [sp, #20]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f001 fc12 	bl	800a238 <__pow5mult>
 8008a14:	9005      	str	r0, [sp, #20]
 8008a16:	2800      	cmp	r0, #0
 8008a18:	f43f ae9a 	beq.w	8008750 <_strtod_l+0x488>
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	dd08      	ble.n	8008a32 <_strtod_l+0x76a>
 8008a20:	9905      	ldr	r1, [sp, #20]
 8008a22:	463a      	mov	r2, r7
 8008a24:	4620      	mov	r0, r4
 8008a26:	f001 fc61 	bl	800a2ec <__lshift>
 8008a2a:	9005      	str	r0, [sp, #20]
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f43f ae8f 	beq.w	8008750 <_strtod_l+0x488>
 8008a32:	f1ba 0f00 	cmp.w	sl, #0
 8008a36:	dd08      	ble.n	8008a4a <_strtod_l+0x782>
 8008a38:	4659      	mov	r1, fp
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f001 fc55 	bl	800a2ec <__lshift>
 8008a42:	4683      	mov	fp, r0
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f43f ae83 	beq.w	8008750 <_strtod_l+0x488>
 8008a4a:	9a05      	ldr	r2, [sp, #20]
 8008a4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f001 fcd4 	bl	800a3fc <__mdiff>
 8008a54:	4605      	mov	r5, r0
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f43f ae7a 	beq.w	8008750 <_strtod_l+0x488>
 8008a5c:	68c3      	ldr	r3, [r0, #12]
 8008a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a60:	2300      	movs	r3, #0
 8008a62:	60c3      	str	r3, [r0, #12]
 8008a64:	4659      	mov	r1, fp
 8008a66:	f001 fcad 	bl	800a3c4 <__mcmp>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	da60      	bge.n	8008b30 <_strtod_l+0x868>
 8008a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a70:	ea53 0308 	orrs.w	r3, r3, r8
 8008a74:	f040 8084 	bne.w	8008b80 <_strtod_l+0x8b8>
 8008a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d17f      	bne.n	8008b80 <_strtod_l+0x8b8>
 8008a80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a84:	0d1b      	lsrs	r3, r3, #20
 8008a86:	051b      	lsls	r3, r3, #20
 8008a88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a8c:	d978      	bls.n	8008b80 <_strtod_l+0x8b8>
 8008a8e:	696b      	ldr	r3, [r5, #20]
 8008a90:	b913      	cbnz	r3, 8008a98 <_strtod_l+0x7d0>
 8008a92:	692b      	ldr	r3, [r5, #16]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	dd73      	ble.n	8008b80 <_strtod_l+0x8b8>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f001 fc25 	bl	800a2ec <__lshift>
 8008aa2:	4659      	mov	r1, fp
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	f001 fc8d 	bl	800a3c4 <__mcmp>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	dd68      	ble.n	8008b80 <_strtod_l+0x8b8>
 8008aae:	9904      	ldr	r1, [sp, #16]
 8008ab0:	4a54      	ldr	r2, [pc, #336]	; (8008c04 <_strtod_l+0x93c>)
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	2900      	cmp	r1, #0
 8008ab6:	f000 8084 	beq.w	8008bc2 <_strtod_l+0x8fa>
 8008aba:	ea02 0109 	and.w	r1, r2, r9
 8008abe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ac2:	dc7e      	bgt.n	8008bc2 <_strtod_l+0x8fa>
 8008ac4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008ac8:	f77f aeb3 	ble.w	8008832 <_strtod_l+0x56a>
 8008acc:	4b4e      	ldr	r3, [pc, #312]	; (8008c08 <_strtod_l+0x940>)
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	4b4a      	ldr	r3, [pc, #296]	; (8008c04 <_strtod_l+0x93c>)
 8008ada:	400b      	ands	r3, r1
 8008adc:	4680      	mov	r8, r0
 8008ade:	4689      	mov	r9, r1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f47f ae3f 	bne.w	8008764 <_strtod_l+0x49c>
 8008ae6:	2322      	movs	r3, #34	; 0x22
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	e63b      	b.n	8008764 <_strtod_l+0x49c>
 8008aec:	f04f 32ff 	mov.w	r2, #4294967295
 8008af0:	fa02 f303 	lsl.w	r3, r2, r3
 8008af4:	ea03 0808 	and.w	r8, r3, r8
 8008af8:	e6e8      	b.n	80088cc <_strtod_l+0x604>
 8008afa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008afe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008b02:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008b06:	36e2      	adds	r6, #226	; 0xe2
 8008b08:	fa01 f306 	lsl.w	r3, r1, r6
 8008b0c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008b10:	e748      	b.n	80089a4 <_strtod_l+0x6dc>
 8008b12:	2100      	movs	r1, #0
 8008b14:	2301      	movs	r3, #1
 8008b16:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008b1a:	e743      	b.n	80089a4 <_strtod_l+0x6dc>
 8008b1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b1e:	4632      	mov	r2, r6
 8008b20:	4620      	mov	r0, r4
 8008b22:	f001 fbe3 	bl	800a2ec <__lshift>
 8008b26:	9016      	str	r0, [sp, #88]	; 0x58
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f47f af6b 	bne.w	8008a04 <_strtod_l+0x73c>
 8008b2e:	e60f      	b.n	8008750 <_strtod_l+0x488>
 8008b30:	46ca      	mov	sl, r9
 8008b32:	d171      	bne.n	8008c18 <_strtod_l+0x950>
 8008b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b3a:	b352      	cbz	r2, 8008b92 <_strtod_l+0x8ca>
 8008b3c:	4a33      	ldr	r2, [pc, #204]	; (8008c0c <_strtod_l+0x944>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d12a      	bne.n	8008b98 <_strtod_l+0x8d0>
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	4641      	mov	r1, r8
 8008b46:	b1fb      	cbz	r3, 8008b88 <_strtod_l+0x8c0>
 8008b48:	4b2e      	ldr	r3, [pc, #184]	; (8008c04 <_strtod_l+0x93c>)
 8008b4a:	ea09 0303 	and.w	r3, r9, r3
 8008b4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b52:	f04f 32ff 	mov.w	r2, #4294967295
 8008b56:	d81a      	bhi.n	8008b8e <_strtod_l+0x8c6>
 8008b58:	0d1b      	lsrs	r3, r3, #20
 8008b5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b62:	4299      	cmp	r1, r3
 8008b64:	d118      	bne.n	8008b98 <_strtod_l+0x8d0>
 8008b66:	4b2a      	ldr	r3, [pc, #168]	; (8008c10 <_strtod_l+0x948>)
 8008b68:	459a      	cmp	sl, r3
 8008b6a:	d102      	bne.n	8008b72 <_strtod_l+0x8aa>
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	f43f adef 	beq.w	8008750 <_strtod_l+0x488>
 8008b72:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <_strtod_l+0x93c>)
 8008b74:	ea0a 0303 	and.w	r3, sl, r3
 8008b78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008b7c:	f04f 0800 	mov.w	r8, #0
 8008b80:	9b04      	ldr	r3, [sp, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1a2      	bne.n	8008acc <_strtod_l+0x804>
 8008b86:	e5ed      	b.n	8008764 <_strtod_l+0x49c>
 8008b88:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8c:	e7e9      	b.n	8008b62 <_strtod_l+0x89a>
 8008b8e:	4613      	mov	r3, r2
 8008b90:	e7e7      	b.n	8008b62 <_strtod_l+0x89a>
 8008b92:	ea53 0308 	orrs.w	r3, r3, r8
 8008b96:	d08a      	beq.n	8008aae <_strtod_l+0x7e6>
 8008b98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b9a:	b1e3      	cbz	r3, 8008bd6 <_strtod_l+0x90e>
 8008b9c:	ea13 0f0a 	tst.w	r3, sl
 8008ba0:	d0ee      	beq.n	8008b80 <_strtod_l+0x8b8>
 8008ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba4:	9a04      	ldr	r2, [sp, #16]
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	4649      	mov	r1, r9
 8008baa:	b1c3      	cbz	r3, 8008bde <_strtod_l+0x916>
 8008bac:	f7ff fb6d 	bl	800828a <sulp>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	ec51 0b18 	vmov	r0, r1, d8
 8008bb8:	f7f7 fb68 	bl	800028c <__adddf3>
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	4689      	mov	r9, r1
 8008bc0:	e7de      	b.n	8008b80 <_strtod_l+0x8b8>
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008bc8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008bcc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008bd0:	f04f 38ff 	mov.w	r8, #4294967295
 8008bd4:	e7d4      	b.n	8008b80 <_strtod_l+0x8b8>
 8008bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd8:	ea13 0f08 	tst.w	r3, r8
 8008bdc:	e7e0      	b.n	8008ba0 <_strtod_l+0x8d8>
 8008bde:	f7ff fb54 	bl	800828a <sulp>
 8008be2:	4602      	mov	r2, r0
 8008be4:	460b      	mov	r3, r1
 8008be6:	ec51 0b18 	vmov	r0, r1, d8
 8008bea:	f7f7 fb4d 	bl	8000288 <__aeabi_dsub>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4680      	mov	r8, r0
 8008bf4:	4689      	mov	r9, r1
 8008bf6:	f7f7 ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d0c0      	beq.n	8008b80 <_strtod_l+0x8b8>
 8008bfe:	e618      	b.n	8008832 <_strtod_l+0x56a>
 8008c00:	fffffc02 	.word	0xfffffc02
 8008c04:	7ff00000 	.word	0x7ff00000
 8008c08:	39500000 	.word	0x39500000
 8008c0c:	000fffff 	.word	0x000fffff
 8008c10:	7fefffff 	.word	0x7fefffff
 8008c14:	0800b6b8 	.word	0x0800b6b8
 8008c18:	4659      	mov	r1, fp
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f001 fd42 	bl	800a6a4 <__ratio>
 8008c20:	ec57 6b10 	vmov	r6, r7, d0
 8008c24:	ee10 0a10 	vmov	r0, s0
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c2e:	4639      	mov	r1, r7
 8008c30:	f7f7 ff5e 	bl	8000af0 <__aeabi_dcmple>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d071      	beq.n	8008d1c <_strtod_l+0xa54>
 8008c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d17c      	bne.n	8008d38 <_strtod_l+0xa70>
 8008c3e:	f1b8 0f00 	cmp.w	r8, #0
 8008c42:	d15a      	bne.n	8008cfa <_strtod_l+0xa32>
 8008c44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d15d      	bne.n	8008d08 <_strtod_l+0xa40>
 8008c4c:	4b90      	ldr	r3, [pc, #576]	; (8008e90 <_strtod_l+0xbc8>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4630      	mov	r0, r6
 8008c52:	4639      	mov	r1, r7
 8008c54:	f7f7 ff42 	bl	8000adc <__aeabi_dcmplt>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d15c      	bne.n	8008d16 <_strtod_l+0xa4e>
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	4b8c      	ldr	r3, [pc, #560]	; (8008e94 <_strtod_l+0xbcc>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	f7f7 fcc8 	bl	80005f8 <__aeabi_dmul>
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c70:	9606      	str	r6, [sp, #24]
 8008c72:	9307      	str	r3, [sp, #28]
 8008c74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c7c:	4b86      	ldr	r3, [pc, #536]	; (8008e98 <_strtod_l+0xbd0>)
 8008c7e:	ea0a 0303 	and.w	r3, sl, r3
 8008c82:	930d      	str	r3, [sp, #52]	; 0x34
 8008c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c86:	4b85      	ldr	r3, [pc, #532]	; (8008e9c <_strtod_l+0xbd4>)
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	f040 8090 	bne.w	8008dae <_strtod_l+0xae6>
 8008c8e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008c92:	ec49 8b10 	vmov	d0, r8, r9
 8008c96:	f001 fc3b 	bl	800a510 <__ulp>
 8008c9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c9e:	ec51 0b10 	vmov	r0, r1, d0
 8008ca2:	f7f7 fca9 	bl	80005f8 <__aeabi_dmul>
 8008ca6:	4642      	mov	r2, r8
 8008ca8:	464b      	mov	r3, r9
 8008caa:	f7f7 faef 	bl	800028c <__adddf3>
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4979      	ldr	r1, [pc, #484]	; (8008e98 <_strtod_l+0xbd0>)
 8008cb2:	4a7b      	ldr	r2, [pc, #492]	; (8008ea0 <_strtod_l+0xbd8>)
 8008cb4:	4019      	ands	r1, r3
 8008cb6:	4291      	cmp	r1, r2
 8008cb8:	4680      	mov	r8, r0
 8008cba:	d944      	bls.n	8008d46 <_strtod_l+0xa7e>
 8008cbc:	ee18 2a90 	vmov	r2, s17
 8008cc0:	4b78      	ldr	r3, [pc, #480]	; (8008ea4 <_strtod_l+0xbdc>)
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d104      	bne.n	8008cd0 <_strtod_l+0xa08>
 8008cc6:	ee18 3a10 	vmov	r3, s16
 8008cca:	3301      	adds	r3, #1
 8008ccc:	f43f ad40 	beq.w	8008750 <_strtod_l+0x488>
 8008cd0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008ea4 <_strtod_l+0xbdc>
 8008cd4:	f04f 38ff 	mov.w	r8, #4294967295
 8008cd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f001 f8ec 	bl	8009eb8 <_Bfree>
 8008ce0:	9905      	ldr	r1, [sp, #20]
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f001 f8e8 	bl	8009eb8 <_Bfree>
 8008ce8:	4659      	mov	r1, fp
 8008cea:	4620      	mov	r0, r4
 8008cec:	f001 f8e4 	bl	8009eb8 <_Bfree>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f001 f8e0 	bl	8009eb8 <_Bfree>
 8008cf8:	e609      	b.n	800890e <_strtod_l+0x646>
 8008cfa:	f1b8 0f01 	cmp.w	r8, #1
 8008cfe:	d103      	bne.n	8008d08 <_strtod_l+0xa40>
 8008d00:	f1b9 0f00 	cmp.w	r9, #0
 8008d04:	f43f ad95 	beq.w	8008832 <_strtod_l+0x56a>
 8008d08:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008e60 <_strtod_l+0xb98>
 8008d0c:	4f60      	ldr	r7, [pc, #384]	; (8008e90 <_strtod_l+0xbc8>)
 8008d0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d12:	2600      	movs	r6, #0
 8008d14:	e7ae      	b.n	8008c74 <_strtod_l+0x9ac>
 8008d16:	4f5f      	ldr	r7, [pc, #380]	; (8008e94 <_strtod_l+0xbcc>)
 8008d18:	2600      	movs	r6, #0
 8008d1a:	e7a7      	b.n	8008c6c <_strtod_l+0x9a4>
 8008d1c:	4b5d      	ldr	r3, [pc, #372]	; (8008e94 <_strtod_l+0xbcc>)
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4639      	mov	r1, r7
 8008d22:	2200      	movs	r2, #0
 8008d24:	f7f7 fc68 	bl	80005f8 <__aeabi_dmul>
 8008d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d09c      	beq.n	8008c6c <_strtod_l+0x9a4>
 8008d32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d36:	e79d      	b.n	8008c74 <_strtod_l+0x9ac>
 8008d38:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008e68 <_strtod_l+0xba0>
 8008d3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d40:	ec57 6b17 	vmov	r6, r7, d7
 8008d44:	e796      	b.n	8008c74 <_strtod_l+0x9ac>
 8008d46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008d4a:	9b04      	ldr	r3, [sp, #16]
 8008d4c:	46ca      	mov	sl, r9
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1c2      	bne.n	8008cd8 <_strtod_l+0xa10>
 8008d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d58:	0d1b      	lsrs	r3, r3, #20
 8008d5a:	051b      	lsls	r3, r3, #20
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d1bb      	bne.n	8008cd8 <_strtod_l+0xa10>
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 ff7a 	bl	8000c5c <__aeabi_d2lz>
 8008d68:	f7f7 fc18 	bl	800059c <__aeabi_l2d>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 fa88 	bl	8000288 <__aeabi_dsub>
 8008d78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d7e:	ea43 0308 	orr.w	r3, r3, r8
 8008d82:	4313      	orrs	r3, r2
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	d054      	beq.n	8008e34 <_strtod_l+0xb6c>
 8008d8a:	a339      	add	r3, pc, #228	; (adr r3, 8008e70 <_strtod_l+0xba8>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	f7f7 fea4 	bl	8000adc <__aeabi_dcmplt>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	f47f ace5 	bne.w	8008764 <_strtod_l+0x49c>
 8008d9a:	a337      	add	r3, pc, #220	; (adr r3, 8008e78 <_strtod_l+0xbb0>)
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 feb8 	bl	8000b18 <__aeabi_dcmpgt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d095      	beq.n	8008cd8 <_strtod_l+0xa10>
 8008dac:	e4da      	b.n	8008764 <_strtod_l+0x49c>
 8008dae:	9b04      	ldr	r3, [sp, #16]
 8008db0:	b333      	cbz	r3, 8008e00 <_strtod_l+0xb38>
 8008db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008db8:	d822      	bhi.n	8008e00 <_strtod_l+0xb38>
 8008dba:	a331      	add	r3, pc, #196	; (adr r3, 8008e80 <_strtod_l+0xbb8>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	f7f7 fe94 	bl	8000af0 <__aeabi_dcmple>
 8008dc8:	b1a0      	cbz	r0, 8008df4 <_strtod_l+0xb2c>
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f7f7 fed5 	bl	8000b7c <__aeabi_d2uiz>
 8008dd2:	2801      	cmp	r0, #1
 8008dd4:	bf38      	it	cc
 8008dd6:	2001      	movcc	r0, #1
 8008dd8:	f7f7 fb94 	bl	8000504 <__aeabi_ui2d>
 8008ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dde:	4606      	mov	r6, r0
 8008de0:	460f      	mov	r7, r1
 8008de2:	bb23      	cbnz	r3, 8008e2e <_strtod_l+0xb66>
 8008de4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008de8:	9010      	str	r0, [sp, #64]	; 0x40
 8008dea:	9311      	str	r3, [sp, #68]	; 0x44
 8008dec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008df0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008df6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008df8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e04:	eeb0 0a48 	vmov.f32	s0, s16
 8008e08:	eef0 0a68 	vmov.f32	s1, s17
 8008e0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008e10:	f001 fb7e 	bl	800a510 <__ulp>
 8008e14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e18:	ec53 2b10 	vmov	r2, r3, d0
 8008e1c:	f7f7 fbec 	bl	80005f8 <__aeabi_dmul>
 8008e20:	ec53 2b18 	vmov	r2, r3, d8
 8008e24:	f7f7 fa32 	bl	800028c <__adddf3>
 8008e28:	4680      	mov	r8, r0
 8008e2a:	4689      	mov	r9, r1
 8008e2c:	e78d      	b.n	8008d4a <_strtod_l+0xa82>
 8008e2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008e32:	e7db      	b.n	8008dec <_strtod_l+0xb24>
 8008e34:	a314      	add	r3, pc, #80	; (adr r3, 8008e88 <_strtod_l+0xbc0>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f7f7 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8008e3e:	e7b3      	b.n	8008da8 <_strtod_l+0xae0>
 8008e40:	2300      	movs	r3, #0
 8008e42:	930a      	str	r3, [sp, #40]	; 0x28
 8008e44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	f7ff ba7c 	b.w	8008346 <_strtod_l+0x7e>
 8008e4e:	2a65      	cmp	r2, #101	; 0x65
 8008e50:	f43f ab75 	beq.w	800853e <_strtod_l+0x276>
 8008e54:	2a45      	cmp	r2, #69	; 0x45
 8008e56:	f43f ab72 	beq.w	800853e <_strtod_l+0x276>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	f7ff bbaa 	b.w	80085b4 <_strtod_l+0x2ec>
 8008e60:	00000000 	.word	0x00000000
 8008e64:	bff00000 	.word	0xbff00000
 8008e68:	00000000 	.word	0x00000000
 8008e6c:	3ff00000 	.word	0x3ff00000
 8008e70:	94a03595 	.word	0x94a03595
 8008e74:	3fdfffff 	.word	0x3fdfffff
 8008e78:	35afe535 	.word	0x35afe535
 8008e7c:	3fe00000 	.word	0x3fe00000
 8008e80:	ffc00000 	.word	0xffc00000
 8008e84:	41dfffff 	.word	0x41dfffff
 8008e88:	94a03595 	.word	0x94a03595
 8008e8c:	3fcfffff 	.word	0x3fcfffff
 8008e90:	3ff00000 	.word	0x3ff00000
 8008e94:	3fe00000 	.word	0x3fe00000
 8008e98:	7ff00000 	.word	0x7ff00000
 8008e9c:	7fe00000 	.word	0x7fe00000
 8008ea0:	7c9fffff 	.word	0x7c9fffff
 8008ea4:	7fefffff 	.word	0x7fefffff

08008ea8 <strtod>:
 8008ea8:	460a      	mov	r2, r1
 8008eaa:	4601      	mov	r1, r0
 8008eac:	4802      	ldr	r0, [pc, #8]	; (8008eb8 <strtod+0x10>)
 8008eae:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <strtod+0x14>)
 8008eb0:	6800      	ldr	r0, [r0, #0]
 8008eb2:	f7ff ba09 	b.w	80082c8 <_strtod_l>
 8008eb6:	bf00      	nop
 8008eb8:	200001d8 	.word	0x200001d8
 8008ebc:	20000020 	.word	0x20000020

08008ec0 <_strtol_l.constprop.0>:
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec6:	d001      	beq.n	8008ecc <_strtol_l.constprop.0+0xc>
 8008ec8:	2b24      	cmp	r3, #36	; 0x24
 8008eca:	d906      	bls.n	8008eda <_strtol_l.constprop.0+0x1a>
 8008ecc:	f000 fae8 	bl	80094a0 <__errno>
 8008ed0:	2316      	movs	r3, #22
 8008ed2:	6003      	str	r3, [r0, #0]
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008fc0 <_strtol_l.constprop.0+0x100>
 8008ede:	460d      	mov	r5, r1
 8008ee0:	462e      	mov	r6, r5
 8008ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ee6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008eea:	f017 0708 	ands.w	r7, r7, #8
 8008eee:	d1f7      	bne.n	8008ee0 <_strtol_l.constprop.0+0x20>
 8008ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8008ef2:	d132      	bne.n	8008f5a <_strtol_l.constprop.0+0x9a>
 8008ef4:	782c      	ldrb	r4, [r5, #0]
 8008ef6:	2701      	movs	r7, #1
 8008ef8:	1cb5      	adds	r5, r6, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d05b      	beq.n	8008fb6 <_strtol_l.constprop.0+0xf6>
 8008efe:	2b10      	cmp	r3, #16
 8008f00:	d109      	bne.n	8008f16 <_strtol_l.constprop.0+0x56>
 8008f02:	2c30      	cmp	r4, #48	; 0x30
 8008f04:	d107      	bne.n	8008f16 <_strtol_l.constprop.0+0x56>
 8008f06:	782c      	ldrb	r4, [r5, #0]
 8008f08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f0c:	2c58      	cmp	r4, #88	; 0x58
 8008f0e:	d14d      	bne.n	8008fac <_strtol_l.constprop.0+0xec>
 8008f10:	786c      	ldrb	r4, [r5, #1]
 8008f12:	2310      	movs	r3, #16
 8008f14:	3502      	adds	r5, #2
 8008f16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f1e:	f04f 0e00 	mov.w	lr, #0
 8008f22:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f26:	4676      	mov	r6, lr
 8008f28:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f2c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008f30:	f1bc 0f09 	cmp.w	ip, #9
 8008f34:	d816      	bhi.n	8008f64 <_strtol_l.constprop.0+0xa4>
 8008f36:	4664      	mov	r4, ip
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	dd24      	ble.n	8008f86 <_strtol_l.constprop.0+0xc6>
 8008f3c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f40:	d008      	beq.n	8008f54 <_strtol_l.constprop.0+0x94>
 8008f42:	45b1      	cmp	r9, r6
 8008f44:	d31c      	bcc.n	8008f80 <_strtol_l.constprop.0+0xc0>
 8008f46:	d101      	bne.n	8008f4c <_strtol_l.constprop.0+0x8c>
 8008f48:	45a2      	cmp	sl, r4
 8008f4a:	db19      	blt.n	8008f80 <_strtol_l.constprop.0+0xc0>
 8008f4c:	fb06 4603 	mla	r6, r6, r3, r4
 8008f50:	f04f 0e01 	mov.w	lr, #1
 8008f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f58:	e7e8      	b.n	8008f2c <_strtol_l.constprop.0+0x6c>
 8008f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8008f5c:	bf04      	itt	eq
 8008f5e:	782c      	ldrbeq	r4, [r5, #0]
 8008f60:	1cb5      	addeq	r5, r6, #2
 8008f62:	e7ca      	b.n	8008efa <_strtol_l.constprop.0+0x3a>
 8008f64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008f68:	f1bc 0f19 	cmp.w	ip, #25
 8008f6c:	d801      	bhi.n	8008f72 <_strtol_l.constprop.0+0xb2>
 8008f6e:	3c37      	subs	r4, #55	; 0x37
 8008f70:	e7e2      	b.n	8008f38 <_strtol_l.constprop.0+0x78>
 8008f72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008f76:	f1bc 0f19 	cmp.w	ip, #25
 8008f7a:	d804      	bhi.n	8008f86 <_strtol_l.constprop.0+0xc6>
 8008f7c:	3c57      	subs	r4, #87	; 0x57
 8008f7e:	e7db      	b.n	8008f38 <_strtol_l.constprop.0+0x78>
 8008f80:	f04f 3eff 	mov.w	lr, #4294967295
 8008f84:	e7e6      	b.n	8008f54 <_strtol_l.constprop.0+0x94>
 8008f86:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f8a:	d105      	bne.n	8008f98 <_strtol_l.constprop.0+0xd8>
 8008f8c:	2322      	movs	r3, #34	; 0x22
 8008f8e:	6003      	str	r3, [r0, #0]
 8008f90:	4646      	mov	r6, r8
 8008f92:	b942      	cbnz	r2, 8008fa6 <_strtol_l.constprop.0+0xe6>
 8008f94:	4630      	mov	r0, r6
 8008f96:	e79e      	b.n	8008ed6 <_strtol_l.constprop.0+0x16>
 8008f98:	b107      	cbz	r7, 8008f9c <_strtol_l.constprop.0+0xdc>
 8008f9a:	4276      	negs	r6, r6
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d0f9      	beq.n	8008f94 <_strtol_l.constprop.0+0xd4>
 8008fa0:	f1be 0f00 	cmp.w	lr, #0
 8008fa4:	d000      	beq.n	8008fa8 <_strtol_l.constprop.0+0xe8>
 8008fa6:	1e69      	subs	r1, r5, #1
 8008fa8:	6011      	str	r1, [r2, #0]
 8008faa:	e7f3      	b.n	8008f94 <_strtol_l.constprop.0+0xd4>
 8008fac:	2430      	movs	r4, #48	; 0x30
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1b1      	bne.n	8008f16 <_strtol_l.constprop.0+0x56>
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	e7af      	b.n	8008f16 <_strtol_l.constprop.0+0x56>
 8008fb6:	2c30      	cmp	r4, #48	; 0x30
 8008fb8:	d0a5      	beq.n	8008f06 <_strtol_l.constprop.0+0x46>
 8008fba:	230a      	movs	r3, #10
 8008fbc:	e7ab      	b.n	8008f16 <_strtol_l.constprop.0+0x56>
 8008fbe:	bf00      	nop
 8008fc0:	0800b6e1 	.word	0x0800b6e1

08008fc4 <strtol>:
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	4601      	mov	r1, r0
 8008fca:	4802      	ldr	r0, [pc, #8]	; (8008fd4 <strtol+0x10>)
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f7ff bf77 	b.w	8008ec0 <_strtol_l.constprop.0>
 8008fd2:	bf00      	nop
 8008fd4:	200001d8 	.word	0x200001d8

08008fd8 <std>:
 8008fd8:	2300      	movs	r3, #0
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	e9c0 3300 	strd	r3, r3, [r0]
 8008fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fe6:	6083      	str	r3, [r0, #8]
 8008fe8:	8181      	strh	r1, [r0, #12]
 8008fea:	6643      	str	r3, [r0, #100]	; 0x64
 8008fec:	81c2      	strh	r2, [r0, #14]
 8008fee:	6183      	str	r3, [r0, #24]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	305c      	adds	r0, #92	; 0x5c
 8008ff6:	f000 f92d 	bl	8009254 <memset>
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <std+0x58>)
 8008ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <std+0x5c>)
 8009000:	62a3      	str	r3, [r4, #40]	; 0x28
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <std+0x60>)
 8009004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009006:	4b0d      	ldr	r3, [pc, #52]	; (800903c <std+0x64>)
 8009008:	6323      	str	r3, [r4, #48]	; 0x30
 800900a:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <std+0x68>)
 800900c:	6224      	str	r4, [r4, #32]
 800900e:	429c      	cmp	r4, r3
 8009010:	d006      	beq.n	8009020 <std+0x48>
 8009012:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009016:	4294      	cmp	r4, r2
 8009018:	d002      	beq.n	8009020 <std+0x48>
 800901a:	33d0      	adds	r3, #208	; 0xd0
 800901c:	429c      	cmp	r4, r3
 800901e:	d105      	bne.n	800902c <std+0x54>
 8009020:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009028:	f000 ba64 	b.w	80094f4 <__retarget_lock_init_recursive>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	bf00      	nop
 8009030:	0800915d 	.word	0x0800915d
 8009034:	0800917f 	.word	0x0800917f
 8009038:	080091b7 	.word	0x080091b7
 800903c:	080091db 	.word	0x080091db
 8009040:	20001df0 	.word	0x20001df0

08009044 <stdio_exit_handler>:
 8009044:	4a02      	ldr	r2, [pc, #8]	; (8009050 <stdio_exit_handler+0xc>)
 8009046:	4903      	ldr	r1, [pc, #12]	; (8009054 <stdio_exit_handler+0x10>)
 8009048:	4803      	ldr	r0, [pc, #12]	; (8009058 <stdio_exit_handler+0x14>)
 800904a:	f000 b869 	b.w	8009120 <_fwalk_sglue>
 800904e:	bf00      	nop
 8009050:	20000014 	.word	0x20000014
 8009054:	0800ae89 	.word	0x0800ae89
 8009058:	2000018c 	.word	0x2000018c

0800905c <cleanup_stdio>:
 800905c:	6841      	ldr	r1, [r0, #4]
 800905e:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <cleanup_stdio+0x34>)
 8009060:	4299      	cmp	r1, r3
 8009062:	b510      	push	{r4, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	d001      	beq.n	800906c <cleanup_stdio+0x10>
 8009068:	f001 ff0e 	bl	800ae88 <_fflush_r>
 800906c:	68a1      	ldr	r1, [r4, #8]
 800906e:	4b09      	ldr	r3, [pc, #36]	; (8009094 <cleanup_stdio+0x38>)
 8009070:	4299      	cmp	r1, r3
 8009072:	d002      	beq.n	800907a <cleanup_stdio+0x1e>
 8009074:	4620      	mov	r0, r4
 8009076:	f001 ff07 	bl	800ae88 <_fflush_r>
 800907a:	68e1      	ldr	r1, [r4, #12]
 800907c:	4b06      	ldr	r3, [pc, #24]	; (8009098 <cleanup_stdio+0x3c>)
 800907e:	4299      	cmp	r1, r3
 8009080:	d004      	beq.n	800908c <cleanup_stdio+0x30>
 8009082:	4620      	mov	r0, r4
 8009084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009088:	f001 befe 	b.w	800ae88 <_fflush_r>
 800908c:	bd10      	pop	{r4, pc}
 800908e:	bf00      	nop
 8009090:	20001df0 	.word	0x20001df0
 8009094:	20001e58 	.word	0x20001e58
 8009098:	20001ec0 	.word	0x20001ec0

0800909c <global_stdio_init.part.0>:
 800909c:	b510      	push	{r4, lr}
 800909e:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <global_stdio_init.part.0+0x30>)
 80090a0:	4c0b      	ldr	r4, [pc, #44]	; (80090d0 <global_stdio_init.part.0+0x34>)
 80090a2:	4a0c      	ldr	r2, [pc, #48]	; (80090d4 <global_stdio_init.part.0+0x38>)
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	4620      	mov	r0, r4
 80090a8:	2200      	movs	r2, #0
 80090aa:	2104      	movs	r1, #4
 80090ac:	f7ff ff94 	bl	8008fd8 <std>
 80090b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090b4:	2201      	movs	r2, #1
 80090b6:	2109      	movs	r1, #9
 80090b8:	f7ff ff8e 	bl	8008fd8 <std>
 80090bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090c0:	2202      	movs	r2, #2
 80090c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c6:	2112      	movs	r1, #18
 80090c8:	f7ff bf86 	b.w	8008fd8 <std>
 80090cc:	20001f28 	.word	0x20001f28
 80090d0:	20001df0 	.word	0x20001df0
 80090d4:	08009045 	.word	0x08009045

080090d8 <__sfp_lock_acquire>:
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <__sfp_lock_acquire+0x8>)
 80090da:	f000 ba0c 	b.w	80094f6 <__retarget_lock_acquire_recursive>
 80090de:	bf00      	nop
 80090e0:	20001f31 	.word	0x20001f31

080090e4 <__sfp_lock_release>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__sfp_lock_release+0x8>)
 80090e6:	f000 ba07 	b.w	80094f8 <__retarget_lock_release_recursive>
 80090ea:	bf00      	nop
 80090ec:	20001f31 	.word	0x20001f31

080090f0 <__sinit>:
 80090f0:	b510      	push	{r4, lr}
 80090f2:	4604      	mov	r4, r0
 80090f4:	f7ff fff0 	bl	80090d8 <__sfp_lock_acquire>
 80090f8:	6a23      	ldr	r3, [r4, #32]
 80090fa:	b11b      	cbz	r3, 8009104 <__sinit+0x14>
 80090fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009100:	f7ff bff0 	b.w	80090e4 <__sfp_lock_release>
 8009104:	4b04      	ldr	r3, [pc, #16]	; (8009118 <__sinit+0x28>)
 8009106:	6223      	str	r3, [r4, #32]
 8009108:	4b04      	ldr	r3, [pc, #16]	; (800911c <__sinit+0x2c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1f5      	bne.n	80090fc <__sinit+0xc>
 8009110:	f7ff ffc4 	bl	800909c <global_stdio_init.part.0>
 8009114:	e7f2      	b.n	80090fc <__sinit+0xc>
 8009116:	bf00      	nop
 8009118:	0800905d 	.word	0x0800905d
 800911c:	20001f28 	.word	0x20001f28

08009120 <_fwalk_sglue>:
 8009120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009124:	4607      	mov	r7, r0
 8009126:	4688      	mov	r8, r1
 8009128:	4614      	mov	r4, r2
 800912a:	2600      	movs	r6, #0
 800912c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009130:	f1b9 0901 	subs.w	r9, r9, #1
 8009134:	d505      	bpl.n	8009142 <_fwalk_sglue+0x22>
 8009136:	6824      	ldr	r4, [r4, #0]
 8009138:	2c00      	cmp	r4, #0
 800913a:	d1f7      	bne.n	800912c <_fwalk_sglue+0xc>
 800913c:	4630      	mov	r0, r6
 800913e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d907      	bls.n	8009158 <_fwalk_sglue+0x38>
 8009148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800914c:	3301      	adds	r3, #1
 800914e:	d003      	beq.n	8009158 <_fwalk_sglue+0x38>
 8009150:	4629      	mov	r1, r5
 8009152:	4638      	mov	r0, r7
 8009154:	47c0      	blx	r8
 8009156:	4306      	orrs	r6, r0
 8009158:	3568      	adds	r5, #104	; 0x68
 800915a:	e7e9      	b.n	8009130 <_fwalk_sglue+0x10>

0800915c <__sread>:
 800915c:	b510      	push	{r4, lr}
 800915e:	460c      	mov	r4, r1
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	f000 f978 	bl	8009458 <_read_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	bfab      	itete	ge
 800916c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800916e:	89a3      	ldrhlt	r3, [r4, #12]
 8009170:	181b      	addge	r3, r3, r0
 8009172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009176:	bfac      	ite	ge
 8009178:	6563      	strge	r3, [r4, #84]	; 0x54
 800917a:	81a3      	strhlt	r3, [r4, #12]
 800917c:	bd10      	pop	{r4, pc}

0800917e <__swrite>:
 800917e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009182:	461f      	mov	r7, r3
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	05db      	lsls	r3, r3, #23
 8009188:	4605      	mov	r5, r0
 800918a:	460c      	mov	r4, r1
 800918c:	4616      	mov	r6, r2
 800918e:	d505      	bpl.n	800919c <__swrite+0x1e>
 8009190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009194:	2302      	movs	r3, #2
 8009196:	2200      	movs	r2, #0
 8009198:	f000 f94c 	bl	8009434 <_lseek_r>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	4632      	mov	r2, r6
 80091aa:	463b      	mov	r3, r7
 80091ac:	4628      	mov	r0, r5
 80091ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091b2:	f000 b963 	b.w	800947c <_write_r>

080091b6 <__sseek>:
 80091b6:	b510      	push	{r4, lr}
 80091b8:	460c      	mov	r4, r1
 80091ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091be:	f000 f939 	bl	8009434 <_lseek_r>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	bf15      	itete	ne
 80091c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80091ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091d2:	81a3      	strheq	r3, [r4, #12]
 80091d4:	bf18      	it	ne
 80091d6:	81a3      	strhne	r3, [r4, #12]
 80091d8:	bd10      	pop	{r4, pc}

080091da <__sclose>:
 80091da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091de:	f000 b8c3 	b.w	8009368 <_close_r>

080091e2 <_vsniprintf_r>:
 80091e2:	b530      	push	{r4, r5, lr}
 80091e4:	4614      	mov	r4, r2
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	b09b      	sub	sp, #108	; 0x6c
 80091ea:	4605      	mov	r5, r0
 80091ec:	461a      	mov	r2, r3
 80091ee:	da05      	bge.n	80091fc <_vsniprintf_r+0x1a>
 80091f0:	238b      	movs	r3, #139	; 0x8b
 80091f2:	6003      	str	r3, [r0, #0]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	b01b      	add	sp, #108	; 0x6c
 80091fa:	bd30      	pop	{r4, r5, pc}
 80091fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009200:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009204:	bf14      	ite	ne
 8009206:	f104 33ff 	addne.w	r3, r4, #4294967295
 800920a:	4623      	moveq	r3, r4
 800920c:	9302      	str	r3, [sp, #8]
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009214:	9100      	str	r1, [sp, #0]
 8009216:	9104      	str	r1, [sp, #16]
 8009218:	f8ad 300e 	strh.w	r3, [sp, #14]
 800921c:	4669      	mov	r1, sp
 800921e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009220:	f001 fb1e 	bl	800a860 <_svfiprintf_r>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	bfbc      	itt	lt
 8009228:	238b      	movlt	r3, #139	; 0x8b
 800922a:	602b      	strlt	r3, [r5, #0]
 800922c:	2c00      	cmp	r4, #0
 800922e:	d0e3      	beq.n	80091f8 <_vsniprintf_r+0x16>
 8009230:	9b00      	ldr	r3, [sp, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	e7df      	b.n	80091f8 <_vsniprintf_r+0x16>

08009238 <vsniprintf>:
 8009238:	b507      	push	{r0, r1, r2, lr}
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	4613      	mov	r3, r2
 800923e:	460a      	mov	r2, r1
 8009240:	4601      	mov	r1, r0
 8009242:	4803      	ldr	r0, [pc, #12]	; (8009250 <vsniprintf+0x18>)
 8009244:	6800      	ldr	r0, [r0, #0]
 8009246:	f7ff ffcc 	bl	80091e2 <_vsniprintf_r>
 800924a:	b003      	add	sp, #12
 800924c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009250:	200001d8 	.word	0x200001d8

08009254 <memset>:
 8009254:	4402      	add	r2, r0
 8009256:	4603      	mov	r3, r0
 8009258:	4293      	cmp	r3, r2
 800925a:	d100      	bne.n	800925e <memset+0xa>
 800925c:	4770      	bx	lr
 800925e:	f803 1b01 	strb.w	r1, [r3], #1
 8009262:	e7f9      	b.n	8009258 <memset+0x4>

08009264 <strncmp>:
 8009264:	b510      	push	{r4, lr}
 8009266:	b16a      	cbz	r2, 8009284 <strncmp+0x20>
 8009268:	3901      	subs	r1, #1
 800926a:	1884      	adds	r4, r0, r2
 800926c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009270:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009274:	429a      	cmp	r2, r3
 8009276:	d103      	bne.n	8009280 <strncmp+0x1c>
 8009278:	42a0      	cmp	r0, r4
 800927a:	d001      	beq.n	8009280 <strncmp+0x1c>
 800927c:	2a00      	cmp	r2, #0
 800927e:	d1f5      	bne.n	800926c <strncmp+0x8>
 8009280:	1ad0      	subs	r0, r2, r3
 8009282:	bd10      	pop	{r4, pc}
 8009284:	4610      	mov	r0, r2
 8009286:	e7fc      	b.n	8009282 <strncmp+0x1e>

08009288 <strncpy>:
 8009288:	b510      	push	{r4, lr}
 800928a:	3901      	subs	r1, #1
 800928c:	4603      	mov	r3, r0
 800928e:	b132      	cbz	r2, 800929e <strncpy+0x16>
 8009290:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009294:	f803 4b01 	strb.w	r4, [r3], #1
 8009298:	3a01      	subs	r2, #1
 800929a:	2c00      	cmp	r4, #0
 800929c:	d1f7      	bne.n	800928e <strncpy+0x6>
 800929e:	441a      	add	r2, r3
 80092a0:	2100      	movs	r1, #0
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d100      	bne.n	80092a8 <strncpy+0x20>
 80092a6:	bd10      	pop	{r4, pc}
 80092a8:	f803 1b01 	strb.w	r1, [r3], #1
 80092ac:	e7f9      	b.n	80092a2 <strncpy+0x1a>
	...

080092b0 <strtok>:
 80092b0:	4b16      	ldr	r3, [pc, #88]	; (800930c <strtok+0x5c>)
 80092b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092b4:	681e      	ldr	r6, [r3, #0]
 80092b6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80092b8:	4605      	mov	r5, r0
 80092ba:	b9fc      	cbnz	r4, 80092fc <strtok+0x4c>
 80092bc:	2050      	movs	r0, #80	; 0x50
 80092be:	9101      	str	r1, [sp, #4]
 80092c0:	f000 fcf4 	bl	8009cac <malloc>
 80092c4:	9901      	ldr	r1, [sp, #4]
 80092c6:	6470      	str	r0, [r6, #68]	; 0x44
 80092c8:	4602      	mov	r2, r0
 80092ca:	b920      	cbnz	r0, 80092d6 <strtok+0x26>
 80092cc:	4b10      	ldr	r3, [pc, #64]	; (8009310 <strtok+0x60>)
 80092ce:	4811      	ldr	r0, [pc, #68]	; (8009314 <strtok+0x64>)
 80092d0:	215b      	movs	r1, #91	; 0x5b
 80092d2:	f000 f929 	bl	8009528 <__assert_func>
 80092d6:	e9c0 4400 	strd	r4, r4, [r0]
 80092da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80092de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80092e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80092e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80092ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80092ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80092f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80092f6:	6184      	str	r4, [r0, #24]
 80092f8:	7704      	strb	r4, [r0, #28]
 80092fa:	6244      	str	r4, [r0, #36]	; 0x24
 80092fc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80092fe:	2301      	movs	r3, #1
 8009300:	4628      	mov	r0, r5
 8009302:	b002      	add	sp, #8
 8009304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009308:	f000 b806 	b.w	8009318 <__strtok_r>
 800930c:	200001d8 	.word	0x200001d8
 8009310:	0800b7e1 	.word	0x0800b7e1
 8009314:	0800b7f8 	.word	0x0800b7f8

08009318 <__strtok_r>:
 8009318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931a:	b908      	cbnz	r0, 8009320 <__strtok_r+0x8>
 800931c:	6810      	ldr	r0, [r2, #0]
 800931e:	b188      	cbz	r0, 8009344 <__strtok_r+0x2c>
 8009320:	4604      	mov	r4, r0
 8009322:	4620      	mov	r0, r4
 8009324:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009328:	460f      	mov	r7, r1
 800932a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800932e:	b91e      	cbnz	r6, 8009338 <__strtok_r+0x20>
 8009330:	b965      	cbnz	r5, 800934c <__strtok_r+0x34>
 8009332:	6015      	str	r5, [r2, #0]
 8009334:	4628      	mov	r0, r5
 8009336:	e005      	b.n	8009344 <__strtok_r+0x2c>
 8009338:	42b5      	cmp	r5, r6
 800933a:	d1f6      	bne.n	800932a <__strtok_r+0x12>
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1f0      	bne.n	8009322 <__strtok_r+0xa>
 8009340:	6014      	str	r4, [r2, #0]
 8009342:	7003      	strb	r3, [r0, #0]
 8009344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009346:	461c      	mov	r4, r3
 8009348:	e00c      	b.n	8009364 <__strtok_r+0x4c>
 800934a:	b915      	cbnz	r5, 8009352 <__strtok_r+0x3a>
 800934c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009350:	460e      	mov	r6, r1
 8009352:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009356:	42ab      	cmp	r3, r5
 8009358:	d1f7      	bne.n	800934a <__strtok_r+0x32>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f3      	beq.n	8009346 <__strtok_r+0x2e>
 800935e:	2300      	movs	r3, #0
 8009360:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009364:	6014      	str	r4, [r2, #0]
 8009366:	e7ed      	b.n	8009344 <__strtok_r+0x2c>

08009368 <_close_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	; (8009384 <_close_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f8 f98f 	bl	8001696 <_close>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_close_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_close_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20001f2c 	.word	0x20001f2c

08009388 <_reclaim_reent>:
 8009388:	4b29      	ldr	r3, [pc, #164]	; (8009430 <_reclaim_reent+0xa8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4283      	cmp	r3, r0
 800938e:	b570      	push	{r4, r5, r6, lr}
 8009390:	4604      	mov	r4, r0
 8009392:	d04b      	beq.n	800942c <_reclaim_reent+0xa4>
 8009394:	69c3      	ldr	r3, [r0, #28]
 8009396:	b143      	cbz	r3, 80093aa <_reclaim_reent+0x22>
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d144      	bne.n	8009428 <_reclaim_reent+0xa0>
 800939e:	69e3      	ldr	r3, [r4, #28]
 80093a0:	6819      	ldr	r1, [r3, #0]
 80093a2:	b111      	cbz	r1, 80093aa <_reclaim_reent+0x22>
 80093a4:	4620      	mov	r0, r4
 80093a6:	f000 f8dd 	bl	8009564 <_free_r>
 80093aa:	6961      	ldr	r1, [r4, #20]
 80093ac:	b111      	cbz	r1, 80093b4 <_reclaim_reent+0x2c>
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 f8d8 	bl	8009564 <_free_r>
 80093b4:	69e1      	ldr	r1, [r4, #28]
 80093b6:	b111      	cbz	r1, 80093be <_reclaim_reent+0x36>
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 f8d3 	bl	8009564 <_free_r>
 80093be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80093c0:	b111      	cbz	r1, 80093c8 <_reclaim_reent+0x40>
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 f8ce 	bl	8009564 <_free_r>
 80093c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ca:	b111      	cbz	r1, 80093d2 <_reclaim_reent+0x4a>
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 f8c9 	bl	8009564 <_free_r>
 80093d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80093d4:	b111      	cbz	r1, 80093dc <_reclaim_reent+0x54>
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 f8c4 	bl	8009564 <_free_r>
 80093dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093de:	b111      	cbz	r1, 80093e6 <_reclaim_reent+0x5e>
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 f8bf 	bl	8009564 <_free_r>
 80093e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80093e8:	b111      	cbz	r1, 80093f0 <_reclaim_reent+0x68>
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f8ba 	bl	8009564 <_free_r>
 80093f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80093f2:	b111      	cbz	r1, 80093fa <_reclaim_reent+0x72>
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 f8b5 	bl	8009564 <_free_r>
 80093fa:	6a23      	ldr	r3, [r4, #32]
 80093fc:	b1b3      	cbz	r3, 800942c <_reclaim_reent+0xa4>
 80093fe:	4620      	mov	r0, r4
 8009400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009404:	4718      	bx	r3
 8009406:	5949      	ldr	r1, [r1, r5]
 8009408:	b941      	cbnz	r1, 800941c <_reclaim_reent+0x94>
 800940a:	3504      	adds	r5, #4
 800940c:	69e3      	ldr	r3, [r4, #28]
 800940e:	2d80      	cmp	r5, #128	; 0x80
 8009410:	68d9      	ldr	r1, [r3, #12]
 8009412:	d1f8      	bne.n	8009406 <_reclaim_reent+0x7e>
 8009414:	4620      	mov	r0, r4
 8009416:	f000 f8a5 	bl	8009564 <_free_r>
 800941a:	e7c0      	b.n	800939e <_reclaim_reent+0x16>
 800941c:	680e      	ldr	r6, [r1, #0]
 800941e:	4620      	mov	r0, r4
 8009420:	f000 f8a0 	bl	8009564 <_free_r>
 8009424:	4631      	mov	r1, r6
 8009426:	e7ef      	b.n	8009408 <_reclaim_reent+0x80>
 8009428:	2500      	movs	r5, #0
 800942a:	e7ef      	b.n	800940c <_reclaim_reent+0x84>
 800942c:	bd70      	pop	{r4, r5, r6, pc}
 800942e:	bf00      	nop
 8009430:	200001d8 	.word	0x200001d8

08009434 <_lseek_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d07      	ldr	r5, [pc, #28]	; (8009454 <_lseek_r+0x20>)
 8009438:	4604      	mov	r4, r0
 800943a:	4608      	mov	r0, r1
 800943c:	4611      	mov	r1, r2
 800943e:	2200      	movs	r2, #0
 8009440:	602a      	str	r2, [r5, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	f7f8 f94e 	bl	80016e4 <_lseek>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_lseek_r+0x1e>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_lseek_r+0x1e>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20001f2c 	.word	0x20001f2c

08009458 <_read_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4d07      	ldr	r5, [pc, #28]	; (8009478 <_read_r+0x20>)
 800945c:	4604      	mov	r4, r0
 800945e:	4608      	mov	r0, r1
 8009460:	4611      	mov	r1, r2
 8009462:	2200      	movs	r2, #0
 8009464:	602a      	str	r2, [r5, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f7f8 f8dc 	bl	8001624 <_read>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_read_r+0x1e>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_read_r+0x1e>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	20001f2c 	.word	0x20001f2c

0800947c <_write_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	; (800949c <_write_r+0x20>)
 8009480:	4604      	mov	r4, r0
 8009482:	4608      	mov	r0, r1
 8009484:	4611      	mov	r1, r2
 8009486:	2200      	movs	r2, #0
 8009488:	602a      	str	r2, [r5, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	f7f8 f8e7 	bl	800165e <_write>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_write_r+0x1e>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_write_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	20001f2c 	.word	0x20001f2c

080094a0 <__errno>:
 80094a0:	4b01      	ldr	r3, [pc, #4]	; (80094a8 <__errno+0x8>)
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	200001d8 	.word	0x200001d8

080094ac <__libc_init_array>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	4d0d      	ldr	r5, [pc, #52]	; (80094e4 <__libc_init_array+0x38>)
 80094b0:	4c0d      	ldr	r4, [pc, #52]	; (80094e8 <__libc_init_array+0x3c>)
 80094b2:	1b64      	subs	r4, r4, r5
 80094b4:	10a4      	asrs	r4, r4, #2
 80094b6:	2600      	movs	r6, #0
 80094b8:	42a6      	cmp	r6, r4
 80094ba:	d109      	bne.n	80094d0 <__libc_init_array+0x24>
 80094bc:	4d0b      	ldr	r5, [pc, #44]	; (80094ec <__libc_init_array+0x40>)
 80094be:	4c0c      	ldr	r4, [pc, #48]	; (80094f0 <__libc_init_array+0x44>)
 80094c0:	f002 f83c 	bl	800b53c <_init>
 80094c4:	1b64      	subs	r4, r4, r5
 80094c6:	10a4      	asrs	r4, r4, #2
 80094c8:	2600      	movs	r6, #0
 80094ca:	42a6      	cmp	r6, r4
 80094cc:	d105      	bne.n	80094da <__libc_init_array+0x2e>
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d4:	4798      	blx	r3
 80094d6:	3601      	adds	r6, #1
 80094d8:	e7ee      	b.n	80094b8 <__libc_init_array+0xc>
 80094da:	f855 3b04 	ldr.w	r3, [r5], #4
 80094de:	4798      	blx	r3
 80094e0:	3601      	adds	r6, #1
 80094e2:	e7f2      	b.n	80094ca <__libc_init_array+0x1e>
 80094e4:	0800ba90 	.word	0x0800ba90
 80094e8:	0800ba90 	.word	0x0800ba90
 80094ec:	0800ba90 	.word	0x0800ba90
 80094f0:	0800ba94 	.word	0x0800ba94

080094f4 <__retarget_lock_init_recursive>:
 80094f4:	4770      	bx	lr

080094f6 <__retarget_lock_acquire_recursive>:
 80094f6:	4770      	bx	lr

080094f8 <__retarget_lock_release_recursive>:
 80094f8:	4770      	bx	lr

080094fa <memcpy>:
 80094fa:	440a      	add	r2, r1
 80094fc:	4291      	cmp	r1, r2
 80094fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009502:	d100      	bne.n	8009506 <memcpy+0xc>
 8009504:	4770      	bx	lr
 8009506:	b510      	push	{r4, lr}
 8009508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800950c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009510:	4291      	cmp	r1, r2
 8009512:	d1f9      	bne.n	8009508 <memcpy+0xe>
 8009514:	bd10      	pop	{r4, pc}
	...

08009518 <nan>:
 8009518:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009520 <nan+0x8>
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	00000000 	.word	0x00000000
 8009524:	7ff80000 	.word	0x7ff80000

08009528 <__assert_func>:
 8009528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800952a:	4614      	mov	r4, r2
 800952c:	461a      	mov	r2, r3
 800952e:	4b09      	ldr	r3, [pc, #36]	; (8009554 <__assert_func+0x2c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4605      	mov	r5, r0
 8009534:	68d8      	ldr	r0, [r3, #12]
 8009536:	b14c      	cbz	r4, 800954c <__assert_func+0x24>
 8009538:	4b07      	ldr	r3, [pc, #28]	; (8009558 <__assert_func+0x30>)
 800953a:	9100      	str	r1, [sp, #0]
 800953c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009540:	4906      	ldr	r1, [pc, #24]	; (800955c <__assert_func+0x34>)
 8009542:	462b      	mov	r3, r5
 8009544:	f001 fcc8 	bl	800aed8 <fiprintf>
 8009548:	f001 fd02 	bl	800af50 <abort>
 800954c:	4b04      	ldr	r3, [pc, #16]	; (8009560 <__assert_func+0x38>)
 800954e:	461c      	mov	r4, r3
 8009550:	e7f3      	b.n	800953a <__assert_func+0x12>
 8009552:	bf00      	nop
 8009554:	200001d8 	.word	0x200001d8
 8009558:	0800b85a 	.word	0x0800b85a
 800955c:	0800b867 	.word	0x0800b867
 8009560:	0800b895 	.word	0x0800b895

08009564 <_free_r>:
 8009564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009566:	2900      	cmp	r1, #0
 8009568:	d044      	beq.n	80095f4 <_free_r+0x90>
 800956a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800956e:	9001      	str	r0, [sp, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f1a1 0404 	sub.w	r4, r1, #4
 8009576:	bfb8      	it	lt
 8009578:	18e4      	addlt	r4, r4, r3
 800957a:	f000 fc51 	bl	8009e20 <__malloc_lock>
 800957e:	4a1e      	ldr	r2, [pc, #120]	; (80095f8 <_free_r+0x94>)
 8009580:	9801      	ldr	r0, [sp, #4]
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	b933      	cbnz	r3, 8009594 <_free_r+0x30>
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	6014      	str	r4, [r2, #0]
 800958a:	b003      	add	sp, #12
 800958c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009590:	f000 bc4c 	b.w	8009e2c <__malloc_unlock>
 8009594:	42a3      	cmp	r3, r4
 8009596:	d908      	bls.n	80095aa <_free_r+0x46>
 8009598:	6825      	ldr	r5, [r4, #0]
 800959a:	1961      	adds	r1, r4, r5
 800959c:	428b      	cmp	r3, r1
 800959e:	bf01      	itttt	eq
 80095a0:	6819      	ldreq	r1, [r3, #0]
 80095a2:	685b      	ldreq	r3, [r3, #4]
 80095a4:	1949      	addeq	r1, r1, r5
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	e7ed      	b.n	8009586 <_free_r+0x22>
 80095aa:	461a      	mov	r2, r3
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	b10b      	cbz	r3, 80095b4 <_free_r+0x50>
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	d9fa      	bls.n	80095aa <_free_r+0x46>
 80095b4:	6811      	ldr	r1, [r2, #0]
 80095b6:	1855      	adds	r5, r2, r1
 80095b8:	42a5      	cmp	r5, r4
 80095ba:	d10b      	bne.n	80095d4 <_free_r+0x70>
 80095bc:	6824      	ldr	r4, [r4, #0]
 80095be:	4421      	add	r1, r4
 80095c0:	1854      	adds	r4, r2, r1
 80095c2:	42a3      	cmp	r3, r4
 80095c4:	6011      	str	r1, [r2, #0]
 80095c6:	d1e0      	bne.n	800958a <_free_r+0x26>
 80095c8:	681c      	ldr	r4, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	6053      	str	r3, [r2, #4]
 80095ce:	440c      	add	r4, r1
 80095d0:	6014      	str	r4, [r2, #0]
 80095d2:	e7da      	b.n	800958a <_free_r+0x26>
 80095d4:	d902      	bls.n	80095dc <_free_r+0x78>
 80095d6:	230c      	movs	r3, #12
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	e7d6      	b.n	800958a <_free_r+0x26>
 80095dc:	6825      	ldr	r5, [r4, #0]
 80095de:	1961      	adds	r1, r4, r5
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf04      	itt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	6063      	str	r3, [r4, #4]
 80095ea:	bf04      	itt	eq
 80095ec:	1949      	addeq	r1, r1, r5
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	6054      	str	r4, [r2, #4]
 80095f2:	e7ca      	b.n	800958a <_free_r+0x26>
 80095f4:	b003      	add	sp, #12
 80095f6:	bd30      	pop	{r4, r5, pc}
 80095f8:	20001f34 	.word	0x20001f34

080095fc <rshift>:
 80095fc:	6903      	ldr	r3, [r0, #16]
 80095fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009606:	ea4f 1261 	mov.w	r2, r1, asr #5
 800960a:	f100 0414 	add.w	r4, r0, #20
 800960e:	dd45      	ble.n	800969c <rshift+0xa0>
 8009610:	f011 011f 	ands.w	r1, r1, #31
 8009614:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009618:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800961c:	d10c      	bne.n	8009638 <rshift+0x3c>
 800961e:	f100 0710 	add.w	r7, r0, #16
 8009622:	4629      	mov	r1, r5
 8009624:	42b1      	cmp	r1, r6
 8009626:	d334      	bcc.n	8009692 <rshift+0x96>
 8009628:	1a9b      	subs	r3, r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	1eea      	subs	r2, r5, #3
 800962e:	4296      	cmp	r6, r2
 8009630:	bf38      	it	cc
 8009632:	2300      	movcc	r3, #0
 8009634:	4423      	add	r3, r4
 8009636:	e015      	b.n	8009664 <rshift+0x68>
 8009638:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800963c:	f1c1 0820 	rsb	r8, r1, #32
 8009640:	40cf      	lsrs	r7, r1
 8009642:	f105 0e04 	add.w	lr, r5, #4
 8009646:	46a1      	mov	r9, r4
 8009648:	4576      	cmp	r6, lr
 800964a:	46f4      	mov	ip, lr
 800964c:	d815      	bhi.n	800967a <rshift+0x7e>
 800964e:	1a9a      	subs	r2, r3, r2
 8009650:	0092      	lsls	r2, r2, #2
 8009652:	3a04      	subs	r2, #4
 8009654:	3501      	adds	r5, #1
 8009656:	42ae      	cmp	r6, r5
 8009658:	bf38      	it	cc
 800965a:	2200      	movcc	r2, #0
 800965c:	18a3      	adds	r3, r4, r2
 800965e:	50a7      	str	r7, [r4, r2]
 8009660:	b107      	cbz	r7, 8009664 <rshift+0x68>
 8009662:	3304      	adds	r3, #4
 8009664:	1b1a      	subs	r2, r3, r4
 8009666:	42a3      	cmp	r3, r4
 8009668:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800966c:	bf08      	it	eq
 800966e:	2300      	moveq	r3, #0
 8009670:	6102      	str	r2, [r0, #16]
 8009672:	bf08      	it	eq
 8009674:	6143      	streq	r3, [r0, #20]
 8009676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800967a:	f8dc c000 	ldr.w	ip, [ip]
 800967e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009682:	ea4c 0707 	orr.w	r7, ip, r7
 8009686:	f849 7b04 	str.w	r7, [r9], #4
 800968a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800968e:	40cf      	lsrs	r7, r1
 8009690:	e7da      	b.n	8009648 <rshift+0x4c>
 8009692:	f851 cb04 	ldr.w	ip, [r1], #4
 8009696:	f847 cf04 	str.w	ip, [r7, #4]!
 800969a:	e7c3      	b.n	8009624 <rshift+0x28>
 800969c:	4623      	mov	r3, r4
 800969e:	e7e1      	b.n	8009664 <rshift+0x68>

080096a0 <__hexdig_fun>:
 80096a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096a4:	2b09      	cmp	r3, #9
 80096a6:	d802      	bhi.n	80096ae <__hexdig_fun+0xe>
 80096a8:	3820      	subs	r0, #32
 80096aa:	b2c0      	uxtb	r0, r0
 80096ac:	4770      	bx	lr
 80096ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	d801      	bhi.n	80096ba <__hexdig_fun+0x1a>
 80096b6:	3847      	subs	r0, #71	; 0x47
 80096b8:	e7f7      	b.n	80096aa <__hexdig_fun+0xa>
 80096ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096be:	2b05      	cmp	r3, #5
 80096c0:	d801      	bhi.n	80096c6 <__hexdig_fun+0x26>
 80096c2:	3827      	subs	r0, #39	; 0x27
 80096c4:	e7f1      	b.n	80096aa <__hexdig_fun+0xa>
 80096c6:	2000      	movs	r0, #0
 80096c8:	4770      	bx	lr
	...

080096cc <__gethex>:
 80096cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d0:	4617      	mov	r7, r2
 80096d2:	680a      	ldr	r2, [r1, #0]
 80096d4:	b085      	sub	sp, #20
 80096d6:	f102 0b02 	add.w	fp, r2, #2
 80096da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80096de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80096e2:	4681      	mov	r9, r0
 80096e4:	468a      	mov	sl, r1
 80096e6:	9302      	str	r3, [sp, #8]
 80096e8:	32fe      	adds	r2, #254	; 0xfe
 80096ea:	eb02 030b 	add.w	r3, r2, fp
 80096ee:	46d8      	mov	r8, fp
 80096f0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	2830      	cmp	r0, #48	; 0x30
 80096f8:	d0f7      	beq.n	80096ea <__gethex+0x1e>
 80096fa:	f7ff ffd1 	bl	80096a0 <__hexdig_fun>
 80096fe:	4604      	mov	r4, r0
 8009700:	2800      	cmp	r0, #0
 8009702:	d138      	bne.n	8009776 <__gethex+0xaa>
 8009704:	49a7      	ldr	r1, [pc, #668]	; (80099a4 <__gethex+0x2d8>)
 8009706:	2201      	movs	r2, #1
 8009708:	4640      	mov	r0, r8
 800970a:	f7ff fdab 	bl	8009264 <strncmp>
 800970e:	4606      	mov	r6, r0
 8009710:	2800      	cmp	r0, #0
 8009712:	d169      	bne.n	80097e8 <__gethex+0x11c>
 8009714:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009718:	465d      	mov	r5, fp
 800971a:	f7ff ffc1 	bl	80096a0 <__hexdig_fun>
 800971e:	2800      	cmp	r0, #0
 8009720:	d064      	beq.n	80097ec <__gethex+0x120>
 8009722:	465a      	mov	r2, fp
 8009724:	7810      	ldrb	r0, [r2, #0]
 8009726:	2830      	cmp	r0, #48	; 0x30
 8009728:	4690      	mov	r8, r2
 800972a:	f102 0201 	add.w	r2, r2, #1
 800972e:	d0f9      	beq.n	8009724 <__gethex+0x58>
 8009730:	f7ff ffb6 	bl	80096a0 <__hexdig_fun>
 8009734:	2301      	movs	r3, #1
 8009736:	fab0 f480 	clz	r4, r0
 800973a:	0964      	lsrs	r4, r4, #5
 800973c:	465e      	mov	r6, fp
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	4642      	mov	r2, r8
 8009742:	4615      	mov	r5, r2
 8009744:	3201      	adds	r2, #1
 8009746:	7828      	ldrb	r0, [r5, #0]
 8009748:	f7ff ffaa 	bl	80096a0 <__hexdig_fun>
 800974c:	2800      	cmp	r0, #0
 800974e:	d1f8      	bne.n	8009742 <__gethex+0x76>
 8009750:	4994      	ldr	r1, [pc, #592]	; (80099a4 <__gethex+0x2d8>)
 8009752:	2201      	movs	r2, #1
 8009754:	4628      	mov	r0, r5
 8009756:	f7ff fd85 	bl	8009264 <strncmp>
 800975a:	b978      	cbnz	r0, 800977c <__gethex+0xb0>
 800975c:	b946      	cbnz	r6, 8009770 <__gethex+0xa4>
 800975e:	1c6e      	adds	r6, r5, #1
 8009760:	4632      	mov	r2, r6
 8009762:	4615      	mov	r5, r2
 8009764:	3201      	adds	r2, #1
 8009766:	7828      	ldrb	r0, [r5, #0]
 8009768:	f7ff ff9a 	bl	80096a0 <__hexdig_fun>
 800976c:	2800      	cmp	r0, #0
 800976e:	d1f8      	bne.n	8009762 <__gethex+0x96>
 8009770:	1b73      	subs	r3, r6, r5
 8009772:	009e      	lsls	r6, r3, #2
 8009774:	e004      	b.n	8009780 <__gethex+0xb4>
 8009776:	2400      	movs	r4, #0
 8009778:	4626      	mov	r6, r4
 800977a:	e7e1      	b.n	8009740 <__gethex+0x74>
 800977c:	2e00      	cmp	r6, #0
 800977e:	d1f7      	bne.n	8009770 <__gethex+0xa4>
 8009780:	782b      	ldrb	r3, [r5, #0]
 8009782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009786:	2b50      	cmp	r3, #80	; 0x50
 8009788:	d13d      	bne.n	8009806 <__gethex+0x13a>
 800978a:	786b      	ldrb	r3, [r5, #1]
 800978c:	2b2b      	cmp	r3, #43	; 0x2b
 800978e:	d02f      	beq.n	80097f0 <__gethex+0x124>
 8009790:	2b2d      	cmp	r3, #45	; 0x2d
 8009792:	d031      	beq.n	80097f8 <__gethex+0x12c>
 8009794:	1c69      	adds	r1, r5, #1
 8009796:	f04f 0b00 	mov.w	fp, #0
 800979a:	7808      	ldrb	r0, [r1, #0]
 800979c:	f7ff ff80 	bl	80096a0 <__hexdig_fun>
 80097a0:	1e42      	subs	r2, r0, #1
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	2a18      	cmp	r2, #24
 80097a6:	d82e      	bhi.n	8009806 <__gethex+0x13a>
 80097a8:	f1a0 0210 	sub.w	r2, r0, #16
 80097ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097b0:	f7ff ff76 	bl	80096a0 <__hexdig_fun>
 80097b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80097b8:	fa5f fc8c 	uxtb.w	ip, ip
 80097bc:	f1bc 0f18 	cmp.w	ip, #24
 80097c0:	d91d      	bls.n	80097fe <__gethex+0x132>
 80097c2:	f1bb 0f00 	cmp.w	fp, #0
 80097c6:	d000      	beq.n	80097ca <__gethex+0xfe>
 80097c8:	4252      	negs	r2, r2
 80097ca:	4416      	add	r6, r2
 80097cc:	f8ca 1000 	str.w	r1, [sl]
 80097d0:	b1dc      	cbz	r4, 800980a <__gethex+0x13e>
 80097d2:	9b01      	ldr	r3, [sp, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bf14      	ite	ne
 80097d8:	f04f 0800 	movne.w	r8, #0
 80097dc:	f04f 0806 	moveq.w	r8, #6
 80097e0:	4640      	mov	r0, r8
 80097e2:	b005      	add	sp, #20
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	4645      	mov	r5, r8
 80097ea:	4626      	mov	r6, r4
 80097ec:	2401      	movs	r4, #1
 80097ee:	e7c7      	b.n	8009780 <__gethex+0xb4>
 80097f0:	f04f 0b00 	mov.w	fp, #0
 80097f4:	1ca9      	adds	r1, r5, #2
 80097f6:	e7d0      	b.n	800979a <__gethex+0xce>
 80097f8:	f04f 0b01 	mov.w	fp, #1
 80097fc:	e7fa      	b.n	80097f4 <__gethex+0x128>
 80097fe:	230a      	movs	r3, #10
 8009800:	fb03 0002 	mla	r0, r3, r2, r0
 8009804:	e7d0      	b.n	80097a8 <__gethex+0xdc>
 8009806:	4629      	mov	r1, r5
 8009808:	e7e0      	b.n	80097cc <__gethex+0x100>
 800980a:	eba5 0308 	sub.w	r3, r5, r8
 800980e:	3b01      	subs	r3, #1
 8009810:	4621      	mov	r1, r4
 8009812:	2b07      	cmp	r3, #7
 8009814:	dc0a      	bgt.n	800982c <__gethex+0x160>
 8009816:	4648      	mov	r0, r9
 8009818:	f000 fb0e 	bl	8009e38 <_Balloc>
 800981c:	4604      	mov	r4, r0
 800981e:	b940      	cbnz	r0, 8009832 <__gethex+0x166>
 8009820:	4b61      	ldr	r3, [pc, #388]	; (80099a8 <__gethex+0x2dc>)
 8009822:	4602      	mov	r2, r0
 8009824:	21e4      	movs	r1, #228	; 0xe4
 8009826:	4861      	ldr	r0, [pc, #388]	; (80099ac <__gethex+0x2e0>)
 8009828:	f7ff fe7e 	bl	8009528 <__assert_func>
 800982c:	3101      	adds	r1, #1
 800982e:	105b      	asrs	r3, r3, #1
 8009830:	e7ef      	b.n	8009812 <__gethex+0x146>
 8009832:	f100 0a14 	add.w	sl, r0, #20
 8009836:	2300      	movs	r3, #0
 8009838:	495a      	ldr	r1, [pc, #360]	; (80099a4 <__gethex+0x2d8>)
 800983a:	f8cd a004 	str.w	sl, [sp, #4]
 800983e:	469b      	mov	fp, r3
 8009840:	45a8      	cmp	r8, r5
 8009842:	d342      	bcc.n	80098ca <__gethex+0x1fe>
 8009844:	9801      	ldr	r0, [sp, #4]
 8009846:	f840 bb04 	str.w	fp, [r0], #4
 800984a:	eba0 000a 	sub.w	r0, r0, sl
 800984e:	1080      	asrs	r0, r0, #2
 8009850:	6120      	str	r0, [r4, #16]
 8009852:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009856:	4658      	mov	r0, fp
 8009858:	f000 fbe0 	bl	800a01c <__hi0bits>
 800985c:	683d      	ldr	r5, [r7, #0]
 800985e:	eba8 0000 	sub.w	r0, r8, r0
 8009862:	42a8      	cmp	r0, r5
 8009864:	dd59      	ble.n	800991a <__gethex+0x24e>
 8009866:	eba0 0805 	sub.w	r8, r0, r5
 800986a:	4641      	mov	r1, r8
 800986c:	4620      	mov	r0, r4
 800986e:	f000 ff6f 	bl	800a750 <__any_on>
 8009872:	4683      	mov	fp, r0
 8009874:	b1b8      	cbz	r0, 80098a6 <__gethex+0x1da>
 8009876:	f108 33ff 	add.w	r3, r8, #4294967295
 800987a:	1159      	asrs	r1, r3, #5
 800987c:	f003 021f 	and.w	r2, r3, #31
 8009880:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009884:	f04f 0b01 	mov.w	fp, #1
 8009888:	fa0b f202 	lsl.w	r2, fp, r2
 800988c:	420a      	tst	r2, r1
 800988e:	d00a      	beq.n	80098a6 <__gethex+0x1da>
 8009890:	455b      	cmp	r3, fp
 8009892:	dd06      	ble.n	80098a2 <__gethex+0x1d6>
 8009894:	f1a8 0102 	sub.w	r1, r8, #2
 8009898:	4620      	mov	r0, r4
 800989a:	f000 ff59 	bl	800a750 <__any_on>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d138      	bne.n	8009914 <__gethex+0x248>
 80098a2:	f04f 0b02 	mov.w	fp, #2
 80098a6:	4641      	mov	r1, r8
 80098a8:	4620      	mov	r0, r4
 80098aa:	f7ff fea7 	bl	80095fc <rshift>
 80098ae:	4446      	add	r6, r8
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	42b3      	cmp	r3, r6
 80098b4:	da41      	bge.n	800993a <__gethex+0x26e>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4648      	mov	r0, r9
 80098ba:	f000 fafd 	bl	8009eb8 <_Bfree>
 80098be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098c0:	2300      	movs	r3, #0
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80098c8:	e78a      	b.n	80097e0 <__gethex+0x114>
 80098ca:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80098ce:	2a2e      	cmp	r2, #46	; 0x2e
 80098d0:	d014      	beq.n	80098fc <__gethex+0x230>
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	d106      	bne.n	80098e4 <__gethex+0x218>
 80098d6:	9b01      	ldr	r3, [sp, #4]
 80098d8:	f843 bb04 	str.w	fp, [r3], #4
 80098dc:	f04f 0b00 	mov.w	fp, #0
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	465b      	mov	r3, fp
 80098e4:	7828      	ldrb	r0, [r5, #0]
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	f7ff feda 	bl	80096a0 <__hexdig_fun>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	f000 000f 	and.w	r0, r0, #15
 80098f2:	4098      	lsls	r0, r3
 80098f4:	ea4b 0b00 	orr.w	fp, fp, r0
 80098f8:	3304      	adds	r3, #4
 80098fa:	e7a1      	b.n	8009840 <__gethex+0x174>
 80098fc:	45a8      	cmp	r8, r5
 80098fe:	d8e8      	bhi.n	80098d2 <__gethex+0x206>
 8009900:	2201      	movs	r2, #1
 8009902:	4628      	mov	r0, r5
 8009904:	9303      	str	r3, [sp, #12]
 8009906:	f7ff fcad 	bl	8009264 <strncmp>
 800990a:	4926      	ldr	r1, [pc, #152]	; (80099a4 <__gethex+0x2d8>)
 800990c:	9b03      	ldr	r3, [sp, #12]
 800990e:	2800      	cmp	r0, #0
 8009910:	d1df      	bne.n	80098d2 <__gethex+0x206>
 8009912:	e795      	b.n	8009840 <__gethex+0x174>
 8009914:	f04f 0b03 	mov.w	fp, #3
 8009918:	e7c5      	b.n	80098a6 <__gethex+0x1da>
 800991a:	da0b      	bge.n	8009934 <__gethex+0x268>
 800991c:	eba5 0800 	sub.w	r8, r5, r0
 8009920:	4621      	mov	r1, r4
 8009922:	4642      	mov	r2, r8
 8009924:	4648      	mov	r0, r9
 8009926:	f000 fce1 	bl	800a2ec <__lshift>
 800992a:	eba6 0608 	sub.w	r6, r6, r8
 800992e:	4604      	mov	r4, r0
 8009930:	f100 0a14 	add.w	sl, r0, #20
 8009934:	f04f 0b00 	mov.w	fp, #0
 8009938:	e7ba      	b.n	80098b0 <__gethex+0x1e4>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	42b3      	cmp	r3, r6
 800993e:	dd73      	ble.n	8009a28 <__gethex+0x35c>
 8009940:	1b9e      	subs	r6, r3, r6
 8009942:	42b5      	cmp	r5, r6
 8009944:	dc34      	bgt.n	80099b0 <__gethex+0x2e4>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d023      	beq.n	8009994 <__gethex+0x2c8>
 800994c:	2b03      	cmp	r3, #3
 800994e:	d025      	beq.n	800999c <__gethex+0x2d0>
 8009950:	2b01      	cmp	r3, #1
 8009952:	d115      	bne.n	8009980 <__gethex+0x2b4>
 8009954:	42b5      	cmp	r5, r6
 8009956:	d113      	bne.n	8009980 <__gethex+0x2b4>
 8009958:	2d01      	cmp	r5, #1
 800995a:	d10b      	bne.n	8009974 <__gethex+0x2a8>
 800995c:	9a02      	ldr	r2, [sp, #8]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	2301      	movs	r3, #1
 8009964:	6123      	str	r3, [r4, #16]
 8009966:	f8ca 3000 	str.w	r3, [sl]
 800996a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800996c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009970:	601c      	str	r4, [r3, #0]
 8009972:	e735      	b.n	80097e0 <__gethex+0x114>
 8009974:	1e69      	subs	r1, r5, #1
 8009976:	4620      	mov	r0, r4
 8009978:	f000 feea 	bl	800a750 <__any_on>
 800997c:	2800      	cmp	r0, #0
 800997e:	d1ed      	bne.n	800995c <__gethex+0x290>
 8009980:	4621      	mov	r1, r4
 8009982:	4648      	mov	r0, r9
 8009984:	f000 fa98 	bl	8009eb8 <_Bfree>
 8009988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800998a:	2300      	movs	r3, #0
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009992:	e725      	b.n	80097e0 <__gethex+0x114>
 8009994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f2      	bne.n	8009980 <__gethex+0x2b4>
 800999a:	e7df      	b.n	800995c <__gethex+0x290>
 800999c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1dc      	bne.n	800995c <__gethex+0x290>
 80099a2:	e7ed      	b.n	8009980 <__gethex+0x2b4>
 80099a4:	0800b67c 	.word	0x0800b67c
 80099a8:	0800b896 	.word	0x0800b896
 80099ac:	0800b8a7 	.word	0x0800b8a7
 80099b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80099b4:	f1bb 0f00 	cmp.w	fp, #0
 80099b8:	d133      	bne.n	8009a22 <__gethex+0x356>
 80099ba:	f1b8 0f00 	cmp.w	r8, #0
 80099be:	d004      	beq.n	80099ca <__gethex+0x2fe>
 80099c0:	4641      	mov	r1, r8
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 fec4 	bl	800a750 <__any_on>
 80099c8:	4683      	mov	fp, r0
 80099ca:	ea4f 1268 	mov.w	r2, r8, asr #5
 80099ce:	2301      	movs	r3, #1
 80099d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099d4:	f008 081f 	and.w	r8, r8, #31
 80099d8:	fa03 f308 	lsl.w	r3, r3, r8
 80099dc:	4213      	tst	r3, r2
 80099de:	4631      	mov	r1, r6
 80099e0:	4620      	mov	r0, r4
 80099e2:	bf18      	it	ne
 80099e4:	f04b 0b02 	orrne.w	fp, fp, #2
 80099e8:	1bad      	subs	r5, r5, r6
 80099ea:	f7ff fe07 	bl	80095fc <rshift>
 80099ee:	687e      	ldr	r6, [r7, #4]
 80099f0:	f04f 0802 	mov.w	r8, #2
 80099f4:	f1bb 0f00 	cmp.w	fp, #0
 80099f8:	d04a      	beq.n	8009a90 <__gethex+0x3c4>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d016      	beq.n	8009a2e <__gethex+0x362>
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d018      	beq.n	8009a36 <__gethex+0x36a>
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d109      	bne.n	8009a1c <__gethex+0x350>
 8009a08:	f01b 0f02 	tst.w	fp, #2
 8009a0c:	d006      	beq.n	8009a1c <__gethex+0x350>
 8009a0e:	f8da 3000 	ldr.w	r3, [sl]
 8009a12:	ea4b 0b03 	orr.w	fp, fp, r3
 8009a16:	f01b 0f01 	tst.w	fp, #1
 8009a1a:	d10f      	bne.n	8009a3c <__gethex+0x370>
 8009a1c:	f048 0810 	orr.w	r8, r8, #16
 8009a20:	e036      	b.n	8009a90 <__gethex+0x3c4>
 8009a22:	f04f 0b01 	mov.w	fp, #1
 8009a26:	e7d0      	b.n	80099ca <__gethex+0x2fe>
 8009a28:	f04f 0801 	mov.w	r8, #1
 8009a2c:	e7e2      	b.n	80099f4 <__gethex+0x328>
 8009a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a30:	f1c3 0301 	rsb	r3, r3, #1
 8009a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0ef      	beq.n	8009a1c <__gethex+0x350>
 8009a3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a40:	f104 0214 	add.w	r2, r4, #20
 8009a44:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4694      	mov	ip, r2
 8009a52:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a56:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009a5a:	d01e      	beq.n	8009a9a <__gethex+0x3ce>
 8009a5c:	3101      	adds	r1, #1
 8009a5e:	f8cc 1000 	str.w	r1, [ip]
 8009a62:	f1b8 0f02 	cmp.w	r8, #2
 8009a66:	f104 0214 	add.w	r2, r4, #20
 8009a6a:	d13d      	bne.n	8009ae8 <__gethex+0x41c>
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	42ab      	cmp	r3, r5
 8009a72:	d10b      	bne.n	8009a8c <__gethex+0x3c0>
 8009a74:	1169      	asrs	r1, r5, #5
 8009a76:	2301      	movs	r3, #1
 8009a78:	f005 051f 	and.w	r5, r5, #31
 8009a7c:	fa03 f505 	lsl.w	r5, r3, r5
 8009a80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a84:	421d      	tst	r5, r3
 8009a86:	bf18      	it	ne
 8009a88:	f04f 0801 	movne.w	r8, #1
 8009a8c:	f048 0820 	orr.w	r8, r8, #32
 8009a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a92:	601c      	str	r4, [r3, #0]
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	601e      	str	r6, [r3, #0]
 8009a98:	e6a2      	b.n	80097e0 <__gethex+0x114>
 8009a9a:	4290      	cmp	r0, r2
 8009a9c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009aa0:	d8d6      	bhi.n	8009a50 <__gethex+0x384>
 8009aa2:	68a2      	ldr	r2, [r4, #8]
 8009aa4:	4593      	cmp	fp, r2
 8009aa6:	db17      	blt.n	8009ad8 <__gethex+0x40c>
 8009aa8:	6861      	ldr	r1, [r4, #4]
 8009aaa:	4648      	mov	r0, r9
 8009aac:	3101      	adds	r1, #1
 8009aae:	f000 f9c3 	bl	8009e38 <_Balloc>
 8009ab2:	4682      	mov	sl, r0
 8009ab4:	b918      	cbnz	r0, 8009abe <__gethex+0x3f2>
 8009ab6:	4b1b      	ldr	r3, [pc, #108]	; (8009b24 <__gethex+0x458>)
 8009ab8:	4602      	mov	r2, r0
 8009aba:	2184      	movs	r1, #132	; 0x84
 8009abc:	e6b3      	b.n	8009826 <__gethex+0x15a>
 8009abe:	6922      	ldr	r2, [r4, #16]
 8009ac0:	3202      	adds	r2, #2
 8009ac2:	f104 010c 	add.w	r1, r4, #12
 8009ac6:	0092      	lsls	r2, r2, #2
 8009ac8:	300c      	adds	r0, #12
 8009aca:	f7ff fd16 	bl	80094fa <memcpy>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f000 f9f1 	bl	8009eb8 <_Bfree>
 8009ad6:	4654      	mov	r4, sl
 8009ad8:	6922      	ldr	r2, [r4, #16]
 8009ada:	1c51      	adds	r1, r2, #1
 8009adc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ae0:	6121      	str	r1, [r4, #16]
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	6151      	str	r1, [r2, #20]
 8009ae6:	e7bc      	b.n	8009a62 <__gethex+0x396>
 8009ae8:	6921      	ldr	r1, [r4, #16]
 8009aea:	4559      	cmp	r1, fp
 8009aec:	dd0b      	ble.n	8009b06 <__gethex+0x43a>
 8009aee:	2101      	movs	r1, #1
 8009af0:	4620      	mov	r0, r4
 8009af2:	f7ff fd83 	bl	80095fc <rshift>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	3601      	adds	r6, #1
 8009afa:	42b3      	cmp	r3, r6
 8009afc:	f6ff aedb 	blt.w	80098b6 <__gethex+0x1ea>
 8009b00:	f04f 0801 	mov.w	r8, #1
 8009b04:	e7c2      	b.n	8009a8c <__gethex+0x3c0>
 8009b06:	f015 051f 	ands.w	r5, r5, #31
 8009b0a:	d0f9      	beq.n	8009b00 <__gethex+0x434>
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	441a      	add	r2, r3
 8009b10:	f1c5 0520 	rsb	r5, r5, #32
 8009b14:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009b18:	f000 fa80 	bl	800a01c <__hi0bits>
 8009b1c:	42a8      	cmp	r0, r5
 8009b1e:	dbe6      	blt.n	8009aee <__gethex+0x422>
 8009b20:	e7ee      	b.n	8009b00 <__gethex+0x434>
 8009b22:	bf00      	nop
 8009b24:	0800b896 	.word	0x0800b896

08009b28 <L_shift>:
 8009b28:	f1c2 0208 	rsb	r2, r2, #8
 8009b2c:	0092      	lsls	r2, r2, #2
 8009b2e:	b570      	push	{r4, r5, r6, lr}
 8009b30:	f1c2 0620 	rsb	r6, r2, #32
 8009b34:	6843      	ldr	r3, [r0, #4]
 8009b36:	6804      	ldr	r4, [r0, #0]
 8009b38:	fa03 f506 	lsl.w	r5, r3, r6
 8009b3c:	432c      	orrs	r4, r5
 8009b3e:	40d3      	lsrs	r3, r2
 8009b40:	6004      	str	r4, [r0, #0]
 8009b42:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b46:	4288      	cmp	r0, r1
 8009b48:	d3f4      	bcc.n	8009b34 <L_shift+0xc>
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}

08009b4c <__match>:
 8009b4c:	b530      	push	{r4, r5, lr}
 8009b4e:	6803      	ldr	r3, [r0, #0]
 8009b50:	3301      	adds	r3, #1
 8009b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b56:	b914      	cbnz	r4, 8009b5e <__match+0x12>
 8009b58:	6003      	str	r3, [r0, #0]
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	bd30      	pop	{r4, r5, pc}
 8009b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b66:	2d19      	cmp	r5, #25
 8009b68:	bf98      	it	ls
 8009b6a:	3220      	addls	r2, #32
 8009b6c:	42a2      	cmp	r2, r4
 8009b6e:	d0f0      	beq.n	8009b52 <__match+0x6>
 8009b70:	2000      	movs	r0, #0
 8009b72:	e7f3      	b.n	8009b5c <__match+0x10>

08009b74 <__hexnan>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	680b      	ldr	r3, [r1, #0]
 8009b7a:	6801      	ldr	r1, [r0, #0]
 8009b7c:	115e      	asrs	r6, r3, #5
 8009b7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b82:	f013 031f 	ands.w	r3, r3, #31
 8009b86:	b087      	sub	sp, #28
 8009b88:	bf18      	it	ne
 8009b8a:	3604      	addne	r6, #4
 8009b8c:	2500      	movs	r5, #0
 8009b8e:	1f37      	subs	r7, r6, #4
 8009b90:	4682      	mov	sl, r0
 8009b92:	4690      	mov	r8, r2
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b9a:	46b9      	mov	r9, r7
 8009b9c:	463c      	mov	r4, r7
 8009b9e:	9502      	str	r5, [sp, #8]
 8009ba0:	46ab      	mov	fp, r5
 8009ba2:	784a      	ldrb	r2, [r1, #1]
 8009ba4:	1c4b      	adds	r3, r1, #1
 8009ba6:	9303      	str	r3, [sp, #12]
 8009ba8:	b342      	cbz	r2, 8009bfc <__hexnan+0x88>
 8009baa:	4610      	mov	r0, r2
 8009bac:	9105      	str	r1, [sp, #20]
 8009bae:	9204      	str	r2, [sp, #16]
 8009bb0:	f7ff fd76 	bl	80096a0 <__hexdig_fun>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d14f      	bne.n	8009c58 <__hexnan+0xe4>
 8009bb8:	9a04      	ldr	r2, [sp, #16]
 8009bba:	9905      	ldr	r1, [sp, #20]
 8009bbc:	2a20      	cmp	r2, #32
 8009bbe:	d818      	bhi.n	8009bf2 <__hexnan+0x7e>
 8009bc0:	9b02      	ldr	r3, [sp, #8]
 8009bc2:	459b      	cmp	fp, r3
 8009bc4:	dd13      	ble.n	8009bee <__hexnan+0x7a>
 8009bc6:	454c      	cmp	r4, r9
 8009bc8:	d206      	bcs.n	8009bd8 <__hexnan+0x64>
 8009bca:	2d07      	cmp	r5, #7
 8009bcc:	dc04      	bgt.n	8009bd8 <__hexnan+0x64>
 8009bce:	462a      	mov	r2, r5
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f7ff ffa8 	bl	8009b28 <L_shift>
 8009bd8:	4544      	cmp	r4, r8
 8009bda:	d950      	bls.n	8009c7e <__hexnan+0x10a>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f1a4 0904 	sub.w	r9, r4, #4
 8009be2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009be6:	f8cd b008 	str.w	fp, [sp, #8]
 8009bea:	464c      	mov	r4, r9
 8009bec:	461d      	mov	r5, r3
 8009bee:	9903      	ldr	r1, [sp, #12]
 8009bf0:	e7d7      	b.n	8009ba2 <__hexnan+0x2e>
 8009bf2:	2a29      	cmp	r2, #41	; 0x29
 8009bf4:	d155      	bne.n	8009ca2 <__hexnan+0x12e>
 8009bf6:	3102      	adds	r1, #2
 8009bf8:	f8ca 1000 	str.w	r1, [sl]
 8009bfc:	f1bb 0f00 	cmp.w	fp, #0
 8009c00:	d04f      	beq.n	8009ca2 <__hexnan+0x12e>
 8009c02:	454c      	cmp	r4, r9
 8009c04:	d206      	bcs.n	8009c14 <__hexnan+0xa0>
 8009c06:	2d07      	cmp	r5, #7
 8009c08:	dc04      	bgt.n	8009c14 <__hexnan+0xa0>
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f7ff ff8a 	bl	8009b28 <L_shift>
 8009c14:	4544      	cmp	r4, r8
 8009c16:	d934      	bls.n	8009c82 <__hexnan+0x10e>
 8009c18:	f1a8 0204 	sub.w	r2, r8, #4
 8009c1c:	4623      	mov	r3, r4
 8009c1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c22:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c26:	429f      	cmp	r7, r3
 8009c28:	d2f9      	bcs.n	8009c1e <__hexnan+0xaa>
 8009c2a:	1b3b      	subs	r3, r7, r4
 8009c2c:	f023 0303 	bic.w	r3, r3, #3
 8009c30:	3304      	adds	r3, #4
 8009c32:	3e03      	subs	r6, #3
 8009c34:	3401      	adds	r4, #1
 8009c36:	42a6      	cmp	r6, r4
 8009c38:	bf38      	it	cc
 8009c3a:	2304      	movcc	r3, #4
 8009c3c:	4443      	add	r3, r8
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f843 2b04 	str.w	r2, [r3], #4
 8009c44:	429f      	cmp	r7, r3
 8009c46:	d2fb      	bcs.n	8009c40 <__hexnan+0xcc>
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	b91b      	cbnz	r3, 8009c54 <__hexnan+0xe0>
 8009c4c:	4547      	cmp	r7, r8
 8009c4e:	d126      	bne.n	8009c9e <__hexnan+0x12a>
 8009c50:	2301      	movs	r3, #1
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	2005      	movs	r0, #5
 8009c56:	e025      	b.n	8009ca4 <__hexnan+0x130>
 8009c58:	3501      	adds	r5, #1
 8009c5a:	2d08      	cmp	r5, #8
 8009c5c:	f10b 0b01 	add.w	fp, fp, #1
 8009c60:	dd06      	ble.n	8009c70 <__hexnan+0xfc>
 8009c62:	4544      	cmp	r4, r8
 8009c64:	d9c3      	bls.n	8009bee <__hexnan+0x7a>
 8009c66:	2300      	movs	r3, #0
 8009c68:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c6c:	2501      	movs	r5, #1
 8009c6e:	3c04      	subs	r4, #4
 8009c70:	6822      	ldr	r2, [r4, #0]
 8009c72:	f000 000f 	and.w	r0, r0, #15
 8009c76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c7a:	6020      	str	r0, [r4, #0]
 8009c7c:	e7b7      	b.n	8009bee <__hexnan+0x7a>
 8009c7e:	2508      	movs	r5, #8
 8009c80:	e7b5      	b.n	8009bee <__hexnan+0x7a>
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0df      	beq.n	8009c48 <__hexnan+0xd4>
 8009c88:	f1c3 0320 	rsb	r3, r3, #32
 8009c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c90:	40da      	lsrs	r2, r3
 8009c92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c96:	4013      	ands	r3, r2
 8009c98:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c9c:	e7d4      	b.n	8009c48 <__hexnan+0xd4>
 8009c9e:	3f04      	subs	r7, #4
 8009ca0:	e7d2      	b.n	8009c48 <__hexnan+0xd4>
 8009ca2:	2004      	movs	r0, #4
 8009ca4:	b007      	add	sp, #28
 8009ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009cac <malloc>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <malloc+0xc>)
 8009cae:	4601      	mov	r1, r0
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f000 b823 	b.w	8009cfc <_malloc_r>
 8009cb6:	bf00      	nop
 8009cb8:	200001d8 	.word	0x200001d8

08009cbc <sbrk_aligned>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4e0e      	ldr	r6, [pc, #56]	; (8009cf8 <sbrk_aligned+0x3c>)
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	6831      	ldr	r1, [r6, #0]
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	b911      	cbnz	r1, 8009cce <sbrk_aligned+0x12>
 8009cc8:	f001 f932 	bl	800af30 <_sbrk_r>
 8009ccc:	6030      	str	r0, [r6, #0]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f001 f92d 	bl	800af30 <_sbrk_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d00a      	beq.n	8009cf0 <sbrk_aligned+0x34>
 8009cda:	1cc4      	adds	r4, r0, #3
 8009cdc:	f024 0403 	bic.w	r4, r4, #3
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d007      	beq.n	8009cf4 <sbrk_aligned+0x38>
 8009ce4:	1a21      	subs	r1, r4, r0
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f001 f922 	bl	800af30 <_sbrk_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	d101      	bne.n	8009cf4 <sbrk_aligned+0x38>
 8009cf0:	f04f 34ff 	mov.w	r4, #4294967295
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	20001f38 	.word	0x20001f38

08009cfc <_malloc_r>:
 8009cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d00:	1ccd      	adds	r5, r1, #3
 8009d02:	f025 0503 	bic.w	r5, r5, #3
 8009d06:	3508      	adds	r5, #8
 8009d08:	2d0c      	cmp	r5, #12
 8009d0a:	bf38      	it	cc
 8009d0c:	250c      	movcc	r5, #12
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	4607      	mov	r7, r0
 8009d12:	db01      	blt.n	8009d18 <_malloc_r+0x1c>
 8009d14:	42a9      	cmp	r1, r5
 8009d16:	d905      	bls.n	8009d24 <_malloc_r+0x28>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	4630      	mov	r0, r6
 8009d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009df8 <_malloc_r+0xfc>
 8009d28:	f000 f87a 	bl	8009e20 <__malloc_lock>
 8009d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d30:	461c      	mov	r4, r3
 8009d32:	bb5c      	cbnz	r4, 8009d8c <_malloc_r+0x90>
 8009d34:	4629      	mov	r1, r5
 8009d36:	4638      	mov	r0, r7
 8009d38:	f7ff ffc0 	bl	8009cbc <sbrk_aligned>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	4604      	mov	r4, r0
 8009d40:	d155      	bne.n	8009dee <_malloc_r+0xf2>
 8009d42:	f8d8 4000 	ldr.w	r4, [r8]
 8009d46:	4626      	mov	r6, r4
 8009d48:	2e00      	cmp	r6, #0
 8009d4a:	d145      	bne.n	8009dd8 <_malloc_r+0xdc>
 8009d4c:	2c00      	cmp	r4, #0
 8009d4e:	d048      	beq.n	8009de2 <_malloc_r+0xe6>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	4631      	mov	r1, r6
 8009d54:	4638      	mov	r0, r7
 8009d56:	eb04 0903 	add.w	r9, r4, r3
 8009d5a:	f001 f8e9 	bl	800af30 <_sbrk_r>
 8009d5e:	4581      	cmp	r9, r0
 8009d60:	d13f      	bne.n	8009de2 <_malloc_r+0xe6>
 8009d62:	6821      	ldr	r1, [r4, #0]
 8009d64:	1a6d      	subs	r5, r5, r1
 8009d66:	4629      	mov	r1, r5
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f7ff ffa7 	bl	8009cbc <sbrk_aligned>
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d037      	beq.n	8009de2 <_malloc_r+0xe6>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	442b      	add	r3, r5
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	f8d8 3000 	ldr.w	r3, [r8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d038      	beq.n	8009df2 <_malloc_r+0xf6>
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	42a2      	cmp	r2, r4
 8009d84:	d12b      	bne.n	8009dde <_malloc_r+0xe2>
 8009d86:	2200      	movs	r2, #0
 8009d88:	605a      	str	r2, [r3, #4]
 8009d8a:	e00f      	b.n	8009dac <_malloc_r+0xb0>
 8009d8c:	6822      	ldr	r2, [r4, #0]
 8009d8e:	1b52      	subs	r2, r2, r5
 8009d90:	d41f      	bmi.n	8009dd2 <_malloc_r+0xd6>
 8009d92:	2a0b      	cmp	r2, #11
 8009d94:	d917      	bls.n	8009dc6 <_malloc_r+0xca>
 8009d96:	1961      	adds	r1, r4, r5
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	6025      	str	r5, [r4, #0]
 8009d9c:	bf18      	it	ne
 8009d9e:	6059      	strne	r1, [r3, #4]
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	bf08      	it	eq
 8009da4:	f8c8 1000 	streq.w	r1, [r8]
 8009da8:	5162      	str	r2, [r4, r5]
 8009daa:	604b      	str	r3, [r1, #4]
 8009dac:	4638      	mov	r0, r7
 8009dae:	f104 060b 	add.w	r6, r4, #11
 8009db2:	f000 f83b 	bl	8009e2c <__malloc_unlock>
 8009db6:	f026 0607 	bic.w	r6, r6, #7
 8009dba:	1d23      	adds	r3, r4, #4
 8009dbc:	1af2      	subs	r2, r6, r3
 8009dbe:	d0ae      	beq.n	8009d1e <_malloc_r+0x22>
 8009dc0:	1b9b      	subs	r3, r3, r6
 8009dc2:	50a3      	str	r3, [r4, r2]
 8009dc4:	e7ab      	b.n	8009d1e <_malloc_r+0x22>
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	6862      	ldr	r2, [r4, #4]
 8009dca:	d1dd      	bne.n	8009d88 <_malloc_r+0x8c>
 8009dcc:	f8c8 2000 	str.w	r2, [r8]
 8009dd0:	e7ec      	b.n	8009dac <_malloc_r+0xb0>
 8009dd2:	4623      	mov	r3, r4
 8009dd4:	6864      	ldr	r4, [r4, #4]
 8009dd6:	e7ac      	b.n	8009d32 <_malloc_r+0x36>
 8009dd8:	4634      	mov	r4, r6
 8009dda:	6876      	ldr	r6, [r6, #4]
 8009ddc:	e7b4      	b.n	8009d48 <_malloc_r+0x4c>
 8009dde:	4613      	mov	r3, r2
 8009de0:	e7cc      	b.n	8009d7c <_malloc_r+0x80>
 8009de2:	230c      	movs	r3, #12
 8009de4:	603b      	str	r3, [r7, #0]
 8009de6:	4638      	mov	r0, r7
 8009de8:	f000 f820 	bl	8009e2c <__malloc_unlock>
 8009dec:	e797      	b.n	8009d1e <_malloc_r+0x22>
 8009dee:	6025      	str	r5, [r4, #0]
 8009df0:	e7dc      	b.n	8009dac <_malloc_r+0xb0>
 8009df2:	605b      	str	r3, [r3, #4]
 8009df4:	deff      	udf	#255	; 0xff
 8009df6:	bf00      	nop
 8009df8:	20001f34 	.word	0x20001f34

08009dfc <__ascii_mbtowc>:
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	b901      	cbnz	r1, 8009e02 <__ascii_mbtowc+0x6>
 8009e00:	a901      	add	r1, sp, #4
 8009e02:	b142      	cbz	r2, 8009e16 <__ascii_mbtowc+0x1a>
 8009e04:	b14b      	cbz	r3, 8009e1a <__ascii_mbtowc+0x1e>
 8009e06:	7813      	ldrb	r3, [r2, #0]
 8009e08:	600b      	str	r3, [r1, #0]
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	1e10      	subs	r0, r2, #0
 8009e0e:	bf18      	it	ne
 8009e10:	2001      	movne	r0, #1
 8009e12:	b002      	add	sp, #8
 8009e14:	4770      	bx	lr
 8009e16:	4610      	mov	r0, r2
 8009e18:	e7fb      	b.n	8009e12 <__ascii_mbtowc+0x16>
 8009e1a:	f06f 0001 	mvn.w	r0, #1
 8009e1e:	e7f8      	b.n	8009e12 <__ascii_mbtowc+0x16>

08009e20 <__malloc_lock>:
 8009e20:	4801      	ldr	r0, [pc, #4]	; (8009e28 <__malloc_lock+0x8>)
 8009e22:	f7ff bb68 	b.w	80094f6 <__retarget_lock_acquire_recursive>
 8009e26:	bf00      	nop
 8009e28:	20001f30 	.word	0x20001f30

08009e2c <__malloc_unlock>:
 8009e2c:	4801      	ldr	r0, [pc, #4]	; (8009e34 <__malloc_unlock+0x8>)
 8009e2e:	f7ff bb63 	b.w	80094f8 <__retarget_lock_release_recursive>
 8009e32:	bf00      	nop
 8009e34:	20001f30 	.word	0x20001f30

08009e38 <_Balloc>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	69c6      	ldr	r6, [r0, #28]
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	460d      	mov	r5, r1
 8009e40:	b976      	cbnz	r6, 8009e60 <_Balloc+0x28>
 8009e42:	2010      	movs	r0, #16
 8009e44:	f7ff ff32 	bl	8009cac <malloc>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	61e0      	str	r0, [r4, #28]
 8009e4c:	b920      	cbnz	r0, 8009e58 <_Balloc+0x20>
 8009e4e:	4b18      	ldr	r3, [pc, #96]	; (8009eb0 <_Balloc+0x78>)
 8009e50:	4818      	ldr	r0, [pc, #96]	; (8009eb4 <_Balloc+0x7c>)
 8009e52:	216b      	movs	r1, #107	; 0x6b
 8009e54:	f7ff fb68 	bl	8009528 <__assert_func>
 8009e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e5c:	6006      	str	r6, [r0, #0]
 8009e5e:	60c6      	str	r6, [r0, #12]
 8009e60:	69e6      	ldr	r6, [r4, #28]
 8009e62:	68f3      	ldr	r3, [r6, #12]
 8009e64:	b183      	cbz	r3, 8009e88 <_Balloc+0x50>
 8009e66:	69e3      	ldr	r3, [r4, #28]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e6e:	b9b8      	cbnz	r0, 8009ea0 <_Balloc+0x68>
 8009e70:	2101      	movs	r1, #1
 8009e72:	fa01 f605 	lsl.w	r6, r1, r5
 8009e76:	1d72      	adds	r2, r6, #5
 8009e78:	0092      	lsls	r2, r2, #2
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f001 f86f 	bl	800af5e <_calloc_r>
 8009e80:	b160      	cbz	r0, 8009e9c <_Balloc+0x64>
 8009e82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e86:	e00e      	b.n	8009ea6 <_Balloc+0x6e>
 8009e88:	2221      	movs	r2, #33	; 0x21
 8009e8a:	2104      	movs	r1, #4
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f001 f866 	bl	800af5e <_calloc_r>
 8009e92:	69e3      	ldr	r3, [r4, #28]
 8009e94:	60f0      	str	r0, [r6, #12]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e4      	bne.n	8009e66 <_Balloc+0x2e>
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	6802      	ldr	r2, [r0, #0]
 8009ea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009eac:	e7f7      	b.n	8009e9e <_Balloc+0x66>
 8009eae:	bf00      	nop
 8009eb0:	0800b7e1 	.word	0x0800b7e1
 8009eb4:	0800b907 	.word	0x0800b907

08009eb8 <_Bfree>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	69c6      	ldr	r6, [r0, #28]
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	b976      	cbnz	r6, 8009ee0 <_Bfree+0x28>
 8009ec2:	2010      	movs	r0, #16
 8009ec4:	f7ff fef2 	bl	8009cac <malloc>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	61e8      	str	r0, [r5, #28]
 8009ecc:	b920      	cbnz	r0, 8009ed8 <_Bfree+0x20>
 8009ece:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <_Bfree+0x3c>)
 8009ed0:	4809      	ldr	r0, [pc, #36]	; (8009ef8 <_Bfree+0x40>)
 8009ed2:	218f      	movs	r1, #143	; 0x8f
 8009ed4:	f7ff fb28 	bl	8009528 <__assert_func>
 8009ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009edc:	6006      	str	r6, [r0, #0]
 8009ede:	60c6      	str	r6, [r0, #12]
 8009ee0:	b13c      	cbz	r4, 8009ef2 <_Bfree+0x3a>
 8009ee2:	69eb      	ldr	r3, [r5, #28]
 8009ee4:	6862      	ldr	r2, [r4, #4]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009eec:	6021      	str	r1, [r4, #0]
 8009eee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	0800b7e1 	.word	0x0800b7e1
 8009ef8:	0800b907 	.word	0x0800b907

08009efc <__multadd>:
 8009efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f00:	690d      	ldr	r5, [r1, #16]
 8009f02:	4607      	mov	r7, r0
 8009f04:	460c      	mov	r4, r1
 8009f06:	461e      	mov	r6, r3
 8009f08:	f101 0c14 	add.w	ip, r1, #20
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f12:	b299      	uxth	r1, r3
 8009f14:	fb02 6101 	mla	r1, r2, r1, r6
 8009f18:	0c1e      	lsrs	r6, r3, #16
 8009f1a:	0c0b      	lsrs	r3, r1, #16
 8009f1c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f20:	b289      	uxth	r1, r1
 8009f22:	3001      	adds	r0, #1
 8009f24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f28:	4285      	cmp	r5, r0
 8009f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f32:	dcec      	bgt.n	8009f0e <__multadd+0x12>
 8009f34:	b30e      	cbz	r6, 8009f7a <__multadd+0x7e>
 8009f36:	68a3      	ldr	r3, [r4, #8]
 8009f38:	42ab      	cmp	r3, r5
 8009f3a:	dc19      	bgt.n	8009f70 <__multadd+0x74>
 8009f3c:	6861      	ldr	r1, [r4, #4]
 8009f3e:	4638      	mov	r0, r7
 8009f40:	3101      	adds	r1, #1
 8009f42:	f7ff ff79 	bl	8009e38 <_Balloc>
 8009f46:	4680      	mov	r8, r0
 8009f48:	b928      	cbnz	r0, 8009f56 <__multadd+0x5a>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <__multadd+0x84>)
 8009f4e:	480d      	ldr	r0, [pc, #52]	; (8009f84 <__multadd+0x88>)
 8009f50:	21ba      	movs	r1, #186	; 0xba
 8009f52:	f7ff fae9 	bl	8009528 <__assert_func>
 8009f56:	6922      	ldr	r2, [r4, #16]
 8009f58:	3202      	adds	r2, #2
 8009f5a:	f104 010c 	add.w	r1, r4, #12
 8009f5e:	0092      	lsls	r2, r2, #2
 8009f60:	300c      	adds	r0, #12
 8009f62:	f7ff faca 	bl	80094fa <memcpy>
 8009f66:	4621      	mov	r1, r4
 8009f68:	4638      	mov	r0, r7
 8009f6a:	f7ff ffa5 	bl	8009eb8 <_Bfree>
 8009f6e:	4644      	mov	r4, r8
 8009f70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f74:	3501      	adds	r5, #1
 8009f76:	615e      	str	r6, [r3, #20]
 8009f78:	6125      	str	r5, [r4, #16]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f80:	0800b896 	.word	0x0800b896
 8009f84:	0800b907 	.word	0x0800b907

08009f88 <__s2b>:
 8009f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	4615      	mov	r5, r2
 8009f90:	461f      	mov	r7, r3
 8009f92:	2209      	movs	r2, #9
 8009f94:	3308      	adds	r3, #8
 8009f96:	4606      	mov	r6, r0
 8009f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	db09      	blt.n	8009fb8 <__s2b+0x30>
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7ff ff47 	bl	8009e38 <_Balloc>
 8009faa:	b940      	cbnz	r0, 8009fbe <__s2b+0x36>
 8009fac:	4602      	mov	r2, r0
 8009fae:	4b19      	ldr	r3, [pc, #100]	; (800a014 <__s2b+0x8c>)
 8009fb0:	4819      	ldr	r0, [pc, #100]	; (800a018 <__s2b+0x90>)
 8009fb2:	21d3      	movs	r1, #211	; 0xd3
 8009fb4:	f7ff fab8 	bl	8009528 <__assert_func>
 8009fb8:	0052      	lsls	r2, r2, #1
 8009fba:	3101      	adds	r1, #1
 8009fbc:	e7f0      	b.n	8009fa0 <__s2b+0x18>
 8009fbe:	9b08      	ldr	r3, [sp, #32]
 8009fc0:	6143      	str	r3, [r0, #20]
 8009fc2:	2d09      	cmp	r5, #9
 8009fc4:	f04f 0301 	mov.w	r3, #1
 8009fc8:	6103      	str	r3, [r0, #16]
 8009fca:	dd16      	ble.n	8009ffa <__s2b+0x72>
 8009fcc:	f104 0909 	add.w	r9, r4, #9
 8009fd0:	46c8      	mov	r8, r9
 8009fd2:	442c      	add	r4, r5
 8009fd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fd8:	4601      	mov	r1, r0
 8009fda:	3b30      	subs	r3, #48	; 0x30
 8009fdc:	220a      	movs	r2, #10
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7ff ff8c 	bl	8009efc <__multadd>
 8009fe4:	45a0      	cmp	r8, r4
 8009fe6:	d1f5      	bne.n	8009fd4 <__s2b+0x4c>
 8009fe8:	f1a5 0408 	sub.w	r4, r5, #8
 8009fec:	444c      	add	r4, r9
 8009fee:	1b2d      	subs	r5, r5, r4
 8009ff0:	1963      	adds	r3, r4, r5
 8009ff2:	42bb      	cmp	r3, r7
 8009ff4:	db04      	blt.n	800a000 <__s2b+0x78>
 8009ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffa:	340a      	adds	r4, #10
 8009ffc:	2509      	movs	r5, #9
 8009ffe:	e7f6      	b.n	8009fee <__s2b+0x66>
 800a000:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a004:	4601      	mov	r1, r0
 800a006:	3b30      	subs	r3, #48	; 0x30
 800a008:	220a      	movs	r2, #10
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ff76 	bl	8009efc <__multadd>
 800a010:	e7ee      	b.n	8009ff0 <__s2b+0x68>
 800a012:	bf00      	nop
 800a014:	0800b896 	.word	0x0800b896
 800a018:	0800b907 	.word	0x0800b907

0800a01c <__hi0bits>:
 800a01c:	0c03      	lsrs	r3, r0, #16
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	b9d3      	cbnz	r3, 800a058 <__hi0bits+0x3c>
 800a022:	0400      	lsls	r0, r0, #16
 800a024:	2310      	movs	r3, #16
 800a026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a02a:	bf04      	itt	eq
 800a02c:	0200      	lsleq	r0, r0, #8
 800a02e:	3308      	addeq	r3, #8
 800a030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a034:	bf04      	itt	eq
 800a036:	0100      	lsleq	r0, r0, #4
 800a038:	3304      	addeq	r3, #4
 800a03a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a03e:	bf04      	itt	eq
 800a040:	0080      	lsleq	r0, r0, #2
 800a042:	3302      	addeq	r3, #2
 800a044:	2800      	cmp	r0, #0
 800a046:	db05      	blt.n	800a054 <__hi0bits+0x38>
 800a048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a04c:	f103 0301 	add.w	r3, r3, #1
 800a050:	bf08      	it	eq
 800a052:	2320      	moveq	r3, #32
 800a054:	4618      	mov	r0, r3
 800a056:	4770      	bx	lr
 800a058:	2300      	movs	r3, #0
 800a05a:	e7e4      	b.n	800a026 <__hi0bits+0xa>

0800a05c <__lo0bits>:
 800a05c:	6803      	ldr	r3, [r0, #0]
 800a05e:	f013 0207 	ands.w	r2, r3, #7
 800a062:	d00c      	beq.n	800a07e <__lo0bits+0x22>
 800a064:	07d9      	lsls	r1, r3, #31
 800a066:	d422      	bmi.n	800a0ae <__lo0bits+0x52>
 800a068:	079a      	lsls	r2, r3, #30
 800a06a:	bf49      	itett	mi
 800a06c:	085b      	lsrmi	r3, r3, #1
 800a06e:	089b      	lsrpl	r3, r3, #2
 800a070:	6003      	strmi	r3, [r0, #0]
 800a072:	2201      	movmi	r2, #1
 800a074:	bf5c      	itt	pl
 800a076:	6003      	strpl	r3, [r0, #0]
 800a078:	2202      	movpl	r2, #2
 800a07a:	4610      	mov	r0, r2
 800a07c:	4770      	bx	lr
 800a07e:	b299      	uxth	r1, r3
 800a080:	b909      	cbnz	r1, 800a086 <__lo0bits+0x2a>
 800a082:	0c1b      	lsrs	r3, r3, #16
 800a084:	2210      	movs	r2, #16
 800a086:	b2d9      	uxtb	r1, r3
 800a088:	b909      	cbnz	r1, 800a08e <__lo0bits+0x32>
 800a08a:	3208      	adds	r2, #8
 800a08c:	0a1b      	lsrs	r3, r3, #8
 800a08e:	0719      	lsls	r1, r3, #28
 800a090:	bf04      	itt	eq
 800a092:	091b      	lsreq	r3, r3, #4
 800a094:	3204      	addeq	r2, #4
 800a096:	0799      	lsls	r1, r3, #30
 800a098:	bf04      	itt	eq
 800a09a:	089b      	lsreq	r3, r3, #2
 800a09c:	3202      	addeq	r2, #2
 800a09e:	07d9      	lsls	r1, r3, #31
 800a0a0:	d403      	bmi.n	800a0aa <__lo0bits+0x4e>
 800a0a2:	085b      	lsrs	r3, r3, #1
 800a0a4:	f102 0201 	add.w	r2, r2, #1
 800a0a8:	d003      	beq.n	800a0b2 <__lo0bits+0x56>
 800a0aa:	6003      	str	r3, [r0, #0]
 800a0ac:	e7e5      	b.n	800a07a <__lo0bits+0x1e>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	e7e3      	b.n	800a07a <__lo0bits+0x1e>
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	e7e1      	b.n	800a07a <__lo0bits+0x1e>
	...

0800a0b8 <__i2b>:
 800a0b8:	b510      	push	{r4, lr}
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	2101      	movs	r1, #1
 800a0be:	f7ff febb 	bl	8009e38 <_Balloc>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	b928      	cbnz	r0, 800a0d2 <__i2b+0x1a>
 800a0c6:	4b05      	ldr	r3, [pc, #20]	; (800a0dc <__i2b+0x24>)
 800a0c8:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <__i2b+0x28>)
 800a0ca:	f240 1145 	movw	r1, #325	; 0x145
 800a0ce:	f7ff fa2b 	bl	8009528 <__assert_func>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	6144      	str	r4, [r0, #20]
 800a0d6:	6103      	str	r3, [r0, #16]
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	bf00      	nop
 800a0dc:	0800b896 	.word	0x0800b896
 800a0e0:	0800b907 	.word	0x0800b907

0800a0e4 <__multiply>:
 800a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	4691      	mov	r9, r2
 800a0ea:	690a      	ldr	r2, [r1, #16]
 800a0ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	bfb8      	it	lt
 800a0f4:	460b      	movlt	r3, r1
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	bfbc      	itt	lt
 800a0fa:	464c      	movlt	r4, r9
 800a0fc:	4699      	movlt	r9, r3
 800a0fe:	6927      	ldr	r7, [r4, #16]
 800a100:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a104:	68a3      	ldr	r3, [r4, #8]
 800a106:	6861      	ldr	r1, [r4, #4]
 800a108:	eb07 060a 	add.w	r6, r7, sl
 800a10c:	42b3      	cmp	r3, r6
 800a10e:	b085      	sub	sp, #20
 800a110:	bfb8      	it	lt
 800a112:	3101      	addlt	r1, #1
 800a114:	f7ff fe90 	bl	8009e38 <_Balloc>
 800a118:	b930      	cbnz	r0, 800a128 <__multiply+0x44>
 800a11a:	4602      	mov	r2, r0
 800a11c:	4b44      	ldr	r3, [pc, #272]	; (800a230 <__multiply+0x14c>)
 800a11e:	4845      	ldr	r0, [pc, #276]	; (800a234 <__multiply+0x150>)
 800a120:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a124:	f7ff fa00 	bl	8009528 <__assert_func>
 800a128:	f100 0514 	add.w	r5, r0, #20
 800a12c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a130:	462b      	mov	r3, r5
 800a132:	2200      	movs	r2, #0
 800a134:	4543      	cmp	r3, r8
 800a136:	d321      	bcc.n	800a17c <__multiply+0x98>
 800a138:	f104 0314 	add.w	r3, r4, #20
 800a13c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a140:	f109 0314 	add.w	r3, r9, #20
 800a144:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a148:	9202      	str	r2, [sp, #8]
 800a14a:	1b3a      	subs	r2, r7, r4
 800a14c:	3a15      	subs	r2, #21
 800a14e:	f022 0203 	bic.w	r2, r2, #3
 800a152:	3204      	adds	r2, #4
 800a154:	f104 0115 	add.w	r1, r4, #21
 800a158:	428f      	cmp	r7, r1
 800a15a:	bf38      	it	cc
 800a15c:	2204      	movcc	r2, #4
 800a15e:	9201      	str	r2, [sp, #4]
 800a160:	9a02      	ldr	r2, [sp, #8]
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	429a      	cmp	r2, r3
 800a166:	d80c      	bhi.n	800a182 <__multiply+0x9e>
 800a168:	2e00      	cmp	r6, #0
 800a16a:	dd03      	ble.n	800a174 <__multiply+0x90>
 800a16c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a170:	2b00      	cmp	r3, #0
 800a172:	d05b      	beq.n	800a22c <__multiply+0x148>
 800a174:	6106      	str	r6, [r0, #16]
 800a176:	b005      	add	sp, #20
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	f843 2b04 	str.w	r2, [r3], #4
 800a180:	e7d8      	b.n	800a134 <__multiply+0x50>
 800a182:	f8b3 a000 	ldrh.w	sl, [r3]
 800a186:	f1ba 0f00 	cmp.w	sl, #0
 800a18a:	d024      	beq.n	800a1d6 <__multiply+0xf2>
 800a18c:	f104 0e14 	add.w	lr, r4, #20
 800a190:	46a9      	mov	r9, r5
 800a192:	f04f 0c00 	mov.w	ip, #0
 800a196:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a19a:	f8d9 1000 	ldr.w	r1, [r9]
 800a19e:	fa1f fb82 	uxth.w	fp, r2
 800a1a2:	b289      	uxth	r1, r1
 800a1a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a1b0:	4461      	add	r1, ip
 800a1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1be:	b289      	uxth	r1, r1
 800a1c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1c4:	4577      	cmp	r7, lr
 800a1c6:	f849 1b04 	str.w	r1, [r9], #4
 800a1ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1ce:	d8e2      	bhi.n	800a196 <__multiply+0xb2>
 800a1d0:	9a01      	ldr	r2, [sp, #4]
 800a1d2:	f845 c002 	str.w	ip, [r5, r2]
 800a1d6:	9a03      	ldr	r2, [sp, #12]
 800a1d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	d021      	beq.n	800a228 <__multiply+0x144>
 800a1e4:	6829      	ldr	r1, [r5, #0]
 800a1e6:	f104 0c14 	add.w	ip, r4, #20
 800a1ea:	46ae      	mov	lr, r5
 800a1ec:	f04f 0a00 	mov.w	sl, #0
 800a1f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a1f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a1fc:	4452      	add	r2, sl
 800a1fe:	b289      	uxth	r1, r1
 800a200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a204:	f84e 1b04 	str.w	r1, [lr], #4
 800a208:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a20c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a210:	f8be 1000 	ldrh.w	r1, [lr]
 800a214:	fb09 110a 	mla	r1, r9, sl, r1
 800a218:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a21c:	4567      	cmp	r7, ip
 800a21e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a222:	d8e5      	bhi.n	800a1f0 <__multiply+0x10c>
 800a224:	9a01      	ldr	r2, [sp, #4]
 800a226:	50a9      	str	r1, [r5, r2]
 800a228:	3504      	adds	r5, #4
 800a22a:	e799      	b.n	800a160 <__multiply+0x7c>
 800a22c:	3e01      	subs	r6, #1
 800a22e:	e79b      	b.n	800a168 <__multiply+0x84>
 800a230:	0800b896 	.word	0x0800b896
 800a234:	0800b907 	.word	0x0800b907

0800a238 <__pow5mult>:
 800a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	4615      	mov	r5, r2
 800a23e:	f012 0203 	ands.w	r2, r2, #3
 800a242:	4606      	mov	r6, r0
 800a244:	460f      	mov	r7, r1
 800a246:	d007      	beq.n	800a258 <__pow5mult+0x20>
 800a248:	4c25      	ldr	r4, [pc, #148]	; (800a2e0 <__pow5mult+0xa8>)
 800a24a:	3a01      	subs	r2, #1
 800a24c:	2300      	movs	r3, #0
 800a24e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a252:	f7ff fe53 	bl	8009efc <__multadd>
 800a256:	4607      	mov	r7, r0
 800a258:	10ad      	asrs	r5, r5, #2
 800a25a:	d03d      	beq.n	800a2d8 <__pow5mult+0xa0>
 800a25c:	69f4      	ldr	r4, [r6, #28]
 800a25e:	b97c      	cbnz	r4, 800a280 <__pow5mult+0x48>
 800a260:	2010      	movs	r0, #16
 800a262:	f7ff fd23 	bl	8009cac <malloc>
 800a266:	4602      	mov	r2, r0
 800a268:	61f0      	str	r0, [r6, #28]
 800a26a:	b928      	cbnz	r0, 800a278 <__pow5mult+0x40>
 800a26c:	4b1d      	ldr	r3, [pc, #116]	; (800a2e4 <__pow5mult+0xac>)
 800a26e:	481e      	ldr	r0, [pc, #120]	; (800a2e8 <__pow5mult+0xb0>)
 800a270:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a274:	f7ff f958 	bl	8009528 <__assert_func>
 800a278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a27c:	6004      	str	r4, [r0, #0]
 800a27e:	60c4      	str	r4, [r0, #12]
 800a280:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a288:	b94c      	cbnz	r4, 800a29e <__pow5mult+0x66>
 800a28a:	f240 2171 	movw	r1, #625	; 0x271
 800a28e:	4630      	mov	r0, r6
 800a290:	f7ff ff12 	bl	800a0b8 <__i2b>
 800a294:	2300      	movs	r3, #0
 800a296:	f8c8 0008 	str.w	r0, [r8, #8]
 800a29a:	4604      	mov	r4, r0
 800a29c:	6003      	str	r3, [r0, #0]
 800a29e:	f04f 0900 	mov.w	r9, #0
 800a2a2:	07eb      	lsls	r3, r5, #31
 800a2a4:	d50a      	bpl.n	800a2bc <__pow5mult+0x84>
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	4622      	mov	r2, r4
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7ff ff1a 	bl	800a0e4 <__multiply>
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f7ff fdff 	bl	8009eb8 <_Bfree>
 800a2ba:	4647      	mov	r7, r8
 800a2bc:	106d      	asrs	r5, r5, #1
 800a2be:	d00b      	beq.n	800a2d8 <__pow5mult+0xa0>
 800a2c0:	6820      	ldr	r0, [r4, #0]
 800a2c2:	b938      	cbnz	r0, 800a2d4 <__pow5mult+0x9c>
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff ff0b 	bl	800a0e4 <__multiply>
 800a2ce:	6020      	str	r0, [r4, #0]
 800a2d0:	f8c0 9000 	str.w	r9, [r0]
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	e7e4      	b.n	800a2a2 <__pow5mult+0x6a>
 800a2d8:	4638      	mov	r0, r7
 800a2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2de:	bf00      	nop
 800a2e0:	0800ba50 	.word	0x0800ba50
 800a2e4:	0800b7e1 	.word	0x0800b7e1
 800a2e8:	0800b907 	.word	0x0800b907

0800a2ec <__lshift>:
 800a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	6849      	ldr	r1, [r1, #4]
 800a2f4:	6923      	ldr	r3, [r4, #16]
 800a2f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2fa:	68a3      	ldr	r3, [r4, #8]
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	4691      	mov	r9, r2
 800a300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a304:	f108 0601 	add.w	r6, r8, #1
 800a308:	42b3      	cmp	r3, r6
 800a30a:	db0b      	blt.n	800a324 <__lshift+0x38>
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7ff fd93 	bl	8009e38 <_Balloc>
 800a312:	4605      	mov	r5, r0
 800a314:	b948      	cbnz	r0, 800a32a <__lshift+0x3e>
 800a316:	4602      	mov	r2, r0
 800a318:	4b28      	ldr	r3, [pc, #160]	; (800a3bc <__lshift+0xd0>)
 800a31a:	4829      	ldr	r0, [pc, #164]	; (800a3c0 <__lshift+0xd4>)
 800a31c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a320:	f7ff f902 	bl	8009528 <__assert_func>
 800a324:	3101      	adds	r1, #1
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	e7ee      	b.n	800a308 <__lshift+0x1c>
 800a32a:	2300      	movs	r3, #0
 800a32c:	f100 0114 	add.w	r1, r0, #20
 800a330:	f100 0210 	add.w	r2, r0, #16
 800a334:	4618      	mov	r0, r3
 800a336:	4553      	cmp	r3, sl
 800a338:	db33      	blt.n	800a3a2 <__lshift+0xb6>
 800a33a:	6920      	ldr	r0, [r4, #16]
 800a33c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a340:	f104 0314 	add.w	r3, r4, #20
 800a344:	f019 091f 	ands.w	r9, r9, #31
 800a348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a34c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a350:	d02b      	beq.n	800a3aa <__lshift+0xbe>
 800a352:	f1c9 0e20 	rsb	lr, r9, #32
 800a356:	468a      	mov	sl, r1
 800a358:	2200      	movs	r2, #0
 800a35a:	6818      	ldr	r0, [r3, #0]
 800a35c:	fa00 f009 	lsl.w	r0, r0, r9
 800a360:	4310      	orrs	r0, r2
 800a362:	f84a 0b04 	str.w	r0, [sl], #4
 800a366:	f853 2b04 	ldr.w	r2, [r3], #4
 800a36a:	459c      	cmp	ip, r3
 800a36c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a370:	d8f3      	bhi.n	800a35a <__lshift+0x6e>
 800a372:	ebac 0304 	sub.w	r3, ip, r4
 800a376:	3b15      	subs	r3, #21
 800a378:	f023 0303 	bic.w	r3, r3, #3
 800a37c:	3304      	adds	r3, #4
 800a37e:	f104 0015 	add.w	r0, r4, #21
 800a382:	4584      	cmp	ip, r0
 800a384:	bf38      	it	cc
 800a386:	2304      	movcc	r3, #4
 800a388:	50ca      	str	r2, [r1, r3]
 800a38a:	b10a      	cbz	r2, 800a390 <__lshift+0xa4>
 800a38c:	f108 0602 	add.w	r6, r8, #2
 800a390:	3e01      	subs	r6, #1
 800a392:	4638      	mov	r0, r7
 800a394:	612e      	str	r6, [r5, #16]
 800a396:	4621      	mov	r1, r4
 800a398:	f7ff fd8e 	bl	8009eb8 <_Bfree>
 800a39c:	4628      	mov	r0, r5
 800a39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	e7c5      	b.n	800a336 <__lshift+0x4a>
 800a3aa:	3904      	subs	r1, #4
 800a3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3b4:	459c      	cmp	ip, r3
 800a3b6:	d8f9      	bhi.n	800a3ac <__lshift+0xc0>
 800a3b8:	e7ea      	b.n	800a390 <__lshift+0xa4>
 800a3ba:	bf00      	nop
 800a3bc:	0800b896 	.word	0x0800b896
 800a3c0:	0800b907 	.word	0x0800b907

0800a3c4 <__mcmp>:
 800a3c4:	b530      	push	{r4, r5, lr}
 800a3c6:	6902      	ldr	r2, [r0, #16]
 800a3c8:	690c      	ldr	r4, [r1, #16]
 800a3ca:	1b12      	subs	r2, r2, r4
 800a3cc:	d10e      	bne.n	800a3ec <__mcmp+0x28>
 800a3ce:	f100 0314 	add.w	r3, r0, #20
 800a3d2:	3114      	adds	r1, #20
 800a3d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3e4:	42a5      	cmp	r5, r4
 800a3e6:	d003      	beq.n	800a3f0 <__mcmp+0x2c>
 800a3e8:	d305      	bcc.n	800a3f6 <__mcmp+0x32>
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	bd30      	pop	{r4, r5, pc}
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	d3f3      	bcc.n	800a3dc <__mcmp+0x18>
 800a3f4:	e7fa      	b.n	800a3ec <__mcmp+0x28>
 800a3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fa:	e7f7      	b.n	800a3ec <__mcmp+0x28>

0800a3fc <__mdiff>:
 800a3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	460c      	mov	r4, r1
 800a402:	4606      	mov	r6, r0
 800a404:	4611      	mov	r1, r2
 800a406:	4620      	mov	r0, r4
 800a408:	4690      	mov	r8, r2
 800a40a:	f7ff ffdb 	bl	800a3c4 <__mcmp>
 800a40e:	1e05      	subs	r5, r0, #0
 800a410:	d110      	bne.n	800a434 <__mdiff+0x38>
 800a412:	4629      	mov	r1, r5
 800a414:	4630      	mov	r0, r6
 800a416:	f7ff fd0f 	bl	8009e38 <_Balloc>
 800a41a:	b930      	cbnz	r0, 800a42a <__mdiff+0x2e>
 800a41c:	4b3a      	ldr	r3, [pc, #232]	; (800a508 <__mdiff+0x10c>)
 800a41e:	4602      	mov	r2, r0
 800a420:	f240 2137 	movw	r1, #567	; 0x237
 800a424:	4839      	ldr	r0, [pc, #228]	; (800a50c <__mdiff+0x110>)
 800a426:	f7ff f87f 	bl	8009528 <__assert_func>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a434:	bfa4      	itt	ge
 800a436:	4643      	movge	r3, r8
 800a438:	46a0      	movge	r8, r4
 800a43a:	4630      	mov	r0, r6
 800a43c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a440:	bfa6      	itte	ge
 800a442:	461c      	movge	r4, r3
 800a444:	2500      	movge	r5, #0
 800a446:	2501      	movlt	r5, #1
 800a448:	f7ff fcf6 	bl	8009e38 <_Balloc>
 800a44c:	b920      	cbnz	r0, 800a458 <__mdiff+0x5c>
 800a44e:	4b2e      	ldr	r3, [pc, #184]	; (800a508 <__mdiff+0x10c>)
 800a450:	4602      	mov	r2, r0
 800a452:	f240 2145 	movw	r1, #581	; 0x245
 800a456:	e7e5      	b.n	800a424 <__mdiff+0x28>
 800a458:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a45c:	6926      	ldr	r6, [r4, #16]
 800a45e:	60c5      	str	r5, [r0, #12]
 800a460:	f104 0914 	add.w	r9, r4, #20
 800a464:	f108 0514 	add.w	r5, r8, #20
 800a468:	f100 0e14 	add.w	lr, r0, #20
 800a46c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a470:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a474:	f108 0210 	add.w	r2, r8, #16
 800a478:	46f2      	mov	sl, lr
 800a47a:	2100      	movs	r1, #0
 800a47c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a484:	fa11 f88b 	uxtah	r8, r1, fp
 800a488:	b299      	uxth	r1, r3
 800a48a:	0c1b      	lsrs	r3, r3, #16
 800a48c:	eba8 0801 	sub.w	r8, r8, r1
 800a490:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a494:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a498:	fa1f f888 	uxth.w	r8, r8
 800a49c:	1419      	asrs	r1, r3, #16
 800a49e:	454e      	cmp	r6, r9
 800a4a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a4a8:	d8e8      	bhi.n	800a47c <__mdiff+0x80>
 800a4aa:	1b33      	subs	r3, r6, r4
 800a4ac:	3b15      	subs	r3, #21
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	3415      	adds	r4, #21
 800a4b6:	42a6      	cmp	r6, r4
 800a4b8:	bf38      	it	cc
 800a4ba:	2304      	movcc	r3, #4
 800a4bc:	441d      	add	r5, r3
 800a4be:	4473      	add	r3, lr
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	462e      	mov	r6, r5
 800a4c4:	4566      	cmp	r6, ip
 800a4c6:	d30e      	bcc.n	800a4e6 <__mdiff+0xea>
 800a4c8:	f10c 0203 	add.w	r2, ip, #3
 800a4cc:	1b52      	subs	r2, r2, r5
 800a4ce:	f022 0203 	bic.w	r2, r2, #3
 800a4d2:	3d03      	subs	r5, #3
 800a4d4:	45ac      	cmp	ip, r5
 800a4d6:	bf38      	it	cc
 800a4d8:	2200      	movcc	r2, #0
 800a4da:	4413      	add	r3, r2
 800a4dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4e0:	b17a      	cbz	r2, 800a502 <__mdiff+0x106>
 800a4e2:	6107      	str	r7, [r0, #16]
 800a4e4:	e7a4      	b.n	800a430 <__mdiff+0x34>
 800a4e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4ea:	fa11 f288 	uxtah	r2, r1, r8
 800a4ee:	1414      	asrs	r4, r2, #16
 800a4f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4f4:	b292      	uxth	r2, r2
 800a4f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a4fe:	1421      	asrs	r1, r4, #16
 800a500:	e7e0      	b.n	800a4c4 <__mdiff+0xc8>
 800a502:	3f01      	subs	r7, #1
 800a504:	e7ea      	b.n	800a4dc <__mdiff+0xe0>
 800a506:	bf00      	nop
 800a508:	0800b896 	.word	0x0800b896
 800a50c:	0800b907 	.word	0x0800b907

0800a510 <__ulp>:
 800a510:	b082      	sub	sp, #8
 800a512:	ed8d 0b00 	vstr	d0, [sp]
 800a516:	9a01      	ldr	r2, [sp, #4]
 800a518:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <__ulp+0x48>)
 800a51a:	4013      	ands	r3, r2
 800a51c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a520:	2b00      	cmp	r3, #0
 800a522:	dc08      	bgt.n	800a536 <__ulp+0x26>
 800a524:	425b      	negs	r3, r3
 800a526:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a52a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a52e:	da04      	bge.n	800a53a <__ulp+0x2a>
 800a530:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a534:	4113      	asrs	r3, r2
 800a536:	2200      	movs	r2, #0
 800a538:	e008      	b.n	800a54c <__ulp+0x3c>
 800a53a:	f1a2 0314 	sub.w	r3, r2, #20
 800a53e:	2b1e      	cmp	r3, #30
 800a540:	bfda      	itte	le
 800a542:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a546:	40da      	lsrle	r2, r3
 800a548:	2201      	movgt	r2, #1
 800a54a:	2300      	movs	r3, #0
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	ec41 0b10 	vmov	d0, r0, r1
 800a554:	b002      	add	sp, #8
 800a556:	4770      	bx	lr
 800a558:	7ff00000 	.word	0x7ff00000

0800a55c <__b2d>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	6906      	ldr	r6, [r0, #16]
 800a562:	f100 0814 	add.w	r8, r0, #20
 800a566:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a56a:	1f37      	subs	r7, r6, #4
 800a56c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a570:	4610      	mov	r0, r2
 800a572:	f7ff fd53 	bl	800a01c <__hi0bits>
 800a576:	f1c0 0320 	rsb	r3, r0, #32
 800a57a:	280a      	cmp	r0, #10
 800a57c:	600b      	str	r3, [r1, #0]
 800a57e:	491b      	ldr	r1, [pc, #108]	; (800a5ec <__b2d+0x90>)
 800a580:	dc15      	bgt.n	800a5ae <__b2d+0x52>
 800a582:	f1c0 0c0b 	rsb	ip, r0, #11
 800a586:	fa22 f30c 	lsr.w	r3, r2, ip
 800a58a:	45b8      	cmp	r8, r7
 800a58c:	ea43 0501 	orr.w	r5, r3, r1
 800a590:	bf34      	ite	cc
 800a592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a596:	2300      	movcs	r3, #0
 800a598:	3015      	adds	r0, #21
 800a59a:	fa02 f000 	lsl.w	r0, r2, r0
 800a59e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5a2:	4303      	orrs	r3, r0
 800a5a4:	461c      	mov	r4, r3
 800a5a6:	ec45 4b10 	vmov	d0, r4, r5
 800a5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ae:	45b8      	cmp	r8, r7
 800a5b0:	bf3a      	itte	cc
 800a5b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5ba:	2300      	movcs	r3, #0
 800a5bc:	380b      	subs	r0, #11
 800a5be:	d012      	beq.n	800a5e6 <__b2d+0x8a>
 800a5c0:	f1c0 0120 	rsb	r1, r0, #32
 800a5c4:	fa23 f401 	lsr.w	r4, r3, r1
 800a5c8:	4082      	lsls	r2, r0
 800a5ca:	4322      	orrs	r2, r4
 800a5cc:	4547      	cmp	r7, r8
 800a5ce:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a5d2:	bf8c      	ite	hi
 800a5d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a5d8:	2200      	movls	r2, #0
 800a5da:	4083      	lsls	r3, r0
 800a5dc:	40ca      	lsrs	r2, r1
 800a5de:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	e7de      	b.n	800a5a4 <__b2d+0x48>
 800a5e6:	ea42 0501 	orr.w	r5, r2, r1
 800a5ea:	e7db      	b.n	800a5a4 <__b2d+0x48>
 800a5ec:	3ff00000 	.word	0x3ff00000

0800a5f0 <__d2b>:
 800a5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	ec59 8b10 	vmov	r8, r9, d0
 800a5fc:	4616      	mov	r6, r2
 800a5fe:	f7ff fc1b 	bl	8009e38 <_Balloc>
 800a602:	4604      	mov	r4, r0
 800a604:	b930      	cbnz	r0, 800a614 <__d2b+0x24>
 800a606:	4602      	mov	r2, r0
 800a608:	4b24      	ldr	r3, [pc, #144]	; (800a69c <__d2b+0xac>)
 800a60a:	4825      	ldr	r0, [pc, #148]	; (800a6a0 <__d2b+0xb0>)
 800a60c:	f240 310f 	movw	r1, #783	; 0x30f
 800a610:	f7fe ff8a 	bl	8009528 <__assert_func>
 800a614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a61c:	bb2d      	cbnz	r5, 800a66a <__d2b+0x7a>
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	f1b8 0300 	subs.w	r3, r8, #0
 800a624:	d026      	beq.n	800a674 <__d2b+0x84>
 800a626:	4668      	mov	r0, sp
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	f7ff fd17 	bl	800a05c <__lo0bits>
 800a62e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a632:	b1e8      	cbz	r0, 800a670 <__d2b+0x80>
 800a634:	f1c0 0320 	rsb	r3, r0, #32
 800a638:	fa02 f303 	lsl.w	r3, r2, r3
 800a63c:	430b      	orrs	r3, r1
 800a63e:	40c2      	lsrs	r2, r0
 800a640:	6163      	str	r3, [r4, #20]
 800a642:	9201      	str	r2, [sp, #4]
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	61a3      	str	r3, [r4, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bf14      	ite	ne
 800a64c:	2202      	movne	r2, #2
 800a64e:	2201      	moveq	r2, #1
 800a650:	6122      	str	r2, [r4, #16]
 800a652:	b1bd      	cbz	r5, 800a684 <__d2b+0x94>
 800a654:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a658:	4405      	add	r5, r0
 800a65a:	603d      	str	r5, [r7, #0]
 800a65c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a660:	6030      	str	r0, [r6, #0]
 800a662:	4620      	mov	r0, r4
 800a664:	b003      	add	sp, #12
 800a666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a66e:	e7d6      	b.n	800a61e <__d2b+0x2e>
 800a670:	6161      	str	r1, [r4, #20]
 800a672:	e7e7      	b.n	800a644 <__d2b+0x54>
 800a674:	a801      	add	r0, sp, #4
 800a676:	f7ff fcf1 	bl	800a05c <__lo0bits>
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	6163      	str	r3, [r4, #20]
 800a67e:	3020      	adds	r0, #32
 800a680:	2201      	movs	r2, #1
 800a682:	e7e5      	b.n	800a650 <__d2b+0x60>
 800a684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a68c:	6038      	str	r0, [r7, #0]
 800a68e:	6918      	ldr	r0, [r3, #16]
 800a690:	f7ff fcc4 	bl	800a01c <__hi0bits>
 800a694:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a698:	e7e2      	b.n	800a660 <__d2b+0x70>
 800a69a:	bf00      	nop
 800a69c:	0800b896 	.word	0x0800b896
 800a6a0:	0800b907 	.word	0x0800b907

0800a6a4 <__ratio>:
 800a6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	4688      	mov	r8, r1
 800a6aa:	4669      	mov	r1, sp
 800a6ac:	4681      	mov	r9, r0
 800a6ae:	f7ff ff55 	bl	800a55c <__b2d>
 800a6b2:	a901      	add	r1, sp, #4
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	ec55 4b10 	vmov	r4, r5, d0
 800a6ba:	f7ff ff4f 	bl	800a55c <__b2d>
 800a6be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6c6:	eba3 0c02 	sub.w	ip, r3, r2
 800a6ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6ce:	1a9b      	subs	r3, r3, r2
 800a6d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6d4:	ec51 0b10 	vmov	r0, r1, d0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	bfd6      	itet	le
 800a6dc:	460a      	movle	r2, r1
 800a6de:	462a      	movgt	r2, r5
 800a6e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6e4:	468b      	mov	fp, r1
 800a6e6:	462f      	mov	r7, r5
 800a6e8:	bfd4      	ite	le
 800a6ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	ee10 2a10 	vmov	r2, s0
 800a6f8:	465b      	mov	r3, fp
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f6 f8a6 	bl	800084c <__aeabi_ddiv>
 800a700:	ec41 0b10 	vmov	d0, r0, r1
 800a704:	b003      	add	sp, #12
 800a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a70a <__copybits>:
 800a70a:	3901      	subs	r1, #1
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	1149      	asrs	r1, r1, #5
 800a710:	6914      	ldr	r4, [r2, #16]
 800a712:	3101      	adds	r1, #1
 800a714:	f102 0314 	add.w	r3, r2, #20
 800a718:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a71c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a720:	1f05      	subs	r5, r0, #4
 800a722:	42a3      	cmp	r3, r4
 800a724:	d30c      	bcc.n	800a740 <__copybits+0x36>
 800a726:	1aa3      	subs	r3, r4, r2
 800a728:	3b11      	subs	r3, #17
 800a72a:	f023 0303 	bic.w	r3, r3, #3
 800a72e:	3211      	adds	r2, #17
 800a730:	42a2      	cmp	r2, r4
 800a732:	bf88      	it	hi
 800a734:	2300      	movhi	r3, #0
 800a736:	4418      	add	r0, r3
 800a738:	2300      	movs	r3, #0
 800a73a:	4288      	cmp	r0, r1
 800a73c:	d305      	bcc.n	800a74a <__copybits+0x40>
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
 800a740:	f853 6b04 	ldr.w	r6, [r3], #4
 800a744:	f845 6f04 	str.w	r6, [r5, #4]!
 800a748:	e7eb      	b.n	800a722 <__copybits+0x18>
 800a74a:	f840 3b04 	str.w	r3, [r0], #4
 800a74e:	e7f4      	b.n	800a73a <__copybits+0x30>

0800a750 <__any_on>:
 800a750:	f100 0214 	add.w	r2, r0, #20
 800a754:	6900      	ldr	r0, [r0, #16]
 800a756:	114b      	asrs	r3, r1, #5
 800a758:	4298      	cmp	r0, r3
 800a75a:	b510      	push	{r4, lr}
 800a75c:	db11      	blt.n	800a782 <__any_on+0x32>
 800a75e:	dd0a      	ble.n	800a776 <__any_on+0x26>
 800a760:	f011 011f 	ands.w	r1, r1, #31
 800a764:	d007      	beq.n	800a776 <__any_on+0x26>
 800a766:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a76a:	fa24 f001 	lsr.w	r0, r4, r1
 800a76e:	fa00 f101 	lsl.w	r1, r0, r1
 800a772:	428c      	cmp	r4, r1
 800a774:	d10b      	bne.n	800a78e <__any_on+0x3e>
 800a776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d803      	bhi.n	800a786 <__any_on+0x36>
 800a77e:	2000      	movs	r0, #0
 800a780:	bd10      	pop	{r4, pc}
 800a782:	4603      	mov	r3, r0
 800a784:	e7f7      	b.n	800a776 <__any_on+0x26>
 800a786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a78a:	2900      	cmp	r1, #0
 800a78c:	d0f5      	beq.n	800a77a <__any_on+0x2a>
 800a78e:	2001      	movs	r0, #1
 800a790:	e7f6      	b.n	800a780 <__any_on+0x30>

0800a792 <__ascii_wctomb>:
 800a792:	b149      	cbz	r1, 800a7a8 <__ascii_wctomb+0x16>
 800a794:	2aff      	cmp	r2, #255	; 0xff
 800a796:	bf85      	ittet	hi
 800a798:	238a      	movhi	r3, #138	; 0x8a
 800a79a:	6003      	strhi	r3, [r0, #0]
 800a79c:	700a      	strbls	r2, [r1, #0]
 800a79e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7a2:	bf98      	it	ls
 800a7a4:	2001      	movls	r0, #1
 800a7a6:	4770      	bx	lr
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	4770      	bx	lr

0800a7ac <__ssputs_r>:
 800a7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b0:	688e      	ldr	r6, [r1, #8]
 800a7b2:	461f      	mov	r7, r3
 800a7b4:	42be      	cmp	r6, r7
 800a7b6:	680b      	ldr	r3, [r1, #0]
 800a7b8:	4682      	mov	sl, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	4690      	mov	r8, r2
 800a7be:	d82c      	bhi.n	800a81a <__ssputs_r+0x6e>
 800a7c0:	898a      	ldrh	r2, [r1, #12]
 800a7c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7c6:	d026      	beq.n	800a816 <__ssputs_r+0x6a>
 800a7c8:	6965      	ldr	r5, [r4, #20]
 800a7ca:	6909      	ldr	r1, [r1, #16]
 800a7cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7d0:	eba3 0901 	sub.w	r9, r3, r1
 800a7d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7d8:	1c7b      	adds	r3, r7, #1
 800a7da:	444b      	add	r3, r9
 800a7dc:	106d      	asrs	r5, r5, #1
 800a7de:	429d      	cmp	r5, r3
 800a7e0:	bf38      	it	cc
 800a7e2:	461d      	movcc	r5, r3
 800a7e4:	0553      	lsls	r3, r2, #21
 800a7e6:	d527      	bpl.n	800a838 <__ssputs_r+0x8c>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	f7ff fa87 	bl	8009cfc <_malloc_r>
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	b360      	cbz	r0, 800a84c <__ssputs_r+0xa0>
 800a7f2:	6921      	ldr	r1, [r4, #16]
 800a7f4:	464a      	mov	r2, r9
 800a7f6:	f7fe fe80 	bl	80094fa <memcpy>
 800a7fa:	89a3      	ldrh	r3, [r4, #12]
 800a7fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	6126      	str	r6, [r4, #16]
 800a808:	6165      	str	r5, [r4, #20]
 800a80a:	444e      	add	r6, r9
 800a80c:	eba5 0509 	sub.w	r5, r5, r9
 800a810:	6026      	str	r6, [r4, #0]
 800a812:	60a5      	str	r5, [r4, #8]
 800a814:	463e      	mov	r6, r7
 800a816:	42be      	cmp	r6, r7
 800a818:	d900      	bls.n	800a81c <__ssputs_r+0x70>
 800a81a:	463e      	mov	r6, r7
 800a81c:	6820      	ldr	r0, [r4, #0]
 800a81e:	4632      	mov	r2, r6
 800a820:	4641      	mov	r1, r8
 800a822:	f000 fb6b 	bl	800aefc <memmove>
 800a826:	68a3      	ldr	r3, [r4, #8]
 800a828:	1b9b      	subs	r3, r3, r6
 800a82a:	60a3      	str	r3, [r4, #8]
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	4433      	add	r3, r6
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	2000      	movs	r0, #0
 800a834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a838:	462a      	mov	r2, r5
 800a83a:	f000 fba6 	bl	800af8a <_realloc_r>
 800a83e:	4606      	mov	r6, r0
 800a840:	2800      	cmp	r0, #0
 800a842:	d1e0      	bne.n	800a806 <__ssputs_r+0x5a>
 800a844:	6921      	ldr	r1, [r4, #16]
 800a846:	4650      	mov	r0, sl
 800a848:	f7fe fe8c 	bl	8009564 <_free_r>
 800a84c:	230c      	movs	r3, #12
 800a84e:	f8ca 3000 	str.w	r3, [sl]
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295
 800a85e:	e7e9      	b.n	800a834 <__ssputs_r+0x88>

0800a860 <_svfiprintf_r>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	4698      	mov	r8, r3
 800a866:	898b      	ldrh	r3, [r1, #12]
 800a868:	061b      	lsls	r3, r3, #24
 800a86a:	b09d      	sub	sp, #116	; 0x74
 800a86c:	4607      	mov	r7, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	4614      	mov	r4, r2
 800a872:	d50e      	bpl.n	800a892 <_svfiprintf_r+0x32>
 800a874:	690b      	ldr	r3, [r1, #16]
 800a876:	b963      	cbnz	r3, 800a892 <_svfiprintf_r+0x32>
 800a878:	2140      	movs	r1, #64	; 0x40
 800a87a:	f7ff fa3f 	bl	8009cfc <_malloc_r>
 800a87e:	6028      	str	r0, [r5, #0]
 800a880:	6128      	str	r0, [r5, #16]
 800a882:	b920      	cbnz	r0, 800a88e <_svfiprintf_r+0x2e>
 800a884:	230c      	movs	r3, #12
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	e0d0      	b.n	800aa30 <_svfiprintf_r+0x1d0>
 800a88e:	2340      	movs	r3, #64	; 0x40
 800a890:	616b      	str	r3, [r5, #20]
 800a892:	2300      	movs	r3, #0
 800a894:	9309      	str	r3, [sp, #36]	; 0x24
 800a896:	2320      	movs	r3, #32
 800a898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8a0:	2330      	movs	r3, #48	; 0x30
 800a8a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa48 <_svfiprintf_r+0x1e8>
 800a8a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8aa:	f04f 0901 	mov.w	r9, #1
 800a8ae:	4623      	mov	r3, r4
 800a8b0:	469a      	mov	sl, r3
 800a8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8b6:	b10a      	cbz	r2, 800a8bc <_svfiprintf_r+0x5c>
 800a8b8:	2a25      	cmp	r2, #37	; 0x25
 800a8ba:	d1f9      	bne.n	800a8b0 <_svfiprintf_r+0x50>
 800a8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a8c0:	d00b      	beq.n	800a8da <_svfiprintf_r+0x7a>
 800a8c2:	465b      	mov	r3, fp
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f7ff ff6f 	bl	800a7ac <__ssputs_r>
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	f000 80a9 	beq.w	800aa26 <_svfiprintf_r+0x1c6>
 800a8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d6:	445a      	add	r2, fp
 800a8d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a8da:	f89a 3000 	ldrb.w	r3, [sl]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 80a1 	beq.w	800aa26 <_svfiprintf_r+0x1c6>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8ee:	f10a 0a01 	add.w	sl, sl, #1
 800a8f2:	9304      	str	r3, [sp, #16]
 800a8f4:	9307      	str	r3, [sp, #28]
 800a8f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a8fc:	4654      	mov	r4, sl
 800a8fe:	2205      	movs	r2, #5
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	4850      	ldr	r0, [pc, #320]	; (800aa48 <_svfiprintf_r+0x1e8>)
 800a906:	f7f5 fc6b 	bl	80001e0 <memchr>
 800a90a:	9a04      	ldr	r2, [sp, #16]
 800a90c:	b9d8      	cbnz	r0, 800a946 <_svfiprintf_r+0xe6>
 800a90e:	06d0      	lsls	r0, r2, #27
 800a910:	bf44      	itt	mi
 800a912:	2320      	movmi	r3, #32
 800a914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a918:	0711      	lsls	r1, r2, #28
 800a91a:	bf44      	itt	mi
 800a91c:	232b      	movmi	r3, #43	; 0x2b
 800a91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a922:	f89a 3000 	ldrb.w	r3, [sl]
 800a926:	2b2a      	cmp	r3, #42	; 0x2a
 800a928:	d015      	beq.n	800a956 <_svfiprintf_r+0xf6>
 800a92a:	9a07      	ldr	r2, [sp, #28]
 800a92c:	4654      	mov	r4, sl
 800a92e:	2000      	movs	r0, #0
 800a930:	f04f 0c0a 	mov.w	ip, #10
 800a934:	4621      	mov	r1, r4
 800a936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a93a:	3b30      	subs	r3, #48	; 0x30
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	d94d      	bls.n	800a9dc <_svfiprintf_r+0x17c>
 800a940:	b1b0      	cbz	r0, 800a970 <_svfiprintf_r+0x110>
 800a942:	9207      	str	r2, [sp, #28]
 800a944:	e014      	b.n	800a970 <_svfiprintf_r+0x110>
 800a946:	eba0 0308 	sub.w	r3, r0, r8
 800a94a:	fa09 f303 	lsl.w	r3, r9, r3
 800a94e:	4313      	orrs	r3, r2
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	46a2      	mov	sl, r4
 800a954:	e7d2      	b.n	800a8fc <_svfiprintf_r+0x9c>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	1d19      	adds	r1, r3, #4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	9103      	str	r1, [sp, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	bfbb      	ittet	lt
 800a962:	425b      	neglt	r3, r3
 800a964:	f042 0202 	orrlt.w	r2, r2, #2
 800a968:	9307      	strge	r3, [sp, #28]
 800a96a:	9307      	strlt	r3, [sp, #28]
 800a96c:	bfb8      	it	lt
 800a96e:	9204      	strlt	r2, [sp, #16]
 800a970:	7823      	ldrb	r3, [r4, #0]
 800a972:	2b2e      	cmp	r3, #46	; 0x2e
 800a974:	d10c      	bne.n	800a990 <_svfiprintf_r+0x130>
 800a976:	7863      	ldrb	r3, [r4, #1]
 800a978:	2b2a      	cmp	r3, #42	; 0x2a
 800a97a:	d134      	bne.n	800a9e6 <_svfiprintf_r+0x186>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	1d1a      	adds	r2, r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	9203      	str	r2, [sp, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	bfb8      	it	lt
 800a988:	f04f 33ff 	movlt.w	r3, #4294967295
 800a98c:	3402      	adds	r4, #2
 800a98e:	9305      	str	r3, [sp, #20]
 800a990:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa58 <_svfiprintf_r+0x1f8>
 800a994:	7821      	ldrb	r1, [r4, #0]
 800a996:	2203      	movs	r2, #3
 800a998:	4650      	mov	r0, sl
 800a99a:	f7f5 fc21 	bl	80001e0 <memchr>
 800a99e:	b138      	cbz	r0, 800a9b0 <_svfiprintf_r+0x150>
 800a9a0:	9b04      	ldr	r3, [sp, #16]
 800a9a2:	eba0 000a 	sub.w	r0, r0, sl
 800a9a6:	2240      	movs	r2, #64	; 0x40
 800a9a8:	4082      	lsls	r2, r0
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	3401      	adds	r4, #1
 800a9ae:	9304      	str	r3, [sp, #16]
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	4825      	ldr	r0, [pc, #148]	; (800aa4c <_svfiprintf_r+0x1ec>)
 800a9b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9ba:	2206      	movs	r2, #6
 800a9bc:	f7f5 fc10 	bl	80001e0 <memchr>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d038      	beq.n	800aa36 <_svfiprintf_r+0x1d6>
 800a9c4:	4b22      	ldr	r3, [pc, #136]	; (800aa50 <_svfiprintf_r+0x1f0>)
 800a9c6:	bb1b      	cbnz	r3, 800aa10 <_svfiprintf_r+0x1b0>
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	3307      	adds	r3, #7
 800a9cc:	f023 0307 	bic.w	r3, r3, #7
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	9303      	str	r3, [sp, #12]
 800a9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d6:	4433      	add	r3, r6
 800a9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9da:	e768      	b.n	800a8ae <_svfiprintf_r+0x4e>
 800a9dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	e7a6      	b.n	800a934 <_svfiprintf_r+0xd4>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	3401      	adds	r4, #1
 800a9ea:	9305      	str	r3, [sp, #20]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f04f 0c0a 	mov.w	ip, #10
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9f8:	3a30      	subs	r2, #48	; 0x30
 800a9fa:	2a09      	cmp	r2, #9
 800a9fc:	d903      	bls.n	800aa06 <_svfiprintf_r+0x1a6>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0c6      	beq.n	800a990 <_svfiprintf_r+0x130>
 800aa02:	9105      	str	r1, [sp, #20]
 800aa04:	e7c4      	b.n	800a990 <_svfiprintf_r+0x130>
 800aa06:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e7f0      	b.n	800a9f2 <_svfiprintf_r+0x192>
 800aa10:	ab03      	add	r3, sp, #12
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	462a      	mov	r2, r5
 800aa16:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <_svfiprintf_r+0x1f4>)
 800aa18:	a904      	add	r1, sp, #16
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	f3af 8000 	nop.w
 800aa20:	1c42      	adds	r2, r0, #1
 800aa22:	4606      	mov	r6, r0
 800aa24:	d1d6      	bne.n	800a9d4 <_svfiprintf_r+0x174>
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	065b      	lsls	r3, r3, #25
 800aa2a:	f53f af2d 	bmi.w	800a888 <_svfiprintf_r+0x28>
 800aa2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa30:	b01d      	add	sp, #116	; 0x74
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	ab03      	add	r3, sp, #12
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <_svfiprintf_r+0x1f4>)
 800aa3e:	a904      	add	r1, sp, #16
 800aa40:	4638      	mov	r0, r7
 800aa42:	f000 f879 	bl	800ab38 <_printf_i>
 800aa46:	e7eb      	b.n	800aa20 <_svfiprintf_r+0x1c0>
 800aa48:	0800ba5c 	.word	0x0800ba5c
 800aa4c:	0800ba66 	.word	0x0800ba66
 800aa50:	00000000 	.word	0x00000000
 800aa54:	0800a7ad 	.word	0x0800a7ad
 800aa58:	0800ba62 	.word	0x0800ba62

0800aa5c <_printf_common>:
 800aa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa60:	4616      	mov	r6, r2
 800aa62:	4699      	mov	r9, r3
 800aa64:	688a      	ldr	r2, [r1, #8]
 800aa66:	690b      	ldr	r3, [r1, #16]
 800aa68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	bfb8      	it	lt
 800aa70:	4613      	movlt	r3, r2
 800aa72:	6033      	str	r3, [r6, #0]
 800aa74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa78:	4607      	mov	r7, r0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	b10a      	cbz	r2, 800aa82 <_printf_common+0x26>
 800aa7e:	3301      	adds	r3, #1
 800aa80:	6033      	str	r3, [r6, #0]
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	0699      	lsls	r1, r3, #26
 800aa86:	bf42      	ittt	mi
 800aa88:	6833      	ldrmi	r3, [r6, #0]
 800aa8a:	3302      	addmi	r3, #2
 800aa8c:	6033      	strmi	r3, [r6, #0]
 800aa8e:	6825      	ldr	r5, [r4, #0]
 800aa90:	f015 0506 	ands.w	r5, r5, #6
 800aa94:	d106      	bne.n	800aaa4 <_printf_common+0x48>
 800aa96:	f104 0a19 	add.w	sl, r4, #25
 800aa9a:	68e3      	ldr	r3, [r4, #12]
 800aa9c:	6832      	ldr	r2, [r6, #0]
 800aa9e:	1a9b      	subs	r3, r3, r2
 800aaa0:	42ab      	cmp	r3, r5
 800aaa2:	dc26      	bgt.n	800aaf2 <_printf_common+0x96>
 800aaa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaa8:	1e13      	subs	r3, r2, #0
 800aaaa:	6822      	ldr	r2, [r4, #0]
 800aaac:	bf18      	it	ne
 800aaae:	2301      	movne	r3, #1
 800aab0:	0692      	lsls	r2, r2, #26
 800aab2:	d42b      	bmi.n	800ab0c <_printf_common+0xb0>
 800aab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aab8:	4649      	mov	r1, r9
 800aaba:	4638      	mov	r0, r7
 800aabc:	47c0      	blx	r8
 800aabe:	3001      	adds	r0, #1
 800aac0:	d01e      	beq.n	800ab00 <_printf_common+0xa4>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	6922      	ldr	r2, [r4, #16]
 800aac6:	f003 0306 	and.w	r3, r3, #6
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	bf02      	ittt	eq
 800aace:	68e5      	ldreq	r5, [r4, #12]
 800aad0:	6833      	ldreq	r3, [r6, #0]
 800aad2:	1aed      	subeq	r5, r5, r3
 800aad4:	68a3      	ldr	r3, [r4, #8]
 800aad6:	bf0c      	ite	eq
 800aad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aadc:	2500      	movne	r5, #0
 800aade:	4293      	cmp	r3, r2
 800aae0:	bfc4      	itt	gt
 800aae2:	1a9b      	subgt	r3, r3, r2
 800aae4:	18ed      	addgt	r5, r5, r3
 800aae6:	2600      	movs	r6, #0
 800aae8:	341a      	adds	r4, #26
 800aaea:	42b5      	cmp	r5, r6
 800aaec:	d11a      	bne.n	800ab24 <_printf_common+0xc8>
 800aaee:	2000      	movs	r0, #0
 800aaf0:	e008      	b.n	800ab04 <_printf_common+0xa8>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	4638      	mov	r0, r7
 800aafa:	47c0      	blx	r8
 800aafc:	3001      	adds	r0, #1
 800aafe:	d103      	bne.n	800ab08 <_printf_common+0xac>
 800ab00:	f04f 30ff 	mov.w	r0, #4294967295
 800ab04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab08:	3501      	adds	r5, #1
 800ab0a:	e7c6      	b.n	800aa9a <_printf_common+0x3e>
 800ab0c:	18e1      	adds	r1, r4, r3
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	2030      	movs	r0, #48	; 0x30
 800ab12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab16:	4422      	add	r2, r4
 800ab18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab20:	3302      	adds	r3, #2
 800ab22:	e7c7      	b.n	800aab4 <_printf_common+0x58>
 800ab24:	2301      	movs	r3, #1
 800ab26:	4622      	mov	r2, r4
 800ab28:	4649      	mov	r1, r9
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	47c0      	blx	r8
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d0e6      	beq.n	800ab00 <_printf_common+0xa4>
 800ab32:	3601      	adds	r6, #1
 800ab34:	e7d9      	b.n	800aaea <_printf_common+0x8e>
	...

0800ab38 <_printf_i>:
 800ab38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab3c:	7e0f      	ldrb	r7, [r1, #24]
 800ab3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab40:	2f78      	cmp	r7, #120	; 0x78
 800ab42:	4691      	mov	r9, r2
 800ab44:	4680      	mov	r8, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	469a      	mov	sl, r3
 800ab4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab4e:	d807      	bhi.n	800ab60 <_printf_i+0x28>
 800ab50:	2f62      	cmp	r7, #98	; 0x62
 800ab52:	d80a      	bhi.n	800ab6a <_printf_i+0x32>
 800ab54:	2f00      	cmp	r7, #0
 800ab56:	f000 80d4 	beq.w	800ad02 <_printf_i+0x1ca>
 800ab5a:	2f58      	cmp	r7, #88	; 0x58
 800ab5c:	f000 80c0 	beq.w	800ace0 <_printf_i+0x1a8>
 800ab60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab68:	e03a      	b.n	800abe0 <_printf_i+0xa8>
 800ab6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab6e:	2b15      	cmp	r3, #21
 800ab70:	d8f6      	bhi.n	800ab60 <_printf_i+0x28>
 800ab72:	a101      	add	r1, pc, #4	; (adr r1, 800ab78 <_printf_i+0x40>)
 800ab74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab78:	0800abd1 	.word	0x0800abd1
 800ab7c:	0800abe5 	.word	0x0800abe5
 800ab80:	0800ab61 	.word	0x0800ab61
 800ab84:	0800ab61 	.word	0x0800ab61
 800ab88:	0800ab61 	.word	0x0800ab61
 800ab8c:	0800ab61 	.word	0x0800ab61
 800ab90:	0800abe5 	.word	0x0800abe5
 800ab94:	0800ab61 	.word	0x0800ab61
 800ab98:	0800ab61 	.word	0x0800ab61
 800ab9c:	0800ab61 	.word	0x0800ab61
 800aba0:	0800ab61 	.word	0x0800ab61
 800aba4:	0800ace9 	.word	0x0800ace9
 800aba8:	0800ac11 	.word	0x0800ac11
 800abac:	0800aca3 	.word	0x0800aca3
 800abb0:	0800ab61 	.word	0x0800ab61
 800abb4:	0800ab61 	.word	0x0800ab61
 800abb8:	0800ad0b 	.word	0x0800ad0b
 800abbc:	0800ab61 	.word	0x0800ab61
 800abc0:	0800ac11 	.word	0x0800ac11
 800abc4:	0800ab61 	.word	0x0800ab61
 800abc8:	0800ab61 	.word	0x0800ab61
 800abcc:	0800acab 	.word	0x0800acab
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	1d1a      	adds	r2, r3, #4
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	602a      	str	r2, [r5, #0]
 800abd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abe0:	2301      	movs	r3, #1
 800abe2:	e09f      	b.n	800ad24 <_printf_i+0x1ec>
 800abe4:	6820      	ldr	r0, [r4, #0]
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	0607      	lsls	r7, r0, #24
 800abea:	f103 0104 	add.w	r1, r3, #4
 800abee:	6029      	str	r1, [r5, #0]
 800abf0:	d501      	bpl.n	800abf6 <_printf_i+0xbe>
 800abf2:	681e      	ldr	r6, [r3, #0]
 800abf4:	e003      	b.n	800abfe <_printf_i+0xc6>
 800abf6:	0646      	lsls	r6, r0, #25
 800abf8:	d5fb      	bpl.n	800abf2 <_printf_i+0xba>
 800abfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	da03      	bge.n	800ac0a <_printf_i+0xd2>
 800ac02:	232d      	movs	r3, #45	; 0x2d
 800ac04:	4276      	negs	r6, r6
 800ac06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac0a:	485a      	ldr	r0, [pc, #360]	; (800ad74 <_printf_i+0x23c>)
 800ac0c:	230a      	movs	r3, #10
 800ac0e:	e012      	b.n	800ac36 <_printf_i+0xfe>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	6820      	ldr	r0, [r4, #0]
 800ac14:	1d19      	adds	r1, r3, #4
 800ac16:	6029      	str	r1, [r5, #0]
 800ac18:	0605      	lsls	r5, r0, #24
 800ac1a:	d501      	bpl.n	800ac20 <_printf_i+0xe8>
 800ac1c:	681e      	ldr	r6, [r3, #0]
 800ac1e:	e002      	b.n	800ac26 <_printf_i+0xee>
 800ac20:	0641      	lsls	r1, r0, #25
 800ac22:	d5fb      	bpl.n	800ac1c <_printf_i+0xe4>
 800ac24:	881e      	ldrh	r6, [r3, #0]
 800ac26:	4853      	ldr	r0, [pc, #332]	; (800ad74 <_printf_i+0x23c>)
 800ac28:	2f6f      	cmp	r7, #111	; 0x6f
 800ac2a:	bf0c      	ite	eq
 800ac2c:	2308      	moveq	r3, #8
 800ac2e:	230a      	movne	r3, #10
 800ac30:	2100      	movs	r1, #0
 800ac32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac36:	6865      	ldr	r5, [r4, #4]
 800ac38:	60a5      	str	r5, [r4, #8]
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	bfa2      	ittt	ge
 800ac3e:	6821      	ldrge	r1, [r4, #0]
 800ac40:	f021 0104 	bicge.w	r1, r1, #4
 800ac44:	6021      	strge	r1, [r4, #0]
 800ac46:	b90e      	cbnz	r6, 800ac4c <_printf_i+0x114>
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	d04b      	beq.n	800ace4 <_printf_i+0x1ac>
 800ac4c:	4615      	mov	r5, r2
 800ac4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac52:	fb03 6711 	mls	r7, r3, r1, r6
 800ac56:	5dc7      	ldrb	r7, [r0, r7]
 800ac58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac5c:	4637      	mov	r7, r6
 800ac5e:	42bb      	cmp	r3, r7
 800ac60:	460e      	mov	r6, r1
 800ac62:	d9f4      	bls.n	800ac4e <_printf_i+0x116>
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d10b      	bne.n	800ac80 <_printf_i+0x148>
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	07de      	lsls	r6, r3, #31
 800ac6c:	d508      	bpl.n	800ac80 <_printf_i+0x148>
 800ac6e:	6923      	ldr	r3, [r4, #16]
 800ac70:	6861      	ldr	r1, [r4, #4]
 800ac72:	4299      	cmp	r1, r3
 800ac74:	bfde      	ittt	le
 800ac76:	2330      	movle	r3, #48	; 0x30
 800ac78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac80:	1b52      	subs	r2, r2, r5
 800ac82:	6122      	str	r2, [r4, #16]
 800ac84:	f8cd a000 	str.w	sl, [sp]
 800ac88:	464b      	mov	r3, r9
 800ac8a:	aa03      	add	r2, sp, #12
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4640      	mov	r0, r8
 800ac90:	f7ff fee4 	bl	800aa5c <_printf_common>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d14a      	bne.n	800ad2e <_printf_i+0x1f6>
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	b004      	add	sp, #16
 800ac9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	f043 0320 	orr.w	r3, r3, #32
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	4833      	ldr	r0, [pc, #204]	; (800ad78 <_printf_i+0x240>)
 800acac:	2778      	movs	r7, #120	; 0x78
 800acae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	6829      	ldr	r1, [r5, #0]
 800acb6:	061f      	lsls	r7, r3, #24
 800acb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800acbc:	d402      	bmi.n	800acc4 <_printf_i+0x18c>
 800acbe:	065f      	lsls	r7, r3, #25
 800acc0:	bf48      	it	mi
 800acc2:	b2b6      	uxthmi	r6, r6
 800acc4:	07df      	lsls	r7, r3, #31
 800acc6:	bf48      	it	mi
 800acc8:	f043 0320 	orrmi.w	r3, r3, #32
 800accc:	6029      	str	r1, [r5, #0]
 800acce:	bf48      	it	mi
 800acd0:	6023      	strmi	r3, [r4, #0]
 800acd2:	b91e      	cbnz	r6, 800acdc <_printf_i+0x1a4>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	f023 0320 	bic.w	r3, r3, #32
 800acda:	6023      	str	r3, [r4, #0]
 800acdc:	2310      	movs	r3, #16
 800acde:	e7a7      	b.n	800ac30 <_printf_i+0xf8>
 800ace0:	4824      	ldr	r0, [pc, #144]	; (800ad74 <_printf_i+0x23c>)
 800ace2:	e7e4      	b.n	800acae <_printf_i+0x176>
 800ace4:	4615      	mov	r5, r2
 800ace6:	e7bd      	b.n	800ac64 <_printf_i+0x12c>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	6826      	ldr	r6, [r4, #0]
 800acec:	6961      	ldr	r1, [r4, #20]
 800acee:	1d18      	adds	r0, r3, #4
 800acf0:	6028      	str	r0, [r5, #0]
 800acf2:	0635      	lsls	r5, r6, #24
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	d501      	bpl.n	800acfc <_printf_i+0x1c4>
 800acf8:	6019      	str	r1, [r3, #0]
 800acfa:	e002      	b.n	800ad02 <_printf_i+0x1ca>
 800acfc:	0670      	lsls	r0, r6, #25
 800acfe:	d5fb      	bpl.n	800acf8 <_printf_i+0x1c0>
 800ad00:	8019      	strh	r1, [r3, #0]
 800ad02:	2300      	movs	r3, #0
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	4615      	mov	r5, r2
 800ad08:	e7bc      	b.n	800ac84 <_printf_i+0x14c>
 800ad0a:	682b      	ldr	r3, [r5, #0]
 800ad0c:	1d1a      	adds	r2, r3, #4
 800ad0e:	602a      	str	r2, [r5, #0]
 800ad10:	681d      	ldr	r5, [r3, #0]
 800ad12:	6862      	ldr	r2, [r4, #4]
 800ad14:	2100      	movs	r1, #0
 800ad16:	4628      	mov	r0, r5
 800ad18:	f7f5 fa62 	bl	80001e0 <memchr>
 800ad1c:	b108      	cbz	r0, 800ad22 <_printf_i+0x1ea>
 800ad1e:	1b40      	subs	r0, r0, r5
 800ad20:	6060      	str	r0, [r4, #4]
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	2300      	movs	r3, #0
 800ad28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad2c:	e7aa      	b.n	800ac84 <_printf_i+0x14c>
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	462a      	mov	r2, r5
 800ad32:	4649      	mov	r1, r9
 800ad34:	4640      	mov	r0, r8
 800ad36:	47d0      	blx	sl
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d0ad      	beq.n	800ac98 <_printf_i+0x160>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	079b      	lsls	r3, r3, #30
 800ad40:	d413      	bmi.n	800ad6a <_printf_i+0x232>
 800ad42:	68e0      	ldr	r0, [r4, #12]
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	4298      	cmp	r0, r3
 800ad48:	bfb8      	it	lt
 800ad4a:	4618      	movlt	r0, r3
 800ad4c:	e7a6      	b.n	800ac9c <_printf_i+0x164>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4632      	mov	r2, r6
 800ad52:	4649      	mov	r1, r9
 800ad54:	4640      	mov	r0, r8
 800ad56:	47d0      	blx	sl
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d09d      	beq.n	800ac98 <_printf_i+0x160>
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	9903      	ldr	r1, [sp, #12]
 800ad62:	1a5b      	subs	r3, r3, r1
 800ad64:	42ab      	cmp	r3, r5
 800ad66:	dcf2      	bgt.n	800ad4e <_printf_i+0x216>
 800ad68:	e7eb      	b.n	800ad42 <_printf_i+0x20a>
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	f104 0619 	add.w	r6, r4, #25
 800ad70:	e7f5      	b.n	800ad5e <_printf_i+0x226>
 800ad72:	bf00      	nop
 800ad74:	0800ba6d 	.word	0x0800ba6d
 800ad78:	0800ba7e 	.word	0x0800ba7e

0800ad7c <__sflush_r>:
 800ad7c:	898a      	ldrh	r2, [r1, #12]
 800ad7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad82:	4605      	mov	r5, r0
 800ad84:	0710      	lsls	r0, r2, #28
 800ad86:	460c      	mov	r4, r1
 800ad88:	d458      	bmi.n	800ae3c <__sflush_r+0xc0>
 800ad8a:	684b      	ldr	r3, [r1, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dc05      	bgt.n	800ad9c <__sflush_r+0x20>
 800ad90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dc02      	bgt.n	800ad9c <__sflush_r+0x20>
 800ad96:	2000      	movs	r0, #0
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	d0f9      	beq.n	800ad96 <__sflush_r+0x1a>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ada8:	682f      	ldr	r7, [r5, #0]
 800adaa:	6a21      	ldr	r1, [r4, #32]
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	d032      	beq.n	800ae16 <__sflush_r+0x9a>
 800adb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	075a      	lsls	r2, r3, #29
 800adb6:	d505      	bpl.n	800adc4 <__sflush_r+0x48>
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	1ac0      	subs	r0, r0, r3
 800adbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adbe:	b10b      	cbz	r3, 800adc4 <__sflush_r+0x48>
 800adc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc2:	1ac0      	subs	r0, r0, r3
 800adc4:	2300      	movs	r3, #0
 800adc6:	4602      	mov	r2, r0
 800adc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adca:	6a21      	ldr	r1, [r4, #32]
 800adcc:	4628      	mov	r0, r5
 800adce:	47b0      	blx	r6
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	d106      	bne.n	800ade4 <__sflush_r+0x68>
 800add6:	6829      	ldr	r1, [r5, #0]
 800add8:	291d      	cmp	r1, #29
 800adda:	d82b      	bhi.n	800ae34 <__sflush_r+0xb8>
 800addc:	4a29      	ldr	r2, [pc, #164]	; (800ae84 <__sflush_r+0x108>)
 800adde:	410a      	asrs	r2, r1
 800ade0:	07d6      	lsls	r6, r2, #31
 800ade2:	d427      	bmi.n	800ae34 <__sflush_r+0xb8>
 800ade4:	2200      	movs	r2, #0
 800ade6:	6062      	str	r2, [r4, #4]
 800ade8:	04d9      	lsls	r1, r3, #19
 800adea:	6922      	ldr	r2, [r4, #16]
 800adec:	6022      	str	r2, [r4, #0]
 800adee:	d504      	bpl.n	800adfa <__sflush_r+0x7e>
 800adf0:	1c42      	adds	r2, r0, #1
 800adf2:	d101      	bne.n	800adf8 <__sflush_r+0x7c>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	b903      	cbnz	r3, 800adfa <__sflush_r+0x7e>
 800adf8:	6560      	str	r0, [r4, #84]	; 0x54
 800adfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adfc:	602f      	str	r7, [r5, #0]
 800adfe:	2900      	cmp	r1, #0
 800ae00:	d0c9      	beq.n	800ad96 <__sflush_r+0x1a>
 800ae02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae06:	4299      	cmp	r1, r3
 800ae08:	d002      	beq.n	800ae10 <__sflush_r+0x94>
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f7fe fbaa 	bl	8009564 <_free_r>
 800ae10:	2000      	movs	r0, #0
 800ae12:	6360      	str	r0, [r4, #52]	; 0x34
 800ae14:	e7c0      	b.n	800ad98 <__sflush_r+0x1c>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b0      	blx	r6
 800ae1c:	1c41      	adds	r1, r0, #1
 800ae1e:	d1c8      	bne.n	800adb2 <__sflush_r+0x36>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0c5      	beq.n	800adb2 <__sflush_r+0x36>
 800ae26:	2b1d      	cmp	r3, #29
 800ae28:	d001      	beq.n	800ae2e <__sflush_r+0xb2>
 800ae2a:	2b16      	cmp	r3, #22
 800ae2c:	d101      	bne.n	800ae32 <__sflush_r+0xb6>
 800ae2e:	602f      	str	r7, [r5, #0]
 800ae30:	e7b1      	b.n	800ad96 <__sflush_r+0x1a>
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	e7ad      	b.n	800ad98 <__sflush_r+0x1c>
 800ae3c:	690f      	ldr	r7, [r1, #16]
 800ae3e:	2f00      	cmp	r7, #0
 800ae40:	d0a9      	beq.n	800ad96 <__sflush_r+0x1a>
 800ae42:	0793      	lsls	r3, r2, #30
 800ae44:	680e      	ldr	r6, [r1, #0]
 800ae46:	bf08      	it	eq
 800ae48:	694b      	ldreq	r3, [r1, #20]
 800ae4a:	600f      	str	r7, [r1, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	2300      	movne	r3, #0
 800ae50:	eba6 0807 	sub.w	r8, r6, r7
 800ae54:	608b      	str	r3, [r1, #8]
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	dd9c      	ble.n	800ad96 <__sflush_r+0x1a>
 800ae5c:	6a21      	ldr	r1, [r4, #32]
 800ae5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae60:	4643      	mov	r3, r8
 800ae62:	463a      	mov	r2, r7
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b0      	blx	r6
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	dc06      	bgt.n	800ae7a <__sflush_r+0xfe>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295
 800ae78:	e78e      	b.n	800ad98 <__sflush_r+0x1c>
 800ae7a:	4407      	add	r7, r0
 800ae7c:	eba8 0800 	sub.w	r8, r8, r0
 800ae80:	e7e9      	b.n	800ae56 <__sflush_r+0xda>
 800ae82:	bf00      	nop
 800ae84:	dfbffffe 	.word	0xdfbffffe

0800ae88 <_fflush_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	690b      	ldr	r3, [r1, #16]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	b913      	cbnz	r3, 800ae98 <_fflush_r+0x10>
 800ae92:	2500      	movs	r5, #0
 800ae94:	4628      	mov	r0, r5
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	b118      	cbz	r0, 800aea2 <_fflush_r+0x1a>
 800ae9a:	6a03      	ldr	r3, [r0, #32]
 800ae9c:	b90b      	cbnz	r3, 800aea2 <_fflush_r+0x1a>
 800ae9e:	f7fe f927 	bl	80090f0 <__sinit>
 800aea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d0f3      	beq.n	800ae92 <_fflush_r+0xa>
 800aeaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeac:	07d0      	lsls	r0, r2, #31
 800aeae:	d404      	bmi.n	800aeba <_fflush_r+0x32>
 800aeb0:	0599      	lsls	r1, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_fflush_r+0x32>
 800aeb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb6:	f7fe fb1e 	bl	80094f6 <__retarget_lock_acquire_recursive>
 800aeba:	4628      	mov	r0, r5
 800aebc:	4621      	mov	r1, r4
 800aebe:	f7ff ff5d 	bl	800ad7c <__sflush_r>
 800aec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aec4:	07da      	lsls	r2, r3, #31
 800aec6:	4605      	mov	r5, r0
 800aec8:	d4e4      	bmi.n	800ae94 <_fflush_r+0xc>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	059b      	lsls	r3, r3, #22
 800aece:	d4e1      	bmi.n	800ae94 <_fflush_r+0xc>
 800aed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aed2:	f7fe fb11 	bl	80094f8 <__retarget_lock_release_recursive>
 800aed6:	e7dd      	b.n	800ae94 <_fflush_r+0xc>

0800aed8 <fiprintf>:
 800aed8:	b40e      	push	{r1, r2, r3}
 800aeda:	b503      	push	{r0, r1, lr}
 800aedc:	4601      	mov	r1, r0
 800aede:	ab03      	add	r3, sp, #12
 800aee0:	4805      	ldr	r0, [pc, #20]	; (800aef8 <fiprintf+0x20>)
 800aee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee6:	6800      	ldr	r0, [r0, #0]
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	f000 f8a7 	bl	800b03c <_vfiprintf_r>
 800aeee:	b002      	add	sp, #8
 800aef0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aef4:	b003      	add	sp, #12
 800aef6:	4770      	bx	lr
 800aef8:	200001d8 	.word	0x200001d8

0800aefc <memmove>:
 800aefc:	4288      	cmp	r0, r1
 800aefe:	b510      	push	{r4, lr}
 800af00:	eb01 0402 	add.w	r4, r1, r2
 800af04:	d902      	bls.n	800af0c <memmove+0x10>
 800af06:	4284      	cmp	r4, r0
 800af08:	4623      	mov	r3, r4
 800af0a:	d807      	bhi.n	800af1c <memmove+0x20>
 800af0c:	1e43      	subs	r3, r0, #1
 800af0e:	42a1      	cmp	r1, r4
 800af10:	d008      	beq.n	800af24 <memmove+0x28>
 800af12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af1a:	e7f8      	b.n	800af0e <memmove+0x12>
 800af1c:	4402      	add	r2, r0
 800af1e:	4601      	mov	r1, r0
 800af20:	428a      	cmp	r2, r1
 800af22:	d100      	bne.n	800af26 <memmove+0x2a>
 800af24:	bd10      	pop	{r4, pc}
 800af26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af2e:	e7f7      	b.n	800af20 <memmove+0x24>

0800af30 <_sbrk_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4d06      	ldr	r5, [pc, #24]	; (800af4c <_sbrk_r+0x1c>)
 800af34:	2300      	movs	r3, #0
 800af36:	4604      	mov	r4, r0
 800af38:	4608      	mov	r0, r1
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	f7f6 fbe0 	bl	8001700 <_sbrk>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_sbrk_r+0x1a>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_sbrk_r+0x1a>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	20001f2c 	.word	0x20001f2c

0800af50 <abort>:
 800af50:	b508      	push	{r3, lr}
 800af52:	2006      	movs	r0, #6
 800af54:	f000 fa4a 	bl	800b3ec <raise>
 800af58:	2001      	movs	r0, #1
 800af5a:	f7f6 fb59 	bl	8001610 <_exit>

0800af5e <_calloc_r>:
 800af5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af60:	fba1 2402 	umull	r2, r4, r1, r2
 800af64:	b94c      	cbnz	r4, 800af7a <_calloc_r+0x1c>
 800af66:	4611      	mov	r1, r2
 800af68:	9201      	str	r2, [sp, #4]
 800af6a:	f7fe fec7 	bl	8009cfc <_malloc_r>
 800af6e:	9a01      	ldr	r2, [sp, #4]
 800af70:	4605      	mov	r5, r0
 800af72:	b930      	cbnz	r0, 800af82 <_calloc_r+0x24>
 800af74:	4628      	mov	r0, r5
 800af76:	b003      	add	sp, #12
 800af78:	bd30      	pop	{r4, r5, pc}
 800af7a:	220c      	movs	r2, #12
 800af7c:	6002      	str	r2, [r0, #0]
 800af7e:	2500      	movs	r5, #0
 800af80:	e7f8      	b.n	800af74 <_calloc_r+0x16>
 800af82:	4621      	mov	r1, r4
 800af84:	f7fe f966 	bl	8009254 <memset>
 800af88:	e7f4      	b.n	800af74 <_calloc_r+0x16>

0800af8a <_realloc_r>:
 800af8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8e:	4680      	mov	r8, r0
 800af90:	4614      	mov	r4, r2
 800af92:	460e      	mov	r6, r1
 800af94:	b921      	cbnz	r1, 800afa0 <_realloc_r+0x16>
 800af96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af9a:	4611      	mov	r1, r2
 800af9c:	f7fe beae 	b.w	8009cfc <_malloc_r>
 800afa0:	b92a      	cbnz	r2, 800afae <_realloc_r+0x24>
 800afa2:	f7fe fadf 	bl	8009564 <_free_r>
 800afa6:	4625      	mov	r5, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afae:	f000 fa39 	bl	800b424 <_malloc_usable_size_r>
 800afb2:	4284      	cmp	r4, r0
 800afb4:	4607      	mov	r7, r0
 800afb6:	d802      	bhi.n	800afbe <_realloc_r+0x34>
 800afb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afbc:	d812      	bhi.n	800afe4 <_realloc_r+0x5a>
 800afbe:	4621      	mov	r1, r4
 800afc0:	4640      	mov	r0, r8
 800afc2:	f7fe fe9b 	bl	8009cfc <_malloc_r>
 800afc6:	4605      	mov	r5, r0
 800afc8:	2800      	cmp	r0, #0
 800afca:	d0ed      	beq.n	800afa8 <_realloc_r+0x1e>
 800afcc:	42bc      	cmp	r4, r7
 800afce:	4622      	mov	r2, r4
 800afd0:	4631      	mov	r1, r6
 800afd2:	bf28      	it	cs
 800afd4:	463a      	movcs	r2, r7
 800afd6:	f7fe fa90 	bl	80094fa <memcpy>
 800afda:	4631      	mov	r1, r6
 800afdc:	4640      	mov	r0, r8
 800afde:	f7fe fac1 	bl	8009564 <_free_r>
 800afe2:	e7e1      	b.n	800afa8 <_realloc_r+0x1e>
 800afe4:	4635      	mov	r5, r6
 800afe6:	e7df      	b.n	800afa8 <_realloc_r+0x1e>

0800afe8 <__sfputc_r>:
 800afe8:	6893      	ldr	r3, [r2, #8]
 800afea:	3b01      	subs	r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	b410      	push	{r4}
 800aff0:	6093      	str	r3, [r2, #8]
 800aff2:	da08      	bge.n	800b006 <__sfputc_r+0x1e>
 800aff4:	6994      	ldr	r4, [r2, #24]
 800aff6:	42a3      	cmp	r3, r4
 800aff8:	db01      	blt.n	800affe <__sfputc_r+0x16>
 800affa:	290a      	cmp	r1, #10
 800affc:	d103      	bne.n	800b006 <__sfputc_r+0x1e>
 800affe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b002:	f000 b935 	b.w	800b270 <__swbuf_r>
 800b006:	6813      	ldr	r3, [r2, #0]
 800b008:	1c58      	adds	r0, r3, #1
 800b00a:	6010      	str	r0, [r2, #0]
 800b00c:	7019      	strb	r1, [r3, #0]
 800b00e:	4608      	mov	r0, r1
 800b010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <__sfputs_r>:
 800b016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b018:	4606      	mov	r6, r0
 800b01a:	460f      	mov	r7, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	18d5      	adds	r5, r2, r3
 800b020:	42ac      	cmp	r4, r5
 800b022:	d101      	bne.n	800b028 <__sfputs_r+0x12>
 800b024:	2000      	movs	r0, #0
 800b026:	e007      	b.n	800b038 <__sfputs_r+0x22>
 800b028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02c:	463a      	mov	r2, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ffda 	bl	800afe8 <__sfputc_r>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d1f3      	bne.n	800b020 <__sfputs_r+0xa>
 800b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b03c <_vfiprintf_r>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	460d      	mov	r5, r1
 800b042:	b09d      	sub	sp, #116	; 0x74
 800b044:	4614      	mov	r4, r2
 800b046:	4698      	mov	r8, r3
 800b048:	4606      	mov	r6, r0
 800b04a:	b118      	cbz	r0, 800b054 <_vfiprintf_r+0x18>
 800b04c:	6a03      	ldr	r3, [r0, #32]
 800b04e:	b90b      	cbnz	r3, 800b054 <_vfiprintf_r+0x18>
 800b050:	f7fe f84e 	bl	80090f0 <__sinit>
 800b054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b056:	07d9      	lsls	r1, r3, #31
 800b058:	d405      	bmi.n	800b066 <_vfiprintf_r+0x2a>
 800b05a:	89ab      	ldrh	r3, [r5, #12]
 800b05c:	059a      	lsls	r2, r3, #22
 800b05e:	d402      	bmi.n	800b066 <_vfiprintf_r+0x2a>
 800b060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b062:	f7fe fa48 	bl	80094f6 <__retarget_lock_acquire_recursive>
 800b066:	89ab      	ldrh	r3, [r5, #12]
 800b068:	071b      	lsls	r3, r3, #28
 800b06a:	d501      	bpl.n	800b070 <_vfiprintf_r+0x34>
 800b06c:	692b      	ldr	r3, [r5, #16]
 800b06e:	b99b      	cbnz	r3, 800b098 <_vfiprintf_r+0x5c>
 800b070:	4629      	mov	r1, r5
 800b072:	4630      	mov	r0, r6
 800b074:	f000 f93a 	bl	800b2ec <__swsetup_r>
 800b078:	b170      	cbz	r0, 800b098 <_vfiprintf_r+0x5c>
 800b07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b07c:	07dc      	lsls	r4, r3, #31
 800b07e:	d504      	bpl.n	800b08a <_vfiprintf_r+0x4e>
 800b080:	f04f 30ff 	mov.w	r0, #4294967295
 800b084:	b01d      	add	sp, #116	; 0x74
 800b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	0598      	lsls	r0, r3, #22
 800b08e:	d4f7      	bmi.n	800b080 <_vfiprintf_r+0x44>
 800b090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b092:	f7fe fa31 	bl	80094f8 <__retarget_lock_release_recursive>
 800b096:	e7f3      	b.n	800b080 <_vfiprintf_r+0x44>
 800b098:	2300      	movs	r3, #0
 800b09a:	9309      	str	r3, [sp, #36]	; 0x24
 800b09c:	2320      	movs	r3, #32
 800b09e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0a6:	2330      	movs	r3, #48	; 0x30
 800b0a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b25c <_vfiprintf_r+0x220>
 800b0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0b0:	f04f 0901 	mov.w	r9, #1
 800b0b4:	4623      	mov	r3, r4
 800b0b6:	469a      	mov	sl, r3
 800b0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0bc:	b10a      	cbz	r2, 800b0c2 <_vfiprintf_r+0x86>
 800b0be:	2a25      	cmp	r2, #37	; 0x25
 800b0c0:	d1f9      	bne.n	800b0b6 <_vfiprintf_r+0x7a>
 800b0c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b0c6:	d00b      	beq.n	800b0e0 <_vfiprintf_r+0xa4>
 800b0c8:	465b      	mov	r3, fp
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f7ff ffa1 	bl	800b016 <__sfputs_r>
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	f000 80a9 	beq.w	800b22c <_vfiprintf_r+0x1f0>
 800b0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0dc:	445a      	add	r2, fp
 800b0de:	9209      	str	r2, [sp, #36]	; 0x24
 800b0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 80a1 	beq.w	800b22c <_vfiprintf_r+0x1f0>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0f4:	f10a 0a01 	add.w	sl, sl, #1
 800b0f8:	9304      	str	r3, [sp, #16]
 800b0fa:	9307      	str	r3, [sp, #28]
 800b0fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b100:	931a      	str	r3, [sp, #104]	; 0x68
 800b102:	4654      	mov	r4, sl
 800b104:	2205      	movs	r2, #5
 800b106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10a:	4854      	ldr	r0, [pc, #336]	; (800b25c <_vfiprintf_r+0x220>)
 800b10c:	f7f5 f868 	bl	80001e0 <memchr>
 800b110:	9a04      	ldr	r2, [sp, #16]
 800b112:	b9d8      	cbnz	r0, 800b14c <_vfiprintf_r+0x110>
 800b114:	06d1      	lsls	r1, r2, #27
 800b116:	bf44      	itt	mi
 800b118:	2320      	movmi	r3, #32
 800b11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b11e:	0713      	lsls	r3, r2, #28
 800b120:	bf44      	itt	mi
 800b122:	232b      	movmi	r3, #43	; 0x2b
 800b124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b128:	f89a 3000 	ldrb.w	r3, [sl]
 800b12c:	2b2a      	cmp	r3, #42	; 0x2a
 800b12e:	d015      	beq.n	800b15c <_vfiprintf_r+0x120>
 800b130:	9a07      	ldr	r2, [sp, #28]
 800b132:	4654      	mov	r4, sl
 800b134:	2000      	movs	r0, #0
 800b136:	f04f 0c0a 	mov.w	ip, #10
 800b13a:	4621      	mov	r1, r4
 800b13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b140:	3b30      	subs	r3, #48	; 0x30
 800b142:	2b09      	cmp	r3, #9
 800b144:	d94d      	bls.n	800b1e2 <_vfiprintf_r+0x1a6>
 800b146:	b1b0      	cbz	r0, 800b176 <_vfiprintf_r+0x13a>
 800b148:	9207      	str	r2, [sp, #28]
 800b14a:	e014      	b.n	800b176 <_vfiprintf_r+0x13a>
 800b14c:	eba0 0308 	sub.w	r3, r0, r8
 800b150:	fa09 f303 	lsl.w	r3, r9, r3
 800b154:	4313      	orrs	r3, r2
 800b156:	9304      	str	r3, [sp, #16]
 800b158:	46a2      	mov	sl, r4
 800b15a:	e7d2      	b.n	800b102 <_vfiprintf_r+0xc6>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	1d19      	adds	r1, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	9103      	str	r1, [sp, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	bfbb      	ittet	lt
 800b168:	425b      	neglt	r3, r3
 800b16a:	f042 0202 	orrlt.w	r2, r2, #2
 800b16e:	9307      	strge	r3, [sp, #28]
 800b170:	9307      	strlt	r3, [sp, #28]
 800b172:	bfb8      	it	lt
 800b174:	9204      	strlt	r2, [sp, #16]
 800b176:	7823      	ldrb	r3, [r4, #0]
 800b178:	2b2e      	cmp	r3, #46	; 0x2e
 800b17a:	d10c      	bne.n	800b196 <_vfiprintf_r+0x15a>
 800b17c:	7863      	ldrb	r3, [r4, #1]
 800b17e:	2b2a      	cmp	r3, #42	; 0x2a
 800b180:	d134      	bne.n	800b1ec <_vfiprintf_r+0x1b0>
 800b182:	9b03      	ldr	r3, [sp, #12]
 800b184:	1d1a      	adds	r2, r3, #4
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	9203      	str	r2, [sp, #12]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bfb8      	it	lt
 800b18e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b192:	3402      	adds	r4, #2
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b26c <_vfiprintf_r+0x230>
 800b19a:	7821      	ldrb	r1, [r4, #0]
 800b19c:	2203      	movs	r2, #3
 800b19e:	4650      	mov	r0, sl
 800b1a0:	f7f5 f81e 	bl	80001e0 <memchr>
 800b1a4:	b138      	cbz	r0, 800b1b6 <_vfiprintf_r+0x17a>
 800b1a6:	9b04      	ldr	r3, [sp, #16]
 800b1a8:	eba0 000a 	sub.w	r0, r0, sl
 800b1ac:	2240      	movs	r2, #64	; 0x40
 800b1ae:	4082      	lsls	r2, r0
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	3401      	adds	r4, #1
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ba:	4829      	ldr	r0, [pc, #164]	; (800b260 <_vfiprintf_r+0x224>)
 800b1bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1c0:	2206      	movs	r2, #6
 800b1c2:	f7f5 f80d 	bl	80001e0 <memchr>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d03f      	beq.n	800b24a <_vfiprintf_r+0x20e>
 800b1ca:	4b26      	ldr	r3, [pc, #152]	; (800b264 <_vfiprintf_r+0x228>)
 800b1cc:	bb1b      	cbnz	r3, 800b216 <_vfiprintf_r+0x1da>
 800b1ce:	9b03      	ldr	r3, [sp, #12]
 800b1d0:	3307      	adds	r3, #7
 800b1d2:	f023 0307 	bic.w	r3, r3, #7
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	9303      	str	r3, [sp, #12]
 800b1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1dc:	443b      	add	r3, r7
 800b1de:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e0:	e768      	b.n	800b0b4 <_vfiprintf_r+0x78>
 800b1e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	e7a6      	b.n	800b13a <_vfiprintf_r+0xfe>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	3401      	adds	r4, #1
 800b1f0:	9305      	str	r3, [sp, #20]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	f04f 0c0a 	mov.w	ip, #10
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1fe:	3a30      	subs	r2, #48	; 0x30
 800b200:	2a09      	cmp	r2, #9
 800b202:	d903      	bls.n	800b20c <_vfiprintf_r+0x1d0>
 800b204:	2b00      	cmp	r3, #0
 800b206:	d0c6      	beq.n	800b196 <_vfiprintf_r+0x15a>
 800b208:	9105      	str	r1, [sp, #20]
 800b20a:	e7c4      	b.n	800b196 <_vfiprintf_r+0x15a>
 800b20c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b210:	4604      	mov	r4, r0
 800b212:	2301      	movs	r3, #1
 800b214:	e7f0      	b.n	800b1f8 <_vfiprintf_r+0x1bc>
 800b216:	ab03      	add	r3, sp, #12
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	462a      	mov	r2, r5
 800b21c:	4b12      	ldr	r3, [pc, #72]	; (800b268 <_vfiprintf_r+0x22c>)
 800b21e:	a904      	add	r1, sp, #16
 800b220:	4630      	mov	r0, r6
 800b222:	f3af 8000 	nop.w
 800b226:	4607      	mov	r7, r0
 800b228:	1c78      	adds	r0, r7, #1
 800b22a:	d1d6      	bne.n	800b1da <_vfiprintf_r+0x19e>
 800b22c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b22e:	07d9      	lsls	r1, r3, #31
 800b230:	d405      	bmi.n	800b23e <_vfiprintf_r+0x202>
 800b232:	89ab      	ldrh	r3, [r5, #12]
 800b234:	059a      	lsls	r2, r3, #22
 800b236:	d402      	bmi.n	800b23e <_vfiprintf_r+0x202>
 800b238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b23a:	f7fe f95d 	bl	80094f8 <__retarget_lock_release_recursive>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	065b      	lsls	r3, r3, #25
 800b242:	f53f af1d 	bmi.w	800b080 <_vfiprintf_r+0x44>
 800b246:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b248:	e71c      	b.n	800b084 <_vfiprintf_r+0x48>
 800b24a:	ab03      	add	r3, sp, #12
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	462a      	mov	r2, r5
 800b250:	4b05      	ldr	r3, [pc, #20]	; (800b268 <_vfiprintf_r+0x22c>)
 800b252:	a904      	add	r1, sp, #16
 800b254:	4630      	mov	r0, r6
 800b256:	f7ff fc6f 	bl	800ab38 <_printf_i>
 800b25a:	e7e4      	b.n	800b226 <_vfiprintf_r+0x1ea>
 800b25c:	0800ba5c 	.word	0x0800ba5c
 800b260:	0800ba66 	.word	0x0800ba66
 800b264:	00000000 	.word	0x00000000
 800b268:	0800b017 	.word	0x0800b017
 800b26c:	0800ba62 	.word	0x0800ba62

0800b270 <__swbuf_r>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	460e      	mov	r6, r1
 800b274:	4614      	mov	r4, r2
 800b276:	4605      	mov	r5, r0
 800b278:	b118      	cbz	r0, 800b282 <__swbuf_r+0x12>
 800b27a:	6a03      	ldr	r3, [r0, #32]
 800b27c:	b90b      	cbnz	r3, 800b282 <__swbuf_r+0x12>
 800b27e:	f7fd ff37 	bl	80090f0 <__sinit>
 800b282:	69a3      	ldr	r3, [r4, #24]
 800b284:	60a3      	str	r3, [r4, #8]
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	071a      	lsls	r2, r3, #28
 800b28a:	d525      	bpl.n	800b2d8 <__swbuf_r+0x68>
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	b31b      	cbz	r3, 800b2d8 <__swbuf_r+0x68>
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	6922      	ldr	r2, [r4, #16]
 800b294:	1a98      	subs	r0, r3, r2
 800b296:	6963      	ldr	r3, [r4, #20]
 800b298:	b2f6      	uxtb	r6, r6
 800b29a:	4283      	cmp	r3, r0
 800b29c:	4637      	mov	r7, r6
 800b29e:	dc04      	bgt.n	800b2aa <__swbuf_r+0x3a>
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f7ff fdf0 	bl	800ae88 <_fflush_r>
 800b2a8:	b9e0      	cbnz	r0, 800b2e4 <__swbuf_r+0x74>
 800b2aa:	68a3      	ldr	r3, [r4, #8]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	60a3      	str	r3, [r4, #8]
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	6022      	str	r2, [r4, #0]
 800b2b6:	701e      	strb	r6, [r3, #0]
 800b2b8:	6962      	ldr	r2, [r4, #20]
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d004      	beq.n	800b2ca <__swbuf_r+0x5a>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	07db      	lsls	r3, r3, #31
 800b2c4:	d506      	bpl.n	800b2d4 <__swbuf_r+0x64>
 800b2c6:	2e0a      	cmp	r6, #10
 800b2c8:	d104      	bne.n	800b2d4 <__swbuf_r+0x64>
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f7ff fddb 	bl	800ae88 <_fflush_r>
 800b2d2:	b938      	cbnz	r0, 800b2e4 <__swbuf_r+0x74>
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	4621      	mov	r1, r4
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f000 f806 	bl	800b2ec <__swsetup_r>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d0d5      	beq.n	800b290 <__swbuf_r+0x20>
 800b2e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b2e8:	e7f4      	b.n	800b2d4 <__swbuf_r+0x64>
	...

0800b2ec <__swsetup_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4b2a      	ldr	r3, [pc, #168]	; (800b398 <__swsetup_r+0xac>)
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	6818      	ldr	r0, [r3, #0]
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	b118      	cbz	r0, 800b300 <__swsetup_r+0x14>
 800b2f8:	6a03      	ldr	r3, [r0, #32]
 800b2fa:	b90b      	cbnz	r3, 800b300 <__swsetup_r+0x14>
 800b2fc:	f7fd fef8 	bl	80090f0 <__sinit>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b306:	0718      	lsls	r0, r3, #28
 800b308:	d422      	bmi.n	800b350 <__swsetup_r+0x64>
 800b30a:	06d9      	lsls	r1, r3, #27
 800b30c:	d407      	bmi.n	800b31e <__swsetup_r+0x32>
 800b30e:	2309      	movs	r3, #9
 800b310:	602b      	str	r3, [r5, #0]
 800b312:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b316:	81a3      	strh	r3, [r4, #12]
 800b318:	f04f 30ff 	mov.w	r0, #4294967295
 800b31c:	e034      	b.n	800b388 <__swsetup_r+0x9c>
 800b31e:	0758      	lsls	r0, r3, #29
 800b320:	d512      	bpl.n	800b348 <__swsetup_r+0x5c>
 800b322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b324:	b141      	cbz	r1, 800b338 <__swsetup_r+0x4c>
 800b326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b32a:	4299      	cmp	r1, r3
 800b32c:	d002      	beq.n	800b334 <__swsetup_r+0x48>
 800b32e:	4628      	mov	r0, r5
 800b330:	f7fe f918 	bl	8009564 <_free_r>
 800b334:	2300      	movs	r3, #0
 800b336:	6363      	str	r3, [r4, #52]	; 0x34
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	2300      	movs	r3, #0
 800b342:	6063      	str	r3, [r4, #4]
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f043 0308 	orr.w	r3, r3, #8
 800b34e:	81a3      	strh	r3, [r4, #12]
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	b94b      	cbnz	r3, 800b368 <__swsetup_r+0x7c>
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b35a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b35e:	d003      	beq.n	800b368 <__swsetup_r+0x7c>
 800b360:	4621      	mov	r1, r4
 800b362:	4628      	mov	r0, r5
 800b364:	f000 f88c 	bl	800b480 <__smakebuf_r>
 800b368:	89a0      	ldrh	r0, [r4, #12]
 800b36a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b36e:	f010 0301 	ands.w	r3, r0, #1
 800b372:	d00a      	beq.n	800b38a <__swsetup_r+0x9e>
 800b374:	2300      	movs	r3, #0
 800b376:	60a3      	str	r3, [r4, #8]
 800b378:	6963      	ldr	r3, [r4, #20]
 800b37a:	425b      	negs	r3, r3
 800b37c:	61a3      	str	r3, [r4, #24]
 800b37e:	6923      	ldr	r3, [r4, #16]
 800b380:	b943      	cbnz	r3, 800b394 <__swsetup_r+0xa8>
 800b382:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b386:	d1c4      	bne.n	800b312 <__swsetup_r+0x26>
 800b388:	bd38      	pop	{r3, r4, r5, pc}
 800b38a:	0781      	lsls	r1, r0, #30
 800b38c:	bf58      	it	pl
 800b38e:	6963      	ldrpl	r3, [r4, #20]
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	e7f4      	b.n	800b37e <__swsetup_r+0x92>
 800b394:	2000      	movs	r0, #0
 800b396:	e7f7      	b.n	800b388 <__swsetup_r+0x9c>
 800b398:	200001d8 	.word	0x200001d8

0800b39c <_raise_r>:
 800b39c:	291f      	cmp	r1, #31
 800b39e:	b538      	push	{r3, r4, r5, lr}
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	d904      	bls.n	800b3b0 <_raise_r+0x14>
 800b3a6:	2316      	movs	r3, #22
 800b3a8:	6003      	str	r3, [r0, #0]
 800b3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b3b2:	b112      	cbz	r2, 800b3ba <_raise_r+0x1e>
 800b3b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3b8:	b94b      	cbnz	r3, 800b3ce <_raise_r+0x32>
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f830 	bl	800b420 <_getpid_r>
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ca:	f000 b817 	b.w	800b3fc <_kill_r>
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d00a      	beq.n	800b3e8 <_raise_r+0x4c>
 800b3d2:	1c59      	adds	r1, r3, #1
 800b3d4:	d103      	bne.n	800b3de <_raise_r+0x42>
 800b3d6:	2316      	movs	r3, #22
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	2001      	movs	r0, #1
 800b3dc:	e7e7      	b.n	800b3ae <_raise_r+0x12>
 800b3de:	2400      	movs	r4, #0
 800b3e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	4798      	blx	r3
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	e7e0      	b.n	800b3ae <_raise_r+0x12>

0800b3ec <raise>:
 800b3ec:	4b02      	ldr	r3, [pc, #8]	; (800b3f8 <raise+0xc>)
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f7ff bfd3 	b.w	800b39c <_raise_r>
 800b3f6:	bf00      	nop
 800b3f8:	200001d8 	.word	0x200001d8

0800b3fc <_kill_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4d07      	ldr	r5, [pc, #28]	; (800b41c <_kill_r+0x20>)
 800b400:	2300      	movs	r3, #0
 800b402:	4604      	mov	r4, r0
 800b404:	4608      	mov	r0, r1
 800b406:	4611      	mov	r1, r2
 800b408:	602b      	str	r3, [r5, #0]
 800b40a:	f7f6 f8f1 	bl	80015f0 <_kill>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	d102      	bne.n	800b418 <_kill_r+0x1c>
 800b412:	682b      	ldr	r3, [r5, #0]
 800b414:	b103      	cbz	r3, 800b418 <_kill_r+0x1c>
 800b416:	6023      	str	r3, [r4, #0]
 800b418:	bd38      	pop	{r3, r4, r5, pc}
 800b41a:	bf00      	nop
 800b41c:	20001f2c 	.word	0x20001f2c

0800b420 <_getpid_r>:
 800b420:	f7f6 b8de 	b.w	80015e0 <_getpid>

0800b424 <_malloc_usable_size_r>:
 800b424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b428:	1f18      	subs	r0, r3, #4
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bfbc      	itt	lt
 800b42e:	580b      	ldrlt	r3, [r1, r0]
 800b430:	18c0      	addlt	r0, r0, r3
 800b432:	4770      	bx	lr

0800b434 <__swhatbuf_r>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	460c      	mov	r4, r1
 800b438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43c:	2900      	cmp	r1, #0
 800b43e:	b096      	sub	sp, #88	; 0x58
 800b440:	4615      	mov	r5, r2
 800b442:	461e      	mov	r6, r3
 800b444:	da0d      	bge.n	800b462 <__swhatbuf_r+0x2e>
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b44c:	f04f 0100 	mov.w	r1, #0
 800b450:	bf0c      	ite	eq
 800b452:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b456:	2340      	movne	r3, #64	; 0x40
 800b458:	2000      	movs	r0, #0
 800b45a:	6031      	str	r1, [r6, #0]
 800b45c:	602b      	str	r3, [r5, #0]
 800b45e:	b016      	add	sp, #88	; 0x58
 800b460:	bd70      	pop	{r4, r5, r6, pc}
 800b462:	466a      	mov	r2, sp
 800b464:	f000 f848 	bl	800b4f8 <_fstat_r>
 800b468:	2800      	cmp	r0, #0
 800b46a:	dbec      	blt.n	800b446 <__swhatbuf_r+0x12>
 800b46c:	9901      	ldr	r1, [sp, #4]
 800b46e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b472:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b476:	4259      	negs	r1, r3
 800b478:	4159      	adcs	r1, r3
 800b47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b47e:	e7eb      	b.n	800b458 <__swhatbuf_r+0x24>

0800b480 <__smakebuf_r>:
 800b480:	898b      	ldrh	r3, [r1, #12]
 800b482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b484:	079d      	lsls	r5, r3, #30
 800b486:	4606      	mov	r6, r0
 800b488:	460c      	mov	r4, r1
 800b48a:	d507      	bpl.n	800b49c <__smakebuf_r+0x1c>
 800b48c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	6123      	str	r3, [r4, #16]
 800b494:	2301      	movs	r3, #1
 800b496:	6163      	str	r3, [r4, #20]
 800b498:	b002      	add	sp, #8
 800b49a:	bd70      	pop	{r4, r5, r6, pc}
 800b49c:	ab01      	add	r3, sp, #4
 800b49e:	466a      	mov	r2, sp
 800b4a0:	f7ff ffc8 	bl	800b434 <__swhatbuf_r>
 800b4a4:	9900      	ldr	r1, [sp, #0]
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f7fe fc27 	bl	8009cfc <_malloc_r>
 800b4ae:	b948      	cbnz	r0, 800b4c4 <__smakebuf_r+0x44>
 800b4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b4:	059a      	lsls	r2, r3, #22
 800b4b6:	d4ef      	bmi.n	800b498 <__smakebuf_r+0x18>
 800b4b8:	f023 0303 	bic.w	r3, r3, #3
 800b4bc:	f043 0302 	orr.w	r3, r3, #2
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	e7e3      	b.n	800b48c <__smakebuf_r+0xc>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	6020      	str	r0, [r4, #0]
 800b4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	6163      	str	r3, [r4, #20]
 800b4d2:	9b01      	ldr	r3, [sp, #4]
 800b4d4:	6120      	str	r0, [r4, #16]
 800b4d6:	b15b      	cbz	r3, 800b4f0 <__smakebuf_r+0x70>
 800b4d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f000 f81d 	bl	800b51c <_isatty_r>
 800b4e2:	b128      	cbz	r0, 800b4f0 <__smakebuf_r+0x70>
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	f023 0303 	bic.w	r3, r3, #3
 800b4ea:	f043 0301 	orr.w	r3, r3, #1
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	431d      	orrs	r5, r3
 800b4f4:	81a5      	strh	r5, [r4, #12]
 800b4f6:	e7cf      	b.n	800b498 <__smakebuf_r+0x18>

0800b4f8 <_fstat_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	4d07      	ldr	r5, [pc, #28]	; (800b518 <_fstat_r+0x20>)
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	4611      	mov	r1, r2
 800b504:	602b      	str	r3, [r5, #0]
 800b506:	f7f6 f8d2 	bl	80016ae <_fstat>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	d102      	bne.n	800b514 <_fstat_r+0x1c>
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	b103      	cbz	r3, 800b514 <_fstat_r+0x1c>
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	bd38      	pop	{r3, r4, r5, pc}
 800b516:	bf00      	nop
 800b518:	20001f2c 	.word	0x20001f2c

0800b51c <_isatty_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d06      	ldr	r5, [pc, #24]	; (800b538 <_isatty_r+0x1c>)
 800b520:	2300      	movs	r3, #0
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f6 f8d1 	bl	80016ce <_isatty>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_isatty_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_isatty_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20001f2c 	.word	0x20001f2c

0800b53c <_init>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr

0800b548 <_fini>:
 800b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54a:	bf00      	nop
 800b54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b54e:	bc08      	pop	{r3}
 800b550:	469e      	mov	lr, r3
 800b552:	4770      	bx	lr
