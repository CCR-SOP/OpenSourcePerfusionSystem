
nucleo_dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800b588  0800b588  0001b588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bac0  0800bac0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800bac0  0800bac0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bac0  0800bac0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bac0  0800bac0  0001bac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00001d60  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f3c  20001f3c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c25b  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d45  00000000  00000000  0003c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e8  00000000  00000000  000401f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011d1  00000000  00000000  000418d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004c6d  00000000  00000000  00042aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b1e8  00000000  00000000  00047716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b2421  00000000  00000000  000628fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007484  00000000  00000000  00114d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b56c 	.word	0x0800b56c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b56c 	.word	0x0800b56c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff39 	bl	8000adc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcaf 	bl	80005f8 <__aeabi_dmul>
 8000c9a:	f7ff ff6f 	bl	8000b7c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc30 	bl	8000504 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fca6 	bl	80005f8 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fae8 	bl	8000288 <__aeabi_dsub>
 8000cb8:	f7ff ff60 	bl	8000b7c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 fd90 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f846 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 f948 	bl	8000f68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 f916 	bl	8000f08 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000cdc:	f000 f87c 	bl	8000dd8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000ce0:	f000 f8b2 	bl	8000e48 <MX_DAC2_Init>
  MX_TIM6_Init();
 8000ce4:	f000 f8da 	bl	8000e9c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4813      	ldr	r0, [pc, #76]	; (8000d38 <main+0x70>)
 8000cec:	f000 ff48 	bl	8001b80 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <main+0x70>)
 8000cf4:	f000 ff44 	bl	8001b80 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <main+0x74>)
 8000cfc:	f000 ff40 	bl	8001b80 <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f004 f97c 	bl	8004ffc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <main+0x78>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	480e      	ldr	r0, [pc, #56]	; (8000d44 <main+0x7c>)
 8000d0a:	f004 f9df 	bl	80050cc <osThreadNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <main+0x80>)
 8000d12:	6013      	str	r3, [r2, #0]

  /* creation of taskCMD */
  taskCMDHandle = osThreadNew(StartTaskCMD, NULL, &taskCMD_attributes);
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <main+0x84>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <main+0x88>)
 8000d1a:	f004 f9d7 	bl	80050cc <osThreadNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <main+0x8c>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of eventCMD */
  eventCMDHandle = osEventFlagsNew(&eventCMD_attributes);
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <main+0x90>)
 8000d26:	f004 faa9 	bl	800527c <osEventFlagsNew>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <main+0x94>)
 8000d2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d30:	f004 f998 	bl	8005064 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <main+0x6c>
 8000d36:	bf00      	nop
 8000d38:	200001f8 	.word	0x200001f8
 8000d3c:	2000020c 	.word	0x2000020c
 8000d40:	0800b61c 	.word	0x0800b61c
 8000d44:	080011c9 	.word	0x080011c9
 8000d48:	200002f4 	.word	0x200002f4
 8000d4c:	0800b640 	.word	0x0800b640
 8000d50:	080011d9 	.word	0x080011d9
 8000d54:	200002f8 	.word	0x200002f8
 8000d58:	0800b664 	.word	0x0800b664
 8000d5c:	200002fc 	.word	0x200002fc

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b090      	sub	sp, #64	; 0x40
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2228      	movs	r2, #40	; 0x28
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f008 fa88 	bl	8009284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 f9f4 	bl	8002184 <HAL_RCC_OscConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000da2:	f000 fad3 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	230f      	movs	r3, #15
 8000da8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fa1e 	bl	8003200 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dca:	f000 fabf 	bl	800134c <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3740      	adds	r7, #64	; 0x40
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_DAC1_Init+0x68>)
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <MX_DAC1_Init+0x6c>)
 8000dec:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_DAC1_Init+0x68>)
 8000df0:	f000 fe75 	bl	8001ade <HAL_DAC_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000dfa:	f000 faa7 	bl	800134c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_DAC1_Init+0x68>)
 8000e0e:	f000 ff5d 	bl	8001ccc <HAL_DAC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000e18:	f000 fa98 	bl	800134c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2210      	movs	r2, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_DAC1_Init+0x68>)
 8000e28:	f000 ff50 	bl	8001ccc <HAL_DAC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 8000e32:	f000 fa8b 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200001f8 	.word	0x200001f8
 8000e44:	40007400 	.word	0x40007400

08000e48 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_DAC2_Init+0x4c>)
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <MX_DAC2_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_DAC2_Init+0x4c>)
 8000e60:	f000 fe3d 	bl	8001ade <HAL_DAC_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8000e6a:	f000 fa6f 	bl	800134c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8000e72:	2302      	movs	r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_DAC2_Init+0x4c>)
 8000e7e:	f000 ff25 	bl	8001ccc <HAL_DAC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000e88:	f000 fa60 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000020c 	.word	0x2000020c
 8000e98:	40009800 	.word	0x40009800

08000e9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <MX_TIM6_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000eb4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000eb8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000ec2:	2264      	movs	r2, #100	; 0x64
 8000ec4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000ece:	f002 fbcd 	bl	800366c <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ed8:	f000 fa38 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000eea:	f002 fdd5 	bl	8003a98 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ef4:	f000 fa2a 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000220 	.word	0x20000220
 8000f04:	40001000 	.word	0x40001000

08000f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_USART2_UART_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f4c:	f002 fe30 	bl	8003bb0 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f56:	f000 f9f9 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000026c 	.word	0x2000026c
 8000f64:	40004400 	.word	0x40004400

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_GPIO_Init+0x44>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <MX_GPIO_Init+0x44>)
 8000f74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_GPIO_Init+0x44>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_GPIO_Init+0x44>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <MX_GPIO_Init+0x44>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_GPIO_Init+0x44>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <debug_print_uart>:

/* USER CODE BEGIN 4 */

void debug_print_uart(char *fmt, ...)
{
 8000fb0:	b40f      	push	{r0, r1, r2, r3}
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
	va_list va;
	va_start(va, fmt);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	607b      	str	r3, [r7, #4]
	vsnprintf(uart_msg, UART_STR_LEN, fmt, va);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	2150      	movs	r1, #80	; 0x50
 8000fc4:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <debug_print_uart+0x40>)
 8000fc6:	f008 f94f 	bl	8009268 <vsniprintf>
	HAL_UART_Transmit(&huart2, (const uint8_t*)uart_msg, strlen(uart_msg), 500);
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <debug_print_uart+0x40>)
 8000fcc:	f7ff f900 	bl	80001d0 <strlen>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fd8:	4905      	ldr	r1, [pc, #20]	; (8000ff0 <debug_print_uart+0x40>)
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <debug_print_uart+0x44>)
 8000fdc:	f002 fe36 	bl	8003c4c <HAL_UART_Transmit>
	va_end(va);

}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fea:	b004      	add	sp, #16
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000308 	.word	0x20000308
 8000ff4:	2000026c 	.word	0x2000026c

08000ff8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART2) { // Current UART
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_UART_RxCpltCallback+0xb0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d145      	bne.n	8001096 <HAL_UART_RxCpltCallback+0x9e>
	   rcv_buf[rcv_buf_idx][rcv_idx] = rcv_byte;    // Add data to Rx_Buffer
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_UART_RxCpltCallback+0xb4>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461c      	mov	r4, r3
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_UART_RxCpltCallback+0xbc>)
 8001018:	7818      	ldrb	r0, [r3, #0]
 800101a:	4927      	ldr	r1, [pc, #156]	; (80010b8 <HAL_UART_RxCpltCallback+0xc0>)
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	440b      	add	r3, r1
 8001028:	4423      	add	r3, r4
 800102a:	4602      	mov	r2, r0
 800102c:	701a      	strb	r2, [r3, #0]
	   if ((rcv_byte == '\n' || rcv_byte == '\r')) {
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_UART_RxCpltCallback+0xbc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d003      	beq.n	800103e <HAL_UART_RxCpltCallback+0x46>
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_UART_RxCpltCallback+0xbc>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b0d      	cmp	r3, #13
 800103c:	d11e      	bne.n	800107c <HAL_UART_RxCpltCallback+0x84>
		   // if a \r or \n already handled, ignore the next one until new characters received
		   if (rcv_idx > 0) {
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d027      	beq.n	8001096 <HAL_UART_RxCpltCallback+0x9e>
			   rcv_cmd_len = rcv_idx;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_UART_RxCpltCallback+0xc4>)
 800104c:	701a      	strb	r2, [r3, #0]
			   osEventFlagsSet(eventCMDHandle, rcv_buf_idx + 1);
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_UART_RxCpltCallback+0xc8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <HAL_UART_RxCpltCallback+0xb4>)
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	3201      	adds	r2, #1
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f960 	bl	8005320 <osEventFlagsSet>
			   rcv_buf_idx = (int)(!rcv_buf_idx);
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_UART_RxCpltCallback+0xb4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_UART_RxCpltCallback+0xb4>)
 8001072:	701a      	strb	r2, [r3, #0]
			   rcv_idx = 0;
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
		   if (rcv_idx > 0) {
 800107a:	e00c      	b.n	8001096 <HAL_UART_RxCpltCallback+0x9e>
		   }
	   } else {
		   rcv_idx++;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 8001086:	701a      	strb	r2, [r3, #0]
		   if (rcv_idx >= MAX_RCV_LEN) {
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b28      	cmp	r3, #40	; 0x28
 800108e:	d902      	bls.n	8001096 <HAL_UART_RxCpltCallback+0x9e>
			   rcv_idx = MAX_RCV_LEN;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_UART_RxCpltCallback+0xb8>)
 8001092:	2229      	movs	r2, #41	; 0x29
 8001094:	701a      	strb	r2, [r3, #0]
			   //TODO, should report error
		   }
	   }
   }

   HAL_UART_Receive_IT(&huart2, &rcv_byte, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	4906      	ldr	r1, [pc, #24]	; (80010b4 <HAL_UART_RxCpltCallback+0xbc>)
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <HAL_UART_RxCpltCallback+0xcc>)
 800109c:	f002 fe60 	bl	8003d60 <HAL_UART_Receive_IT>
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	40004400 	.word	0x40004400
 80010ac:	200003af 	.word	0x200003af
 80010b0:	200003ae 	.word	0x200003ae
 80010b4:	20000358 	.word	0x20000358
 80010b8:	2000035c 	.word	0x2000035c
 80010bc:	200003b0 	.word	0x200003b0
 80010c0:	200002fc 	.word	0x200002fc
 80010c4:	2000026c 	.word	0x2000026c

080010c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d114      	bne.n	8001104 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value[0] );
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80010e4:	f000 fd27 	bl	8001b36 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value[1]);
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010ea:	885b      	ldrh	r3, [r3, #2]
 80010ec:	2200      	movs	r2, #0
 80010ee:	2110      	movs	r1, #16
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80010f2:	f000 fd20 	bl	8001b36 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value[2]);
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010f8:	889b      	ldrh	r3, [r3, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001100:	f000 fd19 	bl	8001b36 <HAL_DAC_SetValue>
	}
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40001000 	.word	0x40001000
 8001110:	20000300 	.word	0x20000300
 8001114:	200001f8 	.word	0x200001f8
 8001118:	2000020c 	.word	0x2000020c

0800111c <parse_cmd_buf>:

void parse_cmd_buf(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	char *ptr = strtok(cmd_buf, cmd_delim);
 8001122:	4913      	ldr	r1, [pc, #76]	; (8001170 <parse_cmd_buf+0x54>)
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <parse_cmd_buf+0x58>)
 8001126:	f008 f8db 	bl	80092e0 <strtok>
 800112a:	6078      	str	r0, [r7, #4]
	strncpy(cmd, ptr, sizeof(cmd));
 800112c:	2210      	movs	r2, #16
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <parse_cmd_buf+0x5c>)
 8001132:	f008 f8c1 	bl	80092b8 <strncpy>
	int param_idx = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
	while (ptr != NULL) {
 800113a:	e010      	b.n	800115e <parse_cmd_buf+0x42>
		ptr = strtok(NULL, cmd_delim);
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <parse_cmd_buf+0x54>)
 800113e:	2000      	movs	r0, #0
 8001140:	f008 f8ce 	bl	80092e0 <strtok>
 8001144:	6078      	str	r0, [r7, #4]
		strncpy(cmd_params[param_idx], ptr, sizeof(cmd_params[param_idx]));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <parse_cmd_buf+0x60>)
 800114c:	4413      	add	r3, r2
 800114e:	2208      	movs	r2, #8
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	f008 f8b0 	bl	80092b8 <strncpy>
		param_idx++;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	603b      	str	r3, [r7, #0]
	while (ptr != NULL) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1eb      	bne.n	800113c <parse_cmd_buf+0x20>
	}

}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000
 8001174:	200003b4 	.word	0x200003b4
 8001178:	200003e0 	.word	0x200003e0
 800117c:	200003f0 	.word	0x200003f0

08001180 <clear_cmd_buf>:

void clear_cmd_buf(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	memset(cmd, 0, CMD_MAX_LEN);
 8001186:	2210      	movs	r2, #16
 8001188:	2100      	movs	r1, #0
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <clear_cmd_buf+0x40>)
 800118c:	f008 f87a 	bl	8009284 <memset>
	for (int i=0;i<TOTAL_CMD_PARAMS;i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	e00b      	b.n	80011ae <clear_cmd_buf+0x2e>
		memset(cmd_params[i], 0, PARAM_MAX_LEN);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <clear_cmd_buf+0x44>)
 800119c:	4413      	add	r3, r2
 800119e:	2208      	movs	r2, #8
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f008 f86e 	bl	8009284 <memset>
	for (int i=0;i<TOTAL_CMD_PARAMS;i++) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	ddf0      	ble.n	8001196 <clear_cmd_buf+0x16>
	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200003e0 	.word	0x200003e0
 80011c4:	200003f0 	.word	0x200003f0

080011c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  osDelay(10);
 80011d0:	200a      	movs	r0, #10
 80011d2:	f004 f825 	bl	8005220 <osDelay>
 80011d6:	e7fb      	b.n	80011d0 <StartDefaultTask+0x8>

080011d8 <StartTaskCMD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCMD */
void StartTaskCMD(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCMD */
  /* Infinite loop */
  for(;;) {
	  HAL_UART_Receive_IT(&huart2, &rcv_byte, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	4949      	ldr	r1, [pc, #292]	; (8001308 <StartTaskCMD+0x130>)
 80011e4:	4849      	ldr	r0, [pc, #292]	; (800130c <StartTaskCMD+0x134>)
 80011e6:	f002 fdbb 	bl	8003d60 <HAL_UART_Receive_IT>

		uint32_t flags;
		for(;;) {
			flags = osEventFlagsWait(eventCMDHandle, FLAG_CMD_BUF0_READY | FLAG_CMD_BUF1_READY, osFlagsWaitAny, 100);
 80011ea:	4b49      	ldr	r3, [pc, #292]	; (8001310 <StartTaskCMD+0x138>)
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	2200      	movs	r2, #0
 80011f2:	2103      	movs	r1, #3
 80011f4:	f004 f8ec 	bl	80053d0 <osEventFlagsWait>
 80011f8:	6178      	str	r0, [r7, #20]
			if (flags < 0x80000000) {
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dbf4      	blt.n	80011ea <StartTaskCMD+0x12>
				memcpy((char*)cmd_buf, (const char*)rcv_buf[flags-1], rcv_cmd_len);
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	4a41      	ldr	r2, [pc, #260]	; (8001314 <StartTaskCMD+0x13c>)
 8001210:	4413      	add	r3, r2
 8001212:	4a41      	ldr	r2, [pc, #260]	; (8001318 <StartTaskCMD+0x140>)
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4840      	ldr	r0, [pc, #256]	; (800131c <StartTaskCMD+0x144>)
 800121a:	f008 f986 	bl	800952a <memcpy>
				cmd_buf[rcv_cmd_len] = '\0';
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <StartTaskCMD+0x140>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b3d      	ldr	r3, [pc, #244]	; (800131c <StartTaskCMD+0x144>)
 8001226:	2100      	movs	r1, #0
 8001228:	5499      	strb	r1, [r3, r2]
				clear_cmd_buf();
 800122a:	f7ff ffa9 	bl	8001180 <clear_cmd_buf>
				parse_cmd_buf();
 800122e:	f7ff ff75 	bl	800111c <parse_cmd_buf>
				if (strncmp(cmd, "dac", 3) == 0) {
 8001232:	2203      	movs	r2, #3
 8001234:	493a      	ldr	r1, [pc, #232]	; (8001320 <StartTaskCMD+0x148>)
 8001236:	483b      	ldr	r0, [pc, #236]	; (8001324 <StartTaskCMD+0x14c>)
 8001238:	f008 f82c 	bl	8009294 <strncmp>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d159      	bne.n	80012f6 <StartTaskCMD+0x11e>
					int dac_idx = atoi(cmd_params[0]);
 8001242:	4839      	ldr	r0, [pc, #228]	; (8001328 <StartTaskCMD+0x150>)
 8001244:	f007 f835 	bl	80082b2 <atoi>
 8001248:	6138      	str	r0, [r7, #16]
					if (0 <= dac_idx && dac_idx < TOTAL_DACS) {
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db4d      	blt.n	80012ec <StartTaskCMD+0x114>
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b02      	cmp	r3, #2
 8001254:	dc4a      	bgt.n	80012ec <StartTaskCMD+0x114>
						float percent = atof(cmd_params[1]);
 8001256:	4835      	ldr	r0, [pc, #212]	; (800132c <StartTaskCMD+0x154>)
 8001258:	f007 f828 	bl	80082ac <atof>
 800125c:	ec53 2b10 	vmov	r2, r3, d0
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fcaa 	bl	8000bbc <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	60fb      	str	r3, [r7, #12]
						if (percent < 0.0 || percent > 100.0) {
 800126c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	d408      	bmi.n	800128c <StartTaskCMD+0xb4>
 800127a:	edd7 7a03 	vldr	s15, [r7, #12]
 800127e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001330 <StartTaskCMD+0x158>
 8001282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	dd08      	ble.n	800129e <StartTaskCMD+0xc6>
							debug_print_uart("Illegal dac value %d\r\n", dac_value[dac_idx]);
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <StartTaskCMD+0x15c>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	4619      	mov	r1, r3
 8001296:	4828      	ldr	r0, [pc, #160]	; (8001338 <StartTaskCMD+0x160>)
 8001298:	f7ff fe8a 	bl	8000fb0 <debug_print_uart>
					if (0 <= dac_idx && dac_idx < TOTAL_DACS) {
 800129c:	e02f      	b.n	80012fe <StartTaskCMD+0x126>
						} else {
							dac_value[dac_idx] = (int)(percent/100.0 * 4095);
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff f952 	bl	8000548 <__aeabi_f2d>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <StartTaskCMD+0x164>)
 80012aa:	f7ff facf 	bl	800084c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a312      	add	r3, pc, #72	; (adr r3, 8001300 <StartTaskCMD+0x128>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f99c 	bl	80005f8 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc30 	bl	8000b2c <__aeabi_d2iz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b299      	uxth	r1, r3
 80012d0:	4a18      	ldr	r2, [pc, #96]	; (8001334 <StartTaskCMD+0x15c>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							debug_print_uart("Setting DAC %d to %d\r\n", dac_idx, dac_value[dac_idx]);
 80012d8:	4a16      	ldr	r2, [pc, #88]	; (8001334 <StartTaskCMD+0x15c>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e0:	461a      	mov	r2, r3
 80012e2:	6939      	ldr	r1, [r7, #16]
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <StartTaskCMD+0x168>)
 80012e6:	f7ff fe63 	bl	8000fb0 <debug_print_uart>
					if (0 <= dac_idx && dac_idx < TOTAL_DACS) {
 80012ea:	e008      	b.n	80012fe <StartTaskCMD+0x126>
						}
					} else{
						debug_print_uart("Illegal DAC %d\r\n", dac_idx);
 80012ec:	6939      	ldr	r1, [r7, #16]
 80012ee:	4815      	ldr	r0, [pc, #84]	; (8001344 <StartTaskCMD+0x16c>)
 80012f0:	f7ff fe5e 	bl	8000fb0 <debug_print_uart>
 80012f4:	e779      	b.n	80011ea <StartTaskCMD+0x12>
					}
				} else {
					debug_print_uart("Unknown cmd |%s|\r\n", cmd);
 80012f6:	490b      	ldr	r1, [pc, #44]	; (8001324 <StartTaskCMD+0x14c>)
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <StartTaskCMD+0x170>)
 80012fa:	f7ff fe59 	bl	8000fb0 <debug_print_uart>
			flags = osEventFlagsWait(eventCMDHandle, FLAG_CMD_BUF0_READY | FLAG_CMD_BUF1_READY, osFlagsWaitAny, 100);
 80012fe:	e774      	b.n	80011ea <StartTaskCMD+0x12>
 8001300:	00000000 	.word	0x00000000
 8001304:	40affe00 	.word	0x40affe00
 8001308:	20000358 	.word	0x20000358
 800130c:	2000026c 	.word	0x2000026c
 8001310:	200002fc 	.word	0x200002fc
 8001314:	2000035c 	.word	0x2000035c
 8001318:	200003b0 	.word	0x200003b0
 800131c:	200003b4 	.word	0x200003b4
 8001320:	0800b5a8 	.word	0x0800b5a8
 8001324:	200003e0 	.word	0x200003e0
 8001328:	200003f0 	.word	0x200003f0
 800132c:	200003f8 	.word	0x200003f8
 8001330:	42c80000 	.word	0x42c80000
 8001334:	20000300 	.word	0x20000300
 8001338:	0800b5ac 	.word	0x0800b5ac
 800133c:	40590000 	.word	0x40590000
 8001340:	0800b5c4 	.word	0x0800b5c4
 8001344:	0800b5dc 	.word	0x0800b5dc
 8001348:	0800b5f0 	.word	0x0800b5f0

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_MspInit+0x4c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_MspInit+0x4c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_MspInit+0x4c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	210f      	movs	r1, #15
 8001392:	f06f 0001 	mvn.w	r0, #1
 8001396:	f000 fb6c 	bl	8001a72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_DAC_MspInit+0xdc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12d      	bne.n	8001426 <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 80013d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ec:	6153      	str	r3, [r2, #20]
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013fa:	2330      	movs	r3, #48	; 0x30
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fe:	2303      	movs	r3, #3
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f000 fd46 	bl	8001ea0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 5, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2105      	movs	r1, #5
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f000 fb2a 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800141e:	2036      	movs	r0, #54	; 0x36
 8001420:	f000 fb43 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8001424:	e029      	b.n	800147a <HAL_DAC_MspInit+0xd2>
  else if(hdac->Instance==DAC2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a18      	ldr	r2, [pc, #96]	; (800148c <HAL_DAC_MspInit+0xe4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d124      	bne.n	800147a <HAL_DAC_MspInit+0xd2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 8001436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143a:	61d3      	str	r3, [r2, #28]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 800144e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001452:	6153      	str	r3, [r2, #20]
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_DAC_MspInit+0xe0>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001464:	2303      	movs	r3, #3
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f000 fd13 	bl	8001ea0 <HAL_GPIO_Init>
}
 800147a:	bf00      	nop
 800147c:	3730      	adds	r7, #48	; 0x30
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40007400 	.word	0x40007400
 8001488:	40021000 	.word	0x40021000
 800148c:	40009800 	.word	0x40009800

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <HAL_TIM_Base_MspInit+0x44>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d113      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_TIM_Base_MspInit+0x48>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <HAL_TIM_Base_MspInit+0x48>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_TIM_Base_MspInit+0x48>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	2036      	movs	r0, #54	; 0x36
 80014c0:	f000 fad7 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80014c4:	2036      	movs	r0, #54	; 0x36
 80014c6:	f000 faf0 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40001000 	.word	0x40001000
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_UART_MspInit+0x90>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d131      	bne.n	8001562 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_UART_MspInit+0x94>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_UART_MspInit+0x94>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_UART_MspInit+0x94>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_UART_MspInit+0x94>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_UART_MspInit+0x94>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	6153      	str	r3, [r2, #20]
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_UART_MspInit+0x94>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800152e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001540:	2307      	movs	r3, #7
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f000 fca7 	bl	8001ea0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2105      	movs	r1, #5
 8001556:	2026      	movs	r0, #38	; 0x26
 8001558:	f000 fa8b 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800155c:	2026      	movs	r0, #38	; 0x26
 800155e:	f000 faa4 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40004400 	.word	0x40004400
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f96a 	bl	800187c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015a8:	f005 fe2c 	bl	8007204 <xTaskGetSchedulerState>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015b2:	f006 fc11 	bl	8007dd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <USART2_IRQHandler+0x10>)
 80015c2:	f002 fc11 	bl	8003de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000026c 	.word	0x2000026c

080015d0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <TIM6_DAC1_IRQHandler+0x14>)
 80015d6:	f002 f8a0 	bl	800371a <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <TIM6_DAC1_IRQHandler+0x18>)
 80015dc:	f000 fb1b 	bl	8001c16 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000220 	.word	0x20000220
 80015e8:	200001f8 	.word	0x200001f8

080015ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_kill>:

int _kill(int pid, int sig)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001606:	f007 ff63 	bl	80094d0 <__errno>
 800160a:	4603      	mov	r3, r0
 800160c:	2216      	movs	r2, #22
 800160e:	601a      	str	r2, [r3, #0]
  return -1;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_exit>:

void _exit (int status)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffe7 	bl	80015fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800162e:	e7fe      	b.n	800162e <_exit+0x12>

08001630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e00a      	b.n	8001658 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001642:	f3af 8000 	nop.w
 8001646:	4601      	mov	r1, r0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbf0      	blt.n	8001642 <_read+0x12>
  }

  return len;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e009      	b.n	8001690 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf1      	blt.n	800167c <_write+0x12>
  }
  return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_close>:

int _close(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ca:	605a      	str	r2, [r3, #4]
  return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_isatty>:

int _isatty(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f007 fec8 	bl	80094d0 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20003000 	.word	0x20003000
 800176c:	00000400 	.word	0x00000400
 8001770:	20000408 	.word	0x20000408
 8001774:	20001f40 	.word	0x20001f40

08001778 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff ffea 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f007 fe87 	bl	80094dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ce:	f7ff fa7b 	bl	8000cc8 <main>

080017d2 <LoopForever>:

LoopForever:
    b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80017e0:	0800bac8 	.word	0x0800bac8
  ldr r2, =_sbss
 80017e4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017e8:	20001f3c 	.word	0x20001f3c

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x28>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f92b 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fda4 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f943 	bl	8001ac6 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f90b 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000004 	.word	0x20000004
 8001874:	2000000c 	.word	0x2000000c
 8001878:	20000008 	.word	0x20000008

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	2000040c 	.word	0x2000040c

080018a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000040c 	.word	0x2000040c

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff3e 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff31 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e014      	b.n	8001b1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fc51 	bl	80013a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001b36:	b480      	push	{r7}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e004      	b.n	8001b6a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	3314      	adds	r3, #20
 8001b68:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	795b      	ldrb	r3, [r3, #5]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_DAC_Start+0x16>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e039      	b.n	8001c0a <HAL_DAC_Start+0x8a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	409a      	lsls	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10f      	bne.n	8001bdc <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8001bc8:	d118      	bne.n	8001bfc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	e00f      	b.n	8001bfc <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001be6:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001bea:	d107      	bne.n	8001bfc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0202 	orr.w	r2, r2, #2
 8001bfa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2c:	d120      	bne.n	8001c70 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3c:	d118      	bne.n	8001c70 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c68:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff59 	bl	8001b22 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c7e:	d120      	bne.n	8001cc2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c8e:	d118      	bne.n	8001cc2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2204      	movs	r2, #4
 8001c94:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f043 0202 	orr.w	r2, r3, #2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cba:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f86d 	bl	8001d9c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	795b      	ldrb	r3, [r3, #5]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_DAC_ConfigChannel+0x20>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e04e      	b.n	8001d8a <HAL_DAC_ConfigChannel+0xbe>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_DAC_ConfigChannel+0xcc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d112      	bne.n	8001d30 <HAL_DAC_ConfigChannel+0x64>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10f      	bne.n	8001d30 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	e00e      	b.n	8001d4e <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001d30:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6819      	ldr	r1, [r3, #0]
 8001d6a:	22c0      	movs	r2, #192	; 0xc0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	400a      	ands	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40007400 	.word	0x40007400

08001d9c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d008      	beq.n	8001dd4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e020      	b.n	8001e16 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020e 	bic.w	r2, r2, #14
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d005      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e027      	b.n	8001e94 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e72:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
    } 
  }
  return status;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e14e      	b.n	800214e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8140 	beq.w	8002148 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x40>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 809a 	beq.w	8002148 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b55      	ldr	r3, [pc, #340]	; (800216c <HAL_GPIO_Init+0x2cc>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_GPIO_Init+0x2cc>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b52      	ldr	r3, [pc, #328]	; (800216c <HAL_GPIO_Init+0x2cc>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800202c:	4a50      	ldr	r2, [pc, #320]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1e0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a46      	ldr	r2, [pc, #280]	; (8002174 <HAL_GPIO_Init+0x2d4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1dc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_GPIO_Init+0x2d8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1d8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_GPIO_Init+0x2dc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1d4>
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002074:	2305      	movs	r3, #5
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002078:	2302      	movs	r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002080:	2300      	movs	r3, #0
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002092:	4937      	ldr	r1, [pc, #220]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a0:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020ee:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_GPIO_Init+0x2e0>)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	f47f aea9 	bne.w	8001eb0 <HAL_GPIO_Init+0x10>
  }
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	48000400 	.word	0x48000400
 8002178:	48000800 	.word	0x48000800
 800217c:	48000c00 	.word	0x48000c00
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800218a:	af00      	add	r7, sp, #0
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002194:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f001 b823 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 817d 	beq.w	80024ba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021c0:	4bbc      	ldr	r3, [pc, #752]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d00c      	beq.n	80021e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021cc:	4bb9      	ldr	r3, [pc, #740]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d15c      	bne.n	8002292 <HAL_RCC_OscConfig+0x10e>
 80021d8:	4bb6      	ldr	r3, [pc, #728]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d155      	bne.n	8002292 <HAL_RCC_OscConfig+0x10e>
 80021e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x94>
 8002212:	4ba8      	ldr	r3, [pc, #672]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e015      	b.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800222c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002230:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002234:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002240:	4b9c      	ldr	r3, [pc, #624]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002248:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800224c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002250:	fa92 f2a2 	rbit	r2, r2
 8002254:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002258:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 811f 	beq.w	80024b8 <HAL_RCC_OscConfig+0x334>
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 8116 	bne.w	80024b8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f000 bfaf 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x12e>
 80022a4:	4b83      	ldr	r3, [pc, #524]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a82      	ldr	r2, [pc, #520]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e036      	b.n	8002320 <HAL_RCC_OscConfig+0x19c>
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x158>
 80022c2:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7b      	ldr	r2, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b79      	ldr	r3, [pc, #484]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e021      	b.n	8002320 <HAL_RCC_OscConfig+0x19c>
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x184>
 80022ee:	4b71      	ldr	r3, [pc, #452]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a70      	ldr	r2, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6d      	ldr	r2, [pc, #436]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0x19c>
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002320:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f023 020f 	bic.w	r2, r3, #15
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	495f      	ldr	r1, [pc, #380]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002336:	4313      	orrs	r3, r2
 8002338:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d059      	beq.n	80023fe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff faab 	bl	80018a4 <HAL_GetTick>
 800234e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff faa6 	bl	80018a4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	; 0x64
 8002362:	d902      	bls.n	800236a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	f000 bf43 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
 800236a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800237e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0x218>
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	e015      	b.n	80023c8 <HAL_RCC_OscConfig+0x244>
 800239c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023cc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023d0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023d4:	fa92 f2a2 	rbit	r2, r2
 80023d8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ab      	beq.n	8002354 <HAL_RCC_OscConfig+0x1d0>
 80023fc:	e05d      	b.n	80024ba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fa51 	bl	80018a4 <HAL_GetTick>
 8002402:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002408:	f7ff fa4c 	bl	80018a4 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d902      	bls.n	800241e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	f000 bee9 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
 800241e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002422:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002432:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0x2cc>
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	e015      	b.n	800247c <HAL_RCC_OscConfig+0x2f8>
 8002450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002454:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002468:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800246c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_RCC_OscConfig+0x330>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002480:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002484:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002488:	fa92 f2a2 	rbit	r2, r2
 800248c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002490:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002494:	fab2 f282 	clz	r2, r2
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f042 0220 	orr.w	r2, r2, #32
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f002 021f 	and.w	r2, r2, #31
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ab      	bne.n	8002408 <HAL_RCC_OscConfig+0x284>
 80024b0:	e003      	b.n	80024ba <HAL_RCC_OscConfig+0x336>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 817d 	beq.w	80027ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024d0:	4ba6      	ldr	r3, [pc, #664]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024dc:	4ba3      	ldr	r3, [pc, #652]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d172      	bne.n	80025ce <HAL_RCC_OscConfig+0x44a>
 80024e8:	4ba0      	ldr	r3, [pc, #640]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d16c      	bne.n	80025ce <HAL_RCC_OscConfig+0x44a>
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002506:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0x3a0>
 800251e:	4b93      	ldr	r3, [pc, #588]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e013      	b.n	800254c <HAL_RCC_OscConfig+0x3c8>
 8002524:	2302      	movs	r3, #2
 8002526:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002536:	2302      	movs	r3, #2
 8002538:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800253c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002548:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2202      	movs	r2, #2
 800254e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002552:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002556:	fa92 f2a2 	rbit	r2, r2
 800255a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800255e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f042 0220 	orr.w	r2, r2, #32
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f002 021f 	and.w	r2, r2, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCC_OscConfig+0x410>
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d002      	beq.n	8002594 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	f000 be2e 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b75      	ldr	r3, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	21f8      	movs	r1, #248	; 0xf8
 80025aa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025b2:	fa91 f1a1 	rbit	r1, r1
 80025b6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025ba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025be:	fab1 f181 	clz	r1, r1
 80025c2:	b2c9      	uxtb	r1, r1
 80025c4:	408b      	lsls	r3, r1
 80025c6:	4969      	ldr	r1, [pc, #420]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025cc:	e0fd      	b.n	80027ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8088 	beq.w	80026f0 <HAL_RCC_OscConfig+0x56c>
 80025e0:	2301      	movs	r3, #1
 80025e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	2301      	movs	r3, #1
 800260a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff f94a 	bl	80018a4 <HAL_GetTick>
 8002610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff f945 	bl	80018a4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	f000 bde2 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800263e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d102      	bne.n	800265c <HAL_RCC_OscConfig+0x4d8>
 8002656:	4b45      	ldr	r3, [pc, #276]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	e013      	b.n	8002684 <HAL_RCC_OscConfig+0x500>
 800265c:	2302      	movs	r3, #2
 800265e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800266e:	2302      	movs	r3, #2
 8002670:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002674:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2202      	movs	r2, #2
 8002686:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800268a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800268e:	fa92 f2a2 	rbit	r2, r2
 8002692:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002696:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800269a:	fab2 f282 	clz	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f042 0220 	orr.w	r2, r2, #32
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f002 021f 	and.w	r2, r2, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0af      	beq.n	8002616 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	21f8      	movs	r1, #248	; 0xf8
 80026cc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026d4:	fa91 f1a1 	rbit	r1, r1
 80026d8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026e0:	fab1 f181 	clz	r1, r1
 80026e4:	b2c9      	uxtb	r1, r1
 80026e6:	408b      	lsls	r3, r1
 80026e8:	4920      	ldr	r1, [pc, #128]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
 80026ee:	e06c      	b.n	80027ca <HAL_RCC_OscConfig+0x646>
 80026f0:	2301      	movs	r3, #1
 80026f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002702:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002710:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	461a      	mov	r2, r3
 8002718:	2300      	movs	r3, #0
 800271a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff f8c2 	bl	80018a4 <HAL_GetTick>
 8002720:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002726:	f7ff f8bd 	bl	80018a4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	f000 bd5a 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800274e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d104      	bne.n	8002770 <HAL_RCC_OscConfig+0x5ec>
 8002766:	4b01      	ldr	r3, [pc, #4]	; (800276c <HAL_RCC_OscConfig+0x5e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	e015      	b.n	8002798 <HAL_RCC_OscConfig+0x614>
 800276c:	40021000 	.word	0x40021000
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002782:	2302      	movs	r3, #2
 8002784:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002788:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002794:	4bc8      	ldr	r3, [pc, #800]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2202      	movs	r2, #2
 800279a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800279e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027a2:	fa92 f2a2 	rbit	r2, r2
 80027a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ad      	bne.n	8002726 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8110 	beq.w	8002a00 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d079      	beq.n	80028e4 <HAL_RCC_OscConfig+0x760>
 80027f0:	2301      	movs	r3, #1
 80027f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	4bab      	ldr	r3, [pc, #684]	; (8002abc <HAL_RCC_OscConfig+0x938>)
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	461a      	mov	r2, r3
 8002816:	2301      	movs	r3, #1
 8002818:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7ff f843 	bl	80018a4 <HAL_GetTick>
 800281e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	e00a      	b.n	800283a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002824:	f7ff f83e 	bl	80018a4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d902      	bls.n	800283a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	f000 bcdb 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002854:	2202      	movs	r2, #2
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002878:	2202      	movs	r2, #2
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fa93 f2a3 	rbit	r2, r3
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002892:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028a0:	2102      	movs	r1, #2
 80028a2:	6019      	str	r1, [r3, #0]
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f1a3 	rbit	r1, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028ba:	6019      	str	r1, [r3, #0]
  return result;
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0a0      	beq.n	8002824 <HAL_RCC_OscConfig+0x6a0>
 80028e2:	e08d      	b.n	8002a00 <HAL_RCC_OscConfig+0x87c>
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002906:	601a      	str	r2, [r3, #0]
  return result;
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002910:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCC_OscConfig+0x938>)
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	461a      	mov	r2, r3
 8002922:	2300      	movs	r3, #0
 8002924:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe ffbd 	bl	80018a4 <HAL_GetTick>
 800292a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292e:	e00a      	b.n	8002946 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe ffb8 	bl	80018a4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d902      	bls.n	8002946 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	f000 bc55 	b.w	80031f0 <HAL_RCC_OscConfig+0x106c>
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 80029b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029be:	2102      	movs	r1, #2
 80029c0:	6019      	str	r1, [r3, #0]
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f1a3 	rbit	r1, r3
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029d8:	6019      	str	r1, [r3, #0]
  return result;
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d197      	bne.n	8002930 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 81a1 	beq.w	8002d58 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d116      	bne.n	8002a56 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a32:	61d3      	str	r3, [r2, #28]
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_RCC_OscConfig+0x93c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_RCC_OscConfig+0x93c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <HAL_RCC_OscConfig+0x93c>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe ff19 	bl	80018a4 <HAL_GetTick>
 8002a72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	e009      	b.n	8002a8c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a78:	f7fe ff14 	bl	80018a4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	; 0x64
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e3b1      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_RCC_OscConfig+0x93c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ef      	beq.n	8002a78 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x940>
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a02      	ldr	r2, [pc, #8]	; (8002ab8 <HAL_RCC_OscConfig+0x934>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6213      	str	r3, [r2, #32]
 8002ab4:	e03c      	b.n	8002b30 <HAL_RCC_OscConfig+0x9ac>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	10908120 	.word	0x10908120
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x96a>
 8002ad4:	4bc1      	ldr	r3, [pc, #772]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4ac0      	ldr	r2, [pc, #768]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4bbe      	ldr	r3, [pc, #760]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4abd      	ldr	r2, [pc, #756]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e020      	b.n	8002b30 <HAL_RCC_OscConfig+0x9ac>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x994>
 8002afe:	4bb7      	ldr	r3, [pc, #732]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4ab6      	ldr	r2, [pc, #728]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	4bb4      	ldr	r3, [pc, #720]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4ab3      	ldr	r2, [pc, #716]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x9ac>
 8002b18:	4bb0      	ldr	r3, [pc, #704]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4aaf      	ldr	r2, [pc, #700]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	4bad      	ldr	r3, [pc, #692]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4aac      	ldr	r2, [pc, #688]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8081 	beq.w	8002c44 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe feaf 	bl	80018a4 <HAL_GetTick>
 8002b46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7fe feaa 	bl	80018a4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e345      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002baa:	601a      	str	r2, [r3, #0]
  return result;
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bb4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d102      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xa4c>
 8002bca:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	e013      	b.n	8002bf8 <HAL_RCC_OscConfig+0xa74>
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	fa93 f2a3 	rbit	r2, r3
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	4b79      	ldr	r3, [pc, #484]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c00:	2102      	movs	r1, #2
 8002c02:	6011      	str	r1, [r2, #0]
 8002c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c08:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	fa92 f1a2 	rbit	r1, r2
 8002c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c16:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c1a:	6011      	str	r1, [r2, #0]
  return result;
 8002c1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c20:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f002 021f 	and.w	r2, r2, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d084      	beq.n	8002b4c <HAL_RCC_OscConfig+0x9c8>
 8002c42:	e07f      	b.n	8002d44 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c44:	f7fe fe2e 	bl	80018a4 <HAL_GetTick>
 8002c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4c:	e00b      	b.n	8002c66 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fe29 	bl	80018a4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e2c4      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cac:	601a      	str	r2, [r3, #0]
  return result;
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_OscConfig+0xb4e>
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	e013      	b.n	8002cfa <HAL_RCC_OscConfig+0xb76>
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cda:	2202      	movs	r2, #2
 8002cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	fa93 f2a3 	rbit	r2, r3
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d02:	2102      	movs	r1, #2
 8002d04:	6011      	str	r1, [r2, #0]
 8002d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	fa92 f1a2 	rbit	r1, r2
 8002d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d18:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d1c:	6011      	str	r1, [r2, #0]
  return result;
 8002d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d22:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	fab2 f282 	clz	r2, r2
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f002 021f 	and.w	r2, r2, #31
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d184      	bne.n	8002c4e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d44:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d56:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8242 	beq.w	80031ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_RCC_OscConfig+0xc58>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	f000 8213 	beq.w	800319e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	f040 8162 	bne.w	800304e <HAL_RCC_OscConfig+0xeca>
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002db8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fd68 	bl	80018a4 <HAL_GetTick>
 8002dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd8:	e00c      	b.n	8002df4 <HAL_RCC_OscConfig+0xc70>
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fd60 	bl	80018a4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e1fd      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e18:	601a      	str	r2, [r3, #0]
  return result;
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d102      	bne.n	8002e3e <HAL_RCC_OscConfig+0xcba>
 8002e38:	4bb0      	ldr	r3, [pc, #704]	; (80030fc <HAL_RCC_OscConfig+0xf78>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	e027      	b.n	8002e8e <HAL_RCC_OscConfig+0xd0a>
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	fa93 f2a3 	rbit	r2, r3
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	4b9c      	ldr	r3, [pc, #624]	; (80030fc <HAL_RCC_OscConfig+0xf78>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e92:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e9a:	6011      	str	r1, [r2, #0]
 8002e9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	fa92 f1a2 	rbit	r1, r2
 8002eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002eb2:	6011      	str	r1, [r2, #0]
  return result;
 8002eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f002 021f 	and.w	r2, r2, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d182      	bne.n	8002de0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0xf78>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	430b      	orrs	r3, r1
 8002efc:	497f      	ldr	r1, [pc, #508]	; (80030fc <HAL_RCC_OscConfig+0xf78>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f26:	601a      	str	r2, [r3, #0]
  return result;
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f30:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	461a      	mov	r2, r3
 8002f44:	2301      	movs	r3, #1
 8002f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fcac 	bl	80018a4 <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f50:	e009      	b.n	8002f66 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fca7 	bl	80018a4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e144      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f8a:	601a      	str	r2, [r3, #0]
  return result;
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xe2c>
 8002faa:	4b54      	ldr	r3, [pc, #336]	; (80030fc <HAL_RCC_OscConfig+0xf78>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e027      	b.n	8003000 <HAL_RCC_OscConfig+0xe7c>
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_OscConfig+0xf78>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003004:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003008:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800300c:	6011      	str	r1, [r2, #0]
 800300e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003012:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	fa92 f1a2 	rbit	r1, r2
 800301c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003020:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003024:	6011      	str	r1, [r2, #0]
  return result;
 8003026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800302a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f042 0220 	orr.w	r2, r2, #32
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f002 021f 	and.w	r2, r2, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f202 	lsl.w	r2, r1, r2
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d082      	beq.n	8002f52 <HAL_RCC_OscConfig+0xdce>
 800304c:	e0cf      	b.n	80031ee <HAL_RCC_OscConfig+0x106a>
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003056:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800305a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003072:	601a      	str	r2, [r3, #0]
  return result;
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800307c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003088:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	461a      	mov	r2, r3
 8003090:	2300      	movs	r3, #0
 8003092:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe fc06 	bl	80018a4 <HAL_GetTick>
 8003098:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309c:	e009      	b.n	80030b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309e:	f7fe fc01 	bl	80018a4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e09e      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f2a3 	rbit	r2, r3
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030d6:	601a      	str	r2, [r3, #0]
  return result;
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d104      	bne.n	8003100 <HAL_RCC_OscConfig+0xf7c>
 80030f6:	4b01      	ldr	r3, [pc, #4]	; (80030fc <HAL_RCC_OscConfig+0xf78>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	e029      	b.n	8003150 <HAL_RCC_OscConfig+0xfcc>
 80030fc:	40021000 	.word	0x40021000
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800312e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_OscConfig+0x1078>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003154:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003158:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800315c:	6011      	str	r1, [r2, #0]
 800315e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003162:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	fa92 f1a2 	rbit	r1, r2
 800316c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003170:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003174:	6011      	str	r1, [r2, #0]
  return result;
 8003176:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800317a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	fab2 f282 	clz	r2, r2
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f042 0220 	orr.w	r2, r2, #32
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f002 021f 	and.w	r2, r2, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d180      	bne.n	800309e <HAL_RCC_OscConfig+0xf1a>
 800319c:	e027      	b.n	80031ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e01e      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_OscConfig+0x1078>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d10b      	bne.n	80031ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000

08003200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b09e      	sub	sp, #120	; 0x78
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e162      	b.n	80034de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b90      	ldr	r3, [pc, #576]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d910      	bls.n	8003248 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b8d      	ldr	r3, [pc, #564]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 0207 	bic.w	r2, r3, #7
 800322e:	498b      	ldr	r1, [pc, #556]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b89      	ldr	r3, [pc, #548]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e14a      	b.n	80034de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b82      	ldr	r3, [pc, #520]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	497f      	ldr	r1, [pc, #508]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80dc 	beq.w	800342c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d13c      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xf6>
 800327c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003280:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800328a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xa6>
 80032a0:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e00f      	b.n	80032c6 <HAL_RCC_ClockConfig+0xc6>
 80032a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	667b      	str	r3, [r7, #100]	; 0x64
 80032b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b8:	663b      	str	r3, [r7, #96]	; 0x60
 80032ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032c2:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80032cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ce:	fa92 f2a2 	rbit	r2, r2
 80032d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032d6:	fab2 f282 	clz	r2, r2
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	f042 0220 	orr.w	r2, r2, #32
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f002 021f 	and.w	r2, r2, #31
 80032e6:	2101      	movs	r1, #1
 80032e8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d17b      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0f3      	b.n	80034de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d13c      	bne.n	8003378 <HAL_RCC_ClockConfig+0x178>
 80032fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_RCC_ClockConfig+0x128>
 8003322:	4b4f      	ldr	r3, [pc, #316]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	e00f      	b.n	8003348 <HAL_RCC_ClockConfig+0x148>
 8003328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
 8003336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
 800333c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003344:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800334c:	63ba      	str	r2, [r7, #56]	; 0x38
 800334e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f002 021f 	and.w	r2, r2, #31
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d13a      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b2      	b.n	80034de <HAL_RCC_ClockConfig+0x2de>
 8003378:	2302      	movs	r3, #2
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x1a0>
 800339a:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e00d      	b.n	80033bc <HAL_RCC_ClockConfig+0x1bc>
 80033a0:	2302      	movs	r3, #2
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2202      	movs	r2, #2
 80033be:	61ba      	str	r2, [r7, #24]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	fa92 f2a2 	rbit	r2, r2
 80033c6:	617a      	str	r2, [r7, #20]
  return result;
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	fab2 f282 	clz	r2, r2
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	f042 0220 	orr.w	r2, r2, #32
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f002 021f 	and.w	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f202 	lsl.w	r2, r1, r2
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e079      	b.n	80034de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	491a      	ldr	r1, [pc, #104]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe fa52 	bl	80018a4 <HAL_GetTick>
 8003400:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe fa4e 	bl	80018a4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e061      	b.n	80034de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d214      	bcs.n	8003464 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4906      	ldr	r1, [pc, #24]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <HAL_RCC_ClockConfig+0x25c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e040      	b.n	80034de <HAL_RCC_ClockConfig+0x2de>
 800345c:	40022000 	.word	0x40022000
 8003460:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	491a      	ldr	r1, [pc, #104]	; (80034e8 <HAL_RCC_ClockConfig+0x2e8>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348e:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_RCC_ClockConfig+0x2e8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4912      	ldr	r1, [pc, #72]	; (80034e8 <HAL_RCC_ClockConfig+0x2e8>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034a2:	f000 f829 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80034a6:	4601      	mov	r1, r0
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_RCC_ClockConfig+0x2e8>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b0:	22f0      	movs	r2, #240	; 0xf0
 80034b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	fa92 f2a2 	rbit	r2, r2
 80034ba:	60fa      	str	r2, [r7, #12]
  return result;
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	fab2 f282 	clz	r2, r2
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	40d3      	lsrs	r3, r2
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x2ec>)
 80034c8:	5cd3      	ldrb	r3, [r2, r3]
 80034ca:	fa21 f303 	lsr.w	r3, r1, r3
 80034ce:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <HAL_RCC_ClockConfig+0x2f0>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <HAL_RCC_ClockConfig+0x2f4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f9a0 	bl	800181c <HAL_InitTick>
  
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3778      	adds	r7, #120	; 0x78
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	0800b674 	.word	0x0800b674
 80034f0:	20000004 	.word	0x20000004
 80034f4:	20000008 	.word	0x20000008

080034f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b08b      	sub	sp, #44	; 0x2c
 80034fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d002      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x30>
 8003522:	2b08      	cmp	r3, #8
 8003524:	d003      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x36>
 8003526:	e03c      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800352a:	623b      	str	r3, [r7, #32]
      break;
 800352c:	e03c      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003534:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003538:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	fa92 f2a2 	rbit	r2, r2
 8003540:	607a      	str	r2, [r7, #4]
  return result;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	40d3      	lsrs	r3, r2
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	220f      	movs	r2, #15
 800355c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	60fa      	str	r2, [r7, #12]
  return result;
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	40d3      	lsrs	r3, r2
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003572:	5cd3      	ldrb	r3, [r2, r3]
 8003574:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003580:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	fbb2 f2f3 	udiv	r2, r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	e004      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	623b      	str	r3, [r7, #32]
      break;
 80035a0:	e002      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80035a4:	623b      	str	r3, [r7, #32]
      break;
 80035a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a8:	6a3b      	ldr	r3, [r7, #32]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	372c      	adds	r7, #44	; 0x2c
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	007a1200 	.word	0x007a1200
 80035c0:	0800b68c 	.word	0x0800b68c
 80035c4:	0800b69c 	.word	0x0800b69c
 80035c8:	003d0900 	.word	0x003d0900

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000004 	.word	0x20000004

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035ea:	f7ff ffef 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035ee:	4601      	mov	r1, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80035fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	fa92 f2a2 	rbit	r2, r2
 8003604:	603a      	str	r2, [r7, #0]
  return result;
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	40d3      	lsrs	r3, r2
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	0800b684 	.word	0x0800b684

08003628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800362e:	f7ff ffcd 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003632:	4601      	mov	r1, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800363c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003640:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	fa92 f2a2 	rbit	r2, r2
 8003648:	603a      	str	r2, [r7, #0]
  return result;
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	fab2 f282 	clz	r2, r2
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	40d3      	lsrs	r3, r2
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003656:	5cd3      	ldrb	r3, [r2, r3]
 8003658:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	0800b684 	.word	0x0800b684

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e049      	b.n	8003712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fefc 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 f97c 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d122      	bne.n	8003776 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d11b      	bne.n	8003776 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0202 	mvn.w	r2, #2
 8003746:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f905 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 8003762:	e005      	b.n	8003770 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8f7 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f908 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d122      	bne.n	80037ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d11b      	bne.n	80037ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f06f 0204 	mvn.w	r2, #4
 800379a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f8db 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80037b6:	e005      	b.n	80037c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8cd 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8de 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d122      	bne.n	800381e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11b      	bne.n	800381e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f06f 0208 	mvn.w	r2, #8
 80037ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2204      	movs	r2, #4
 80037f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8b1 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 800380a:	e005      	b.n	8003818 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8a3 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8b4 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d122      	bne.n	8003872 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d11b      	bne.n	8003872 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f06f 0210 	mvn.w	r2, #16
 8003842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2208      	movs	r2, #8
 8003848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f887 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 800385e:	e005      	b.n	800386c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f879 	bl	8003958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f88a 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10e      	bne.n	800389e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0201 	mvn.w	r2, #1
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fd fc15 	bl	80010c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f95f 	bl	8003b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d8:	d10e      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f952 	bl	8003b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f838 	bl	8003994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	d10e      	bne.n	8003950 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b20      	cmp	r3, #32
 800393e:	d107      	bne.n	8003950 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0220 	mvn.w	r2, #32
 8003948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f912 	bl	8003b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <TIM_Base_SetConfig+0xdc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x28>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x28>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <TIM_Base_SetConfig+0xe0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <TIM_Base_SetConfig+0xdc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0x6a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0x6a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a24      	ldr	r2, [pc, #144]	; (8003a88 <TIM_Base_SetConfig+0xe0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0x6a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <TIM_Base_SetConfig+0xe4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0x6a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <TIM_Base_SetConfig+0xe8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0x6a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <TIM_Base_SetConfig+0xec>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <TIM_Base_SetConfig+0xdc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_Base_SetConfig+0xc0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <TIM_Base_SetConfig+0xe4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <TIM_Base_SetConfig+0xc0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <TIM_Base_SetConfig+0xe8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0xc0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <TIM_Base_SetConfig+0xec>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d103      	bne.n	8003a70 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	615a      	str	r2, [r3, #20]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e054      	b.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a24      	ldr	r2, [pc, #144]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ae0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d009      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10c      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40014000 	.word	0x40014000

08003b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e040      	b.n	8003c44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd fc82 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fc00 	bl	80043f4 <UART_SetConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e022      	b.n	8003c44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fd2a 	bl	8004660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fdb1 	bl	80047a4 <UART_CheckIdleState>
 8003c42:	4603      	mov	r3, r0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d178      	bne.n	8003d56 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_UART_Transmit+0x24>
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e071      	b.n	8003d58 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2221      	movs	r2, #33	; 0x21
 8003c80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c82:	f7fd fe0f 	bl	80018a4 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Transmit+0x68>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cbc:	e030      	b.n	8003d20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fe13 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d004      	beq.n	8003cde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e03c      	b.n	8003d58 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e008      	b.n	8003d0e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b292      	uxth	r2, r2
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1c8      	bne.n	8003cbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2200      	movs	r2, #0
 8003d34:	2140      	movs	r1, #64	; 0x40
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fddc 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e005      	b.n	8003d58 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
  }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d132      	bne.n	8003dde <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_UART_Receive_IT+0x24>
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e02b      	b.n	8003de0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d018      	beq.n	8003dce <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	613b      	str	r3, [r7, #16]
   return(result);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	623b      	str	r3, [r7, #32]
 8003dbc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	69f9      	ldr	r1, [r7, #28]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e6      	bne.n	8003d9c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fdf5 	bl	80049c4 <UART_Start_Receive_IT>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b0ba      	sub	sp, #232	; 0xe8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e12:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e16:	4013      	ands	r3, r2
 8003e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d115      	bne.n	8003e50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00f      	beq.n	8003e50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 82ab 	beq.w	800439c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      }
      return;
 8003e4e:	e2a5      	b.n	800439c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8117 	beq.w	8004088 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e6a:	4b85      	ldr	r3, [pc, #532]	; (8004080 <HAL_UART_IRQHandler+0x298>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 810a 	beq.w	8004088 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d011      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xbc>
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xec>
 8003eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <HAL_UART_IRQHandler+0x11c>
 8003ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efa:	f043 0202 	orr.w	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d017      	beq.n	8003f40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	f043 0208 	orr.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <HAL_UART_IRQHandler+0x18a>
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00c      	beq.n	8003f72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8211 	beq.w	80043a0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d005      	beq.n	8003fca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04f      	beq.n	800406a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fdc0 	bl	8004b50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d141      	bne.n	8004062 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800400a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800400e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1d9      	bne.n	8003fde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004036:	4a13      	ldr	r2, [pc, #76]	; (8004084 <HAL_UART_IRQHandler+0x29c>)
 8004038:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd feef 	bl	8001e22 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d017      	beq.n	800407a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00f      	b.n	800407a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9b4 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00b      	b.n	800407a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9b0 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e007      	b.n	800407a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9ac 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004078:	e192      	b.n	80043a0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407a:	bf00      	nop
    return;
 800407c:	e190      	b.n	80043a0 <HAL_UART_IRQHandler+0x5b8>
 800407e:	bf00      	nop
 8004080:	04000120 	.word	0x04000120
 8004084:	08004c19 	.word	0x08004c19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 814b 	bne.w	8004328 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8144 	beq.w	8004328 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 813d 	beq.w	8004328 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2210      	movs	r2, #16
 80040b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	f040 80b5 	bne.w	8004230 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8164 	beq.w	80043a4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	429a      	cmp	r2, r3
 80040e8:	f080 815c 	bcs.w	80043a4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	f000 8086 	beq.w	800420e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800412c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004130:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004138:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1da      	bne.n	8004102 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3308      	adds	r3, #8
 8004152:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800415c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004170:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004174:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004178:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e1      	bne.n	800414c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e3      	bne.n	8004188 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e4      	bne.n	80041ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd fdd1 	bl	8001db0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004220:	b29b      	uxth	r3, r3
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	b29b      	uxth	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8d7 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800422e:	e0b9      	b.n	80043a4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800423c:	b29b      	uxth	r3, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80ab 	beq.w	80043a8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a6 	beq.w	80043a8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
 8004280:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800428c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e4      	bne.n	800425c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	623b      	str	r3, [r7, #32]
   return(result);
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042b6:	633a      	str	r2, [r7, #48]	; 0x30
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e3      	bne.n	8004292 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	617b      	str	r3, [r7, #20]
   return(result);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e4      	bne.n	80042de <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800431a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f85b 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004326:	e03f      	b.n	80043a8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <HAL_UART_IRQHandler+0x56a>
 8004334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fe4c 	bl	8004fe8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004350:	e02d      	b.n	80043ae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01c      	beq.n	80043ac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
    }
    return;
 800437a:	e017      	b.n	80043ac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <HAL_UART_IRQHandler+0x5c6>
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fc55 	bl	8004c44 <UART_EndTransmit_IT>
    return;
 800439a:	e008      	b.n	80043ae <HAL_UART_IRQHandler+0x5c6>
      return;
 800439c:	bf00      	nop
 800439e:	e006      	b.n	80043ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80043a0:	bf00      	nop
 80043a2:	e004      	b.n	80043ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80043a4:	bf00      	nop
 80043a6:	e002      	b.n	80043ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80043a8:	bf00      	nop
 80043aa:	e000      	b.n	80043ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80043ac:	bf00      	nop
  }

}
 80043ae:	37e8      	adds	r7, #232	; 0xe8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b8a      	ldr	r3, [pc, #552]	; (8004648 <UART_SetConfig+0x254>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	6979      	ldr	r1, [r7, #20]
 8004428:	430b      	orrs	r3, r1
 800442a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a78      	ldr	r2, [pc, #480]	; (800464c <UART_SetConfig+0x258>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d120      	bne.n	80044b2 <UART_SetConfig+0xbe>
 8004470:	4b77      	ldr	r3, [pc, #476]	; (8004650 <UART_SetConfig+0x25c>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b03      	cmp	r3, #3
 800447a:	d817      	bhi.n	80044ac <UART_SetConfig+0xb8>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0x90>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	08004495 	.word	0x08004495
 8004488:	080044a1 	.word	0x080044a1
 800448c:	080044a7 	.word	0x080044a7
 8004490:	0800449b 	.word	0x0800449b
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e01d      	b.n	80044d6 <UART_SetConfig+0xe2>
 800449a:	2302      	movs	r3, #2
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	e01a      	b.n	80044d6 <UART_SetConfig+0xe2>
 80044a0:	2304      	movs	r3, #4
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e017      	b.n	80044d6 <UART_SetConfig+0xe2>
 80044a6:	2308      	movs	r3, #8
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e014      	b.n	80044d6 <UART_SetConfig+0xe2>
 80044ac:	2310      	movs	r3, #16
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e011      	b.n	80044d6 <UART_SetConfig+0xe2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a67      	ldr	r2, [pc, #412]	; (8004654 <UART_SetConfig+0x260>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d102      	bne.n	80044c2 <UART_SetConfig+0xce>
 80044bc:	2300      	movs	r3, #0
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e009      	b.n	80044d6 <UART_SetConfig+0xe2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a64      	ldr	r2, [pc, #400]	; (8004658 <UART_SetConfig+0x264>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d102      	bne.n	80044d2 <UART_SetConfig+0xde>
 80044cc:	2300      	movs	r3, #0
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e001      	b.n	80044d6 <UART_SetConfig+0xe2>
 80044d2:	2310      	movs	r3, #16
 80044d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044de:	d15a      	bne.n	8004596 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80044e0:	7ffb      	ldrb	r3, [r7, #31]
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d827      	bhi.n	8004536 <UART_SetConfig+0x142>
 80044e6:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <UART_SetConfig+0xf8>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004521 	.word	0x08004521
 80044f8:	08004537 	.word	0x08004537
 80044fc:	08004527 	.word	0x08004527
 8004500:	08004537 	.word	0x08004537
 8004504:	08004537 	.word	0x08004537
 8004508:	08004537 	.word	0x08004537
 800450c:	0800452f 	.word	0x0800452f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004510:	f7ff f868 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8004514:	61b8      	str	r0, [r7, #24]
        break;
 8004516:	e013      	b.n	8004540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004518:	f7ff f886 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 800451c:	61b8      	str	r0, [r7, #24]
        break;
 800451e:	e00f      	b.n	8004540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004520:	4b4e      	ldr	r3, [pc, #312]	; (800465c <UART_SetConfig+0x268>)
 8004522:	61bb      	str	r3, [r7, #24]
        break;
 8004524:	e00c      	b.n	8004540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fe ffe7 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 800452a:	61b8      	str	r0, [r7, #24]
        break;
 800452c:	e008      	b.n	8004540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	61bb      	str	r3, [r7, #24]
        break;
 8004534:	e004      	b.n	8004540 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	77bb      	strb	r3, [r7, #30]
        break;
 800453e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d074      	beq.n	8004630 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	005a      	lsls	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	441a      	add	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d916      	bls.n	8004590 <UART_SetConfig+0x19c>
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d212      	bcs.n	8004590 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f023 030f 	bic.w	r3, r3, #15
 8004572:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	b29a      	uxth	r2, r3
 8004580:	89fb      	ldrh	r3, [r7, #14]
 8004582:	4313      	orrs	r3, r2
 8004584:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	89fa      	ldrh	r2, [r7, #14]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	e04f      	b.n	8004630 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77bb      	strb	r3, [r7, #30]
 8004594:	e04c      	b.n	8004630 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004596:	7ffb      	ldrb	r3, [r7, #31]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d828      	bhi.n	80045ee <UART_SetConfig+0x1fa>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0x1b0>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	080045ef 	.word	0x080045ef
 80045b4:	080045df 	.word	0x080045df
 80045b8:	080045ef 	.word	0x080045ef
 80045bc:	080045ef 	.word	0x080045ef
 80045c0:	080045ef 	.word	0x080045ef
 80045c4:	080045e7 	.word	0x080045e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7ff f80c 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 80045cc:	61b8      	str	r0, [r7, #24]
        break;
 80045ce:	e013      	b.n	80045f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7ff f82a 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 80045d4:	61b8      	str	r0, [r7, #24]
        break;
 80045d6:	e00f      	b.n	80045f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d8:	4b20      	ldr	r3, [pc, #128]	; (800465c <UART_SetConfig+0x268>)
 80045da:	61bb      	str	r3, [r7, #24]
        break;
 80045dc:	e00c      	b.n	80045f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045de:	f7fe ff8b 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80045e2:	61b8      	str	r0, [r7, #24]
        break;
 80045e4:	e008      	b.n	80045f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ea:	61bb      	str	r3, [r7, #24]
        break;
 80045ec:	e004      	b.n	80045f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	77bb      	strb	r3, [r7, #30]
        break;
 80045f6:	bf00      	nop
    }

    if (pclk != 0U)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	085a      	lsrs	r2, r3, #1
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	441a      	add	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d909      	bls.n	800462c <UART_SetConfig+0x238>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461e:	d205      	bcs.n	800462c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	b29a      	uxth	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	e001      	b.n	8004630 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800463c:	7fbb      	ldrb	r3, [r7, #30]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	efff69f3 	.word	0xefff69f3
 800464c:	40013800 	.word	0x40013800
 8004650:	40021000 	.word	0x40021000
 8004654:	40004400 	.word	0x40004400
 8004658:	40004800 	.word	0x40004800
 800465c:	007a1200 	.word	0x007a1200

08004660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01a      	beq.n	8004776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475e:	d10a      	bne.n	8004776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b098      	sub	sp, #96	; 0x60
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047b4:	f7fd f876 	bl	80018a4 <HAL_GetTick>
 80047b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d12e      	bne.n	8004826 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d0:	2200      	movs	r2, #0
 80047d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f88c 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d021      	beq.n	8004826 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f6:	653b      	str	r3, [r7, #80]	; 0x50
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
 8004802:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e6      	bne.n	80047e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e062      	b.n	80048ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d149      	bne.n	80048c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483c:	2200      	movs	r2, #0
 800483e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f856 	bl	80048f4 <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d03c      	beq.n	80048c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	623b      	str	r3, [r7, #32]
   return(result);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
 800486e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e6      	bne.n	800484e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	64bb      	str	r3, [r7, #72]	; 0x48
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048a0:	61fa      	str	r2, [r7, #28]
 80048a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	69b9      	ldr	r1, [r7, #24]
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	617b      	str	r3, [r7, #20]
   return(result);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e011      	b.n	80048ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3758      	adds	r7, #88	; 0x58
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004904:	e049      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d045      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fc ffc9 	bl	80018a4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <UART_WaitOnFlagUntilTimeout+0x30>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e048      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d031      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d110      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2208      	movs	r2, #8
 800494a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f8ff 	bl	8004b50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2208      	movs	r2, #8
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e029      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004974:	d111      	bne.n	800499a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800497e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f8e5 	bl	8004b50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e00f      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d0a6      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b097      	sub	sp, #92	; 0x5c
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	d10e      	bne.n	8004a16 <UART_Start_Receive_IT+0x52>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <UART_Start_Receive_IT+0x48>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a0a:	e02d      	b.n	8004a68 <UART_Start_Receive_IT+0xa4>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	22ff      	movs	r2, #255	; 0xff
 8004a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a14:	e028      	b.n	8004a68 <UART_Start_Receive_IT+0xa4>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10d      	bne.n	8004a3a <UART_Start_Receive_IT+0x76>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <UART_Start_Receive_IT+0x6c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	22ff      	movs	r2, #255	; 0xff
 8004a2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a2e:	e01b      	b.n	8004a68 <UART_Start_Receive_IT+0xa4>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	227f      	movs	r2, #127	; 0x7f
 8004a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a38:	e016      	b.n	8004a68 <UART_Start_Receive_IT+0xa4>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a42:	d10d      	bne.n	8004a60 <UART_Start_Receive_IT+0x9c>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <UART_Start_Receive_IT+0x92>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	227f      	movs	r2, #127	; 0x7f
 8004a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a54:	e008      	b.n	8004a68 <UART_Start_Receive_IT+0xa4>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	223f      	movs	r2, #63	; 0x3f
 8004a5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a5e:	e003      	b.n	8004a68 <UART_Start_Receive_IT+0xa4>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2222      	movs	r2, #34	; 0x22
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a98:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab4:	d107      	bne.n	8004ac6 <UART_Start_Receive_IT+0x102>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <UART_Start_Receive_IT+0x184>)
 8004ac2:	669a      	str	r2, [r3, #104]	; 0x68
 8004ac4:	e002      	b.n	8004acc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <UART_Start_Receive_IT+0x188>)
 8004aca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
 8004af4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e6      	bne.n	8004ad4 <UART_Start_Receive_IT+0x110>
 8004b06:	e018      	b.n	8004b3a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	613b      	str	r3, [r7, #16]
   return(result);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f043 0320 	orr.w	r3, r3, #32
 8004b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	69f9      	ldr	r1, [r7, #28]
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e6      	bne.n	8004b08 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	375c      	adds	r7, #92	; 0x5c
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	08004e41 	.word	0x08004e41
 8004b4c:	08004c99 	.word	0x08004c99

08004b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b095      	sub	sp, #84	; 0x54
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b76:	643b      	str	r3, [r7, #64]	; 0x40
 8004b78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e6      	bne.n	8004b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e5      	bne.n	8004b8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d118      	bne.n	8004bf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6979      	ldr	r1, [r7, #20]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e6      	bne.n	8004bc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c0c:	bf00      	nop
 8004c0e:	3754      	adds	r7, #84	; 0x54
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fbc6 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	613b      	str	r3, [r7, #16]
   return(result);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e6      	bne.n	8004c4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff fb92 	bl	80043b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c90:	bf00      	nop
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b09c      	sub	sp, #112	; 0x70
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ca6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb0:	2b22      	cmp	r3, #34	; 0x22
 8004cb2:	f040 80b9 	bne.w	8004e28 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004cc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004cc4:	b2d9      	uxtb	r1, r3
 8004cc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f040 809c 	bne.w	8004e38 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e6      	bne.n	8004d00 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	667b      	str	r3, [r7, #100]	; 0x64
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d52:	647a      	str	r2, [r7, #68]	; 0x44
 8004d54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d018      	beq.n	8004dba <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	623b      	str	r3, [r7, #32]
   return(result);
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
 8004da8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e6      	bne.n	8004d88 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d12e      	bne.n	8004e20 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	69b9      	ldr	r1, [r7, #24]
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	617b      	str	r3, [r7, #20]
   return(result);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e6      	bne.n	8004dc8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d103      	bne.n	8004e10 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff fadf 	bl	80043dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e1e:	e00b      	b.n	8004e38 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fc f8e9 	bl	8000ff8 <HAL_UART_RxCpltCallback>
}
 8004e26:	e007      	b.n	8004e38 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0208 	orr.w	r2, r2, #8
 8004e36:	619a      	str	r2, [r3, #24]
}
 8004e38:	bf00      	nop
 8004e3a:	3770      	adds	r7, #112	; 0x70
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b09c      	sub	sp, #112	; 0x70
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e58:	2b22      	cmp	r3, #34	; 0x22
 8004e5a:	f040 80b9 	bne.w	8004fd0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004e72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e76:	4013      	ands	r3, r2
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 809c 	bne.w	8004fe0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004efa:	643a      	str	r2, [r7, #64]	; 0x40
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d018      	beq.n	8004f62 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f50:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e6      	bne.n	8004f30 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d12e      	bne.n	8004fc8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e6      	bne.n	8004f70 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d103      	bne.n	8004fb8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fa0b 	bl	80043dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fc6:	e00b      	b.n	8004fe0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fc f815 	bl	8000ff8 <HAL_UART_RxCpltCallback>
}
 8004fce:	e007      	b.n	8004fe0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0208 	orr.w	r2, r2, #8
 8004fde:	619a      	str	r2, [r3, #24]
}
 8004fe0:	bf00      	nop
 8004fe2:	3770      	adds	r7, #112	; 0x70
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005002:	f3ef 8305 	mrs	r3, IPSR
 8005006:	60bb      	str	r3, [r7, #8]
  return(result);
 8005008:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500e:	f3ef 8310 	mrs	r3, PRIMASK
 8005012:	607b      	str	r3, [r7, #4]
  return(result);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <osKernelInitialize+0x32>
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <osKernelInitialize+0x64>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d109      	bne.n	8005036 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005022:	f3ef 8311 	mrs	r3, BASEPRI
 8005026:	603b      	str	r3, [r7, #0]
  return(result);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800502e:	f06f 0305 	mvn.w	r3, #5
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e00c      	b.n	8005050 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <osKernelInitialize+0x64>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d105      	bne.n	800504a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <osKernelInitialize+0x64>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	e002      	b.n	8005050 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000410 	.word	0x20000410

08005064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506a:	f3ef 8305 	mrs	r3, IPSR
 800506e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005070:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10f      	bne.n	8005096 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005076:	f3ef 8310 	mrs	r3, PRIMASK
 800507a:	607b      	str	r3, [r7, #4]
  return(result);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <osKernelStart+0x32>
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <osKernelStart+0x64>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d109      	bne.n	800509e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800508a:	f3ef 8311 	mrs	r3, BASEPRI
 800508e:	603b      	str	r3, [r7, #0]
  return(result);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005096:	f06f 0305 	mvn.w	r3, #5
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e00e      	b.n	80050bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <osKernelStart+0x64>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d107      	bne.n	80050b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <osKernelStart+0x64>)
 80050a8:	2202      	movs	r2, #2
 80050aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80050ac:	f001 fba6 	bl	80067fc <vTaskStartScheduler>
      stat = osOK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e002      	b.n	80050bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80050bc:	68fb      	ldr	r3, [r7, #12]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000410 	.word	0x20000410

080050cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b092      	sub	sp, #72	; 0x48
 80050d0:	af04      	add	r7, sp, #16
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050dc:	f3ef 8305 	mrs	r3, IPSR
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f040 8094 	bne.w	8005212 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ea:	f3ef 8310 	mrs	r3, PRIMASK
 80050ee:	623b      	str	r3, [r7, #32]
  return(result);
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 808d 	bne.w	8005212 <osThreadNew+0x146>
 80050f8:	4b48      	ldr	r3, [pc, #288]	; (800521c <osThreadNew+0x150>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d106      	bne.n	800510e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005100:	f3ef 8311 	mrs	r3, BASEPRI
 8005104:	61fb      	str	r3, [r7, #28]
  return(result);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 8082 	bne.w	8005212 <osThreadNew+0x146>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d07e      	beq.n	8005212 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005118:	2318      	movs	r3, #24
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800511c:	2300      	movs	r3, #0
 800511e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005120:	f107 031b 	add.w	r3, r7, #27
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005126:	f04f 33ff 	mov.w	r3, #4294967295
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d045      	beq.n	80051be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <osThreadNew+0x74>
        name = attr->name;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <osThreadNew+0x9a>
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	2b38      	cmp	r3, #56	; 0x38
 8005158:	d805      	bhi.n	8005166 <osThreadNew+0x9a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <osThreadNew+0x9e>
        return (NULL);
 8005166:	2300      	movs	r3, #0
 8005168:	e054      	b.n	8005214 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00e      	beq.n	80051a0 <osThreadNew+0xd4>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2ba7      	cmp	r3, #167	; 0xa7
 8005188:	d90a      	bls.n	80051a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800518e:	2b00      	cmp	r3, #0
 8005190:	d006      	beq.n	80051a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <osThreadNew+0xd4>
        mem = 1;
 800519a:	2301      	movs	r3, #1
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
 800519e:	e010      	b.n	80051c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10c      	bne.n	80051c2 <osThreadNew+0xf6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d108      	bne.n	80051c2 <osThreadNew+0xf6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <osThreadNew+0xf6>
          mem = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80051bc:	e001      	b.n	80051c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d110      	bne.n	80051ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051d0:	9202      	str	r2, [sp, #8]
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f001 f928 	bl	8006434 <xTaskCreateStatic>
 80051e4:	4603      	mov	r3, r0
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e013      	b.n	8005212 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d110      	bne.n	8005212 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	f107 0314 	add.w	r3, r7, #20
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f001 f972 	bl	80064ec <xTaskCreate>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d001      	beq.n	8005212 <osThreadNew+0x146>
          hTask = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005212:	697b      	ldr	r3, [r7, #20]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3738      	adds	r7, #56	; 0x38
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20000410 	.word	0x20000410

08005220 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005228:	f3ef 8305 	mrs	r3, IPSR
 800522c:	613b      	str	r3, [r7, #16]
  return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10f      	bne.n	8005254 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005234:	f3ef 8310 	mrs	r3, PRIMASK
 8005238:	60fb      	str	r3, [r7, #12]
  return(result);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d109      	bne.n	8005254 <osDelay+0x34>
 8005240:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <osDelay+0x58>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d109      	bne.n	800525c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005248:	f3ef 8311 	mrs	r3, BASEPRI
 800524c:	60bb      	str	r3, [r7, #8]
  return(result);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <osDelay+0x3c>
    stat = osErrorISR;
 8005254:	f06f 0305 	mvn.w	r3, #5
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e007      	b.n	800526c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 fa94 	bl	8006794 <vTaskDelay>
    }
  }

  return (stat);
 800526c:	697b      	ldr	r3, [r7, #20]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000410 	.word	0x20000410

0800527c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005288:	f3ef 8305 	mrs	r3, IPSR
 800528c:	617b      	str	r3, [r7, #20]
  return(result);
 800528e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8005290:	2b00      	cmp	r3, #0
 8005292:	d13d      	bne.n	8005310 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005294:	f3ef 8310 	mrs	r3, PRIMASK
 8005298:	613b      	str	r3, [r7, #16]
  return(result);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d137      	bne.n	8005310 <osEventFlagsNew+0x94>
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <osEventFlagsNew+0xa0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d105      	bne.n	80052b4 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052a8:	f3ef 8311 	mrs	r3, BASEPRI
 80052ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d12d      	bne.n	8005310 <osEventFlagsNew+0x94>
    mem = -1;
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295
 80052b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <osEventFlagsNew+0x5a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b1f      	cmp	r3, #31
 80052ce:	d902      	bls.n	80052d6 <osEventFlagsNew+0x5a>
        mem = 1;
 80052d0:	2301      	movs	r3, #1
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e00c      	b.n	80052f0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d108      	bne.n	80052f0 <osEventFlagsNew+0x74>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <osEventFlagsNew+0x74>
          mem = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e001      	b.n	80052f0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d106      	bne.n	8005304 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f912 	bl	8005524 <xEventGroupCreateStatic>
 8005300:	61f8      	str	r0, [r7, #28]
 8005302:	e005      	b.n	8005310 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800530a:	f000 f942 	bl	8005592 <xEventGroupCreate>
 800530e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005310:	69fb      	ldr	r3, [r7, #28]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000410 	.word	0x20000410

08005320 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <osEventFlagsSet+0x1e>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800533e:	f06f 0303 	mvn.w	r3, #3
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e03a      	b.n	80053bc <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005346:	f3ef 8305 	mrs	r3, IPSR
 800534a:	617b      	str	r3, [r7, #20]
  return(result);
 800534c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10f      	bne.n	8005372 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005352:	f3ef 8310 	mrs	r3, PRIMASK
 8005356:	613b      	str	r3, [r7, #16]
  return(result);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <osEventFlagsSet+0x52>
 800535e:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <osEventFlagsSet+0xa8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d123      	bne.n	80053ae <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005366:	f3ef 8311 	mrs	r3, BASEPRI
 800536a:	60fb      	str	r3, [r7, #12]
  return(result);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01d      	beq.n	80053ae <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	461a      	mov	r2, r3
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f000 faaa 	bl	80058d8 <xEventGroupSetBitsFromISR>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800538a:	f06f 0302 	mvn.w	r3, #2
 800538e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005390:	e013      	b.n	80053ba <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00e      	beq.n	80053ba <osEventFlagsSet+0x9a>
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <osEventFlagsSet+0xac>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80053ac:	e005      	b.n	80053ba <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	69b8      	ldr	r0, [r7, #24]
 80053b2:	f000 f9d7 	bl	8005764 <xEventGroupSetBits>
 80053b6:	61f8      	str	r0, [r7, #28]
 80053b8:	e000      	b.n	80053bc <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80053ba:	bf00      	nop
  }

  return (rflags);
 80053bc:	69fb      	ldr	r3, [r7, #28]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000410 	.word	0x20000410
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	; 0x38
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <osEventFlagsWait+0x22>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80053f2:	f06f 0303 	mvn.w	r3, #3
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
 80053f8:	e059      	b.n	80054ae <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053fa:	f3ef 8305 	mrs	r3, IPSR
 80053fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8005400:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	61bb      	str	r3, [r7, #24]
  return(result);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <osEventFlagsWait+0x56>
 8005412:	4b29      	ldr	r3, [pc, #164]	; (80054b8 <osEventFlagsWait+0xe8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d109      	bne.n	800542e <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800541a:	f3ef 8311 	mrs	r3, BASEPRI
 800541e:	617b      	str	r3, [r7, #20]
  return(result);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8005426:	f06f 0305 	mvn.w	r3, #5
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
 800542c:	e03f      	b.n	80054ae <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800543c:	e001      	b.n	8005442 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800543e:	2300      	movs	r3, #0
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800544c:	2300      	movs	r3, #0
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005450:	e001      	b.n	8005456 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8005452:	2301      	movs	r3, #1
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	6a38      	ldr	r0, [r7, #32]
 8005462:	f000 f8b1 	bl	80055c8 <xEventGroupWaitBits>
 8005466:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	429a      	cmp	r2, r3
 8005478:	d019      	beq.n	80054ae <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8005480:	f06f 0301 	mvn.w	r3, #1
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	e012      	b.n	80054ae <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005488:	f06f 0302 	mvn.w	r3, #2
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
 800548e:	e00e      	b.n	80054ae <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80054a0:	f06f 0301 	mvn.w	r3, #1
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	e002      	b.n	80054ae <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80054a8:	f06f 0302 	mvn.w	r3, #2
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3730      	adds	r7, #48	; 0x30
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000410 	.word	0x20000410

080054bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80054cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a06      	ldr	r2, [pc, #24]	; (80054ec <vApplicationGetIdleTaskMemory+0x30>)
 80054d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	601a      	str	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000414 	.word	0x20000414
 80054ec:	200004bc 	.word	0x200004bc

080054f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a07      	ldr	r2, [pc, #28]	; (800551c <vApplicationGetTimerTaskMemory+0x2c>)
 8005500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a06      	ldr	r2, [pc, #24]	; (8005520 <vApplicationGetTimerTaskMemory+0x30>)
 8005506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	200006bc 	.word	0x200006bc
 8005520:	20000764 	.word	0x20000764

08005524 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005548:	2320      	movs	r3, #32
 800554a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b20      	cmp	r3, #32
 8005550:	d00a      	beq.n	8005568 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60fb      	str	r3, [r7, #12]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3304      	adds	r3, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f9bf 	bl	8005900 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2201      	movs	r2, #1
 8005586:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005588:	697b      	ldr	r3, [r7, #20]
	}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005598:	2020      	movs	r0, #32
 800559a:	f002 fcad 	bl	8007ef8 <pvPortMalloc>
 800559e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f9a5 	bl	8005900 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80055bc:	687b      	ldr	r3, [r7, #4]
	}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b090      	sub	sp, #64	; 0x40
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80055de:	2300      	movs	r3, #0
 80055e0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xEventGroupWaitBits+0x36>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	623b      	str	r3, [r7, #32]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <xEventGroupWaitBits+0x56>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	61fb      	str	r3, [r7, #28]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <xEventGroupWaitBits+0x72>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	61bb      	str	r3, [r7, #24]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800563a:	f001 fde3 	bl	8007204 <xTaskGetSchedulerState>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <xEventGroupWaitBits+0x82>
 8005644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <xEventGroupWaitBits+0x86>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xEventGroupWaitBits+0x88>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	617b      	str	r3, [r7, #20]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800566a:	f001 f937 	bl	80068dc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800567a:	f000 f90b 	bl	8005894 <prvTestWaitCondition>
 800567e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800568a:	2300      	movs	r3, #0
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d028      	beq.n	80056e6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	43db      	mvns	r3, r3
 800569c:	401a      	ands	r2, r3
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e020      	b.n	80056e6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80056a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80056ae:	2301      	movs	r3, #1
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
 80056b2:	e018      	b.n	80056e6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ce:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d2:	1d18      	adds	r0, r3, #4
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	4313      	orrs	r3, r2
 80056da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056dc:	4619      	mov	r1, r3
 80056de:	f001 faff 	bl	8006ce0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80056e6:	f001 f907 	bl	80068f8 <xTaskResumeAll>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80056ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d031      	beq.n	8005756 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <xEventGroupWaitBits+0x198>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005708:	f001 fe08 	bl	800731c <uxTaskResetEventItemValue>
 800570c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11a      	bne.n	800574e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005718:	f002 facc 	bl	8007cb4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005728:	f000 f8b4 	bl	8005894 <prvTestWaitCondition>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d006      	beq.n	8005746 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	43db      	mvns	r3, r3
 8005740:	401a      	ands	r2, r3
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005744:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005746:	2301      	movs	r3, #1
 8005748:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800574a:	f002 fae3 	bl	8007d14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005758:	4618      	mov	r0, r3
 800575a:	3740      	adds	r7, #64	; 0x40
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08e      	sub	sp, #56	; 0x38
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800576e:	2300      	movs	r3, #0
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xEventGroupSetBits+0x32>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <xEventGroupSetBits+0x52>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	3304      	adds	r3, #4
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	3308      	adds	r3, #8
 80057c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80057c2:	f001 f88b 	bl	80068dc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80057d8:	e03c      	b.n	8005854 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d108      	bne.n	8005816 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005814:	e008      	b.n	8005828 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d101      	bne.n	8005828 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d010      	beq.n	8005850 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	4313      	orrs	r3, r2
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005848:	4619      	mov	r1, r3
 800584a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800584c:	f001 fb14 	bl	8006e78 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	429a      	cmp	r2, r3
 800585a:	d1be      	bne.n	80057da <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	43db      	mvns	r3, r3
 8005864:	401a      	ands	r2, r3
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800586a:	f001 f845 	bl	80068f8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	681b      	ldr	r3, [r3, #0]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3738      	adds	r7, #56	; 0x38
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ff6c 	bl	8005764 <xEventGroupSetBits>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d107      	bne.n	80058ba <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e007      	b.n	80058ca <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d101      	bne.n	80058ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80058ca:	697b      	ldr	r3, [r7, #20]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	4804      	ldr	r0, [pc, #16]	; (80058fc <xEventGroupSetBitsFromISR+0x24>)
 80058ec:	f002 f894 	bl	8007a18 <xTimerPendFunctionCallFromISR>
 80058f0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80058f2:	697b      	ldr	r3, [r7, #20]
	}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	0800587b 	.word	0x0800587b

08005900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f103 0208 	add.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f103 0208 	add.w	r2, r3, #8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b8:	d103      	bne.n	80059c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e00c      	b.n	80059dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3308      	adds	r3, #8
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e002      	b.n	80059d0 <vListInsert+0x2e>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d2f6      	bcs.n	80059ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6892      	ldr	r2, [r2, #8]
 8005a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6852      	ldr	r2, [r2, #4]
 8005a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d103      	bne.n	8005a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	1e5a      	subs	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericReset+0x2a>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60bb      	str	r3, [r7, #8]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a92:	f002 f90f 	bl	8007cb4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	68f9      	ldr	r1, [r7, #12]
 8005ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	22ff      	movs	r2, #255	; 0xff
 8005ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	22ff      	movs	r2, #255	; 0xff
 8005ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d114      	bne.n	8005b12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01a      	beq.n	8005b26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3310      	adds	r3, #16
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 f95b 	bl	8006db0 <xTaskRemoveFromEventList>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <xQueueGenericReset+0xcc>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	e009      	b.n	8005b26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3310      	adds	r3, #16
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fef2 	bl	8005900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3324      	adds	r3, #36	; 0x24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff feed 	bl	8005900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b26:	f002 f8f5 	bl	8007d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b2a:	2301      	movs	r3, #1
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <xQueueGenericCreateStatic+0x52>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <xQueueGenericCreateStatic+0x56>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <xQueueGenericCreateStatic+0x58>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <xQueueGenericCreateStatic+0x7e>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <xQueueGenericCreateStatic+0x82>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xQueueGenericCreateStatic+0x84>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	61fb      	str	r3, [r7, #28]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bd6:	2350      	movs	r3, #80	; 0x50
 8005bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b50      	cmp	r3, #80	; 0x50
 8005bde:	d00a      	beq.n	8005bf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	61bb      	str	r3, [r7, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c08:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f805 	bl	8005c26 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e002      	b.n	8005c48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c54:	2101      	movs	r1, #1
 8005c56:	69b8      	ldr	r0, [r7, #24]
 8005c58:	f7ff ff06 	bl	8005a68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08e      	sub	sp, #56	; 0x38
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xQueueGenericSend+0x32>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d103      	bne.n	8005cac <xQueueGenericSend+0x40>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <xQueueGenericSend+0x44>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <xQueueGenericSend+0x46>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <xQueueGenericSend+0x60>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d103      	bne.n	8005cda <xQueueGenericSend+0x6e>
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <xQueueGenericSend+0x72>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <xQueueGenericSend+0x74>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueGenericSend+0x8e>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	623b      	str	r3, [r7, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cfa:	f001 fa83 	bl	8007204 <xTaskGetSchedulerState>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <xQueueGenericSend+0x9e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericSend+0xa2>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericSend+0xa4>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueGenericSend+0xbe>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	61fb      	str	r3, [r7, #28]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d2a:	f001 ffc3 	bl	8007cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d302      	bcc.n	8005d40 <xQueueGenericSend+0xd4>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d129      	bne.n	8005d94 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d46:	f000 fa07 	bl	8006158 <prvCopyDataToQueue>
 8005d4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d010      	beq.n	8005d76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f829 	bl	8006db0 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d013      	beq.n	8005d8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d64:	4b3f      	ldr	r3, [pc, #252]	; (8005e64 <xQueueGenericSend+0x1f8>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	e00a      	b.n	8005d8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d7c:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <xQueueGenericSend+0x1f8>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d8c:	f001 ffc2 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e063      	b.n	8005e5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d9a:	f001 ffbb 	bl	8007d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e05c      	b.n	8005e5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 f8c5 	bl	8006f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005db6:	f001 ffad 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dba:	f000 fd8f 	bl	80068dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dbe:	f001 ff79 	bl	8007cb4 <vPortEnterCritical>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d103      	bne.n	8005dd8 <xQueueGenericSend+0x16c>
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dde:	b25b      	sxtb	r3, r3
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d103      	bne.n	8005dee <xQueueGenericSend+0x182>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dee:	f001 ff91 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005df2:	1d3a      	adds	r2, r7, #4
 8005df4:	f107 0314 	add.w	r3, r7, #20
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 f8b4 	bl	8006f68 <xTaskCheckForTimeOut>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d124      	bne.n	8005e50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e08:	f000 fa9e 	bl	8006348 <prvIsQueueFull>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	3310      	adds	r3, #16
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 ff3c 	bl	8006c98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e22:	f000 fa29 	bl	8006278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e26:	f000 fd67 	bl	80068f8 <xTaskResumeAll>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f af7c 	bne.w	8005d2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <xQueueGenericSend+0x1f8>)
 8005e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	e772      	b.n	8005d2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e46:	f000 fa17 	bl	8006278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e4a:	f000 fd55 	bl	80068f8 <xTaskResumeAll>
 8005e4e:	e76c      	b.n	8005d2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e52:	f000 fa11 	bl	8006278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e56:	f000 fd4f 	bl	80068f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e5a:	2300      	movs	r3, #0
		}
	}
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3738      	adds	r7, #56	; 0x38
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	; 0x38
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <xQueueGenericSendFromISR+0x3c>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <xQueueGenericSendFromISR+0x40>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <xQueueGenericSendFromISR+0x42>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	623b      	str	r3, [r7, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSendFromISR+0x6a>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <xQueueGenericSendFromISR+0x6e>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericSendFromISR+0x70>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	61fb      	str	r3, [r7, #28]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ef2:	f001 ffc1 	bl	8007e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ef6:	f3ef 8211 	mrs	r2, BASEPRI
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	61ba      	str	r2, [r7, #24]
 8005f0c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <xQueueGenericSendFromISR+0xbc>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d12c      	bne.n	8005f7e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f34:	f000 f910 	bl	8006158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d112      	bne.n	8005f68 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	3324      	adds	r3, #36	; 0x24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 ff2e 	bl	8006db0 <xTaskRemoveFromEventList>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e007      	b.n	8005f78 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	b25a      	sxtb	r2, r3
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f7c:	e001      	b.n	8005f82 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3738      	adds	r7, #56	; 0x38
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08c      	sub	sp, #48	; 0x30
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <xQueueReceive+0x30>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	623b      	str	r3, [r7, #32]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <xQueueReceive+0x3e>
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <xQueueReceive+0x42>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <xQueueReceive+0x44>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xQueueReceive+0x5e>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	61fb      	str	r3, [r7, #28]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ff6:	f001 f905 	bl	8007204 <xTaskGetSchedulerState>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <xQueueReceive+0x6e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <xQueueReceive+0x72>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <xQueueReceive+0x74>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xQueueReceive+0x8e>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	61bb      	str	r3, [r7, #24]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006026:	f001 fe45 	bl	8007cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01f      	beq.n	8006076 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603a:	f000 f8f7 	bl	800622c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	1e5a      	subs	r2, r3, #1
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00f      	beq.n	800606e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	3310      	adds	r3, #16
 8006052:	4618      	mov	r0, r3
 8006054:	f000 feac 	bl	8006db0 <xTaskRemoveFromEventList>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800605e:	4b3d      	ldr	r3, [pc, #244]	; (8006154 <xQueueReceive+0x1bc>)
 8006060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800606e:	f001 fe51 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 8006072:	2301      	movs	r3, #1
 8006074:	e069      	b.n	800614a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800607c:	f001 fe4a 	bl	8007d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006080:	2300      	movs	r3, #0
 8006082:	e062      	b.n	800614a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800608a:	f107 0310 	add.w	r3, r7, #16
 800608e:	4618      	mov	r0, r3
 8006090:	f000 ff54 	bl	8006f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006098:	f001 fe3c 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800609c:	f000 fc1e 	bl	80068dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a0:	f001 fe08 	bl	8007cb4 <vPortEnterCritical>
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060aa:	b25b      	sxtb	r3, r3
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d103      	bne.n	80060ba <xQueueReceive+0x122>
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c0:	b25b      	sxtb	r3, r3
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d103      	bne.n	80060d0 <xQueueReceive+0x138>
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060d0:	f001 fe20 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d4:	1d3a      	adds	r2, r7, #4
 80060d6:	f107 0310 	add.w	r3, r7, #16
 80060da:	4611      	mov	r1, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 ff43 	bl	8006f68 <xTaskCheckForTimeOut>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d123      	bne.n	8006130 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ea:	f000 f917 	bl	800631c <prvIsQueueEmpty>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d017      	beq.n	8006124 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4611      	mov	r1, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fdcb 	bl	8006c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006104:	f000 f8b8 	bl	8006278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006108:	f000 fbf6 	bl	80068f8 <xTaskResumeAll>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d189      	bne.n	8006026 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <xQueueReceive+0x1bc>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	e780      	b.n	8006026 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006126:	f000 f8a7 	bl	8006278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800612a:	f000 fbe5 	bl	80068f8 <xTaskResumeAll>
 800612e:	e77a      	b.n	8006026 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006132:	f000 f8a1 	bl	8006278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006136:	f000 fbdf 	bl	80068f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800613a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613c:	f000 f8ee 	bl	800631c <prvIsQueueEmpty>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	f43f af6f 	beq.w	8006026 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800614a:	4618      	mov	r0, r3
 800614c:	3730      	adds	r7, #48	; 0x30
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	e000ed04 	.word	0xe000ed04

08006158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d14d      	bne.n	800621a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	4618      	mov	r0, r3
 8006184:	f001 f85c 	bl	8007240 <xTaskPriorityDisinherit>
 8006188:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	e043      	b.n	800621a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d119      	bne.n	80061cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6898      	ldr	r0, [r3, #8]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	461a      	mov	r2, r3
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	f003 f9c1 	bl	800952a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	441a      	add	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d32b      	bcc.n	800621a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	609a      	str	r2, [r3, #8]
 80061ca:	e026      	b.n	800621a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68d8      	ldr	r0, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	461a      	mov	r2, r3
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	f003 f9a7 	bl	800952a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	425b      	negs	r3, r3
 80061e6:	441a      	add	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d207      	bcs.n	8006208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	425b      	negs	r3, r3
 8006202:	441a      	add	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d105      	bne.n	800621a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	3b01      	subs	r3, #1
 8006218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006222:	697b      	ldr	r3, [r7, #20]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d018      	beq.n	8006270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	441a      	add	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d303      	bcc.n	8006260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68d9      	ldr	r1, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	461a      	mov	r2, r3
 800626a:	6838      	ldr	r0, [r7, #0]
 800626c:	f003 f95d 	bl	800952a <memcpy>
	}
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006280:	f001 fd18 	bl	8007cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800628a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800628c:	e011      	b.n	80062b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	2b00      	cmp	r3, #0
 8006294:	d012      	beq.n	80062bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fd88 	bl	8006db0 <xTaskRemoveFromEventList>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062a6:	f000 fec1 	bl	800702c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dce9      	bgt.n	800628e <prvUnlockQueue+0x16>
 80062ba:	e000      	b.n	80062be <prvUnlockQueue+0x46>
					break;
 80062bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	22ff      	movs	r2, #255	; 0xff
 80062c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062c6:	f001 fd25 	bl	8007d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062ca:	f001 fcf3 	bl	8007cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d6:	e011      	b.n	80062fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d012      	beq.n	8006306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3310      	adds	r3, #16
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fd63 	bl	8006db0 <xTaskRemoveFromEventList>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062f0:	f000 fe9c 	bl	800702c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006300:	2b00      	cmp	r3, #0
 8006302:	dce9      	bgt.n	80062d8 <prvUnlockQueue+0x60>
 8006304:	e000      	b.n	8006308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	22ff      	movs	r2, #255	; 0xff
 800630c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006310:	f001 fd00 	bl	8007d14 <vPortExitCritical>
}
 8006314:	bf00      	nop
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006324:	f001 fcc6 	bl	8007cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006330:	2301      	movs	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	e001      	b.n	800633a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800633a:	f001 fceb 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 800633e:	68fb      	ldr	r3, [r7, #12]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006350:	f001 fcb0 	bl	8007cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635c:	429a      	cmp	r2, r3
 800635e:	d102      	bne.n	8006366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006360:	2301      	movs	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	e001      	b.n	800636a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800636a:	f001 fcd3 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 800636e:	68fb      	ldr	r3, [r7, #12]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e014      	b.n	80063b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006388:	4a0f      	ldr	r2, [pc, #60]	; (80063c8 <vQueueAddToRegistry+0x50>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006394:	490c      	ldr	r1, [pc, #48]	; (80063c8 <vQueueAddToRegistry+0x50>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800639e:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <vQueueAddToRegistry+0x50>)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063aa:	e006      	b.n	80063ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b07      	cmp	r3, #7
 80063b6:	d9e7      	bls.n	8006388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000b64 	.word	0x20000b64

080063cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063dc:	f001 fc6a 	bl	8007cb4 <vPortEnterCritical>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d103      	bne.n	80063f6 <vQueueWaitForMessageRestricted+0x2a>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d103      	bne.n	800640c <vQueueWaitForMessageRestricted+0x40>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640c:	f001 fc82 	bl	8007d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	3324      	adds	r3, #36	; 0x24
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fc99 	bl	8006d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	f7ff ff26 	bl	8006278 <prvUnlockQueue>
	}
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af04      	add	r7, sp, #16
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	623b      	str	r3, [r7, #32]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xTaskCreateStatic+0x46>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61fb      	str	r3, [r7, #28]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800647a:	23a8      	movs	r3, #168	; 0xa8
 800647c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2ba8      	cmp	r3, #168	; 0xa8
 8006482:	d00a      	beq.n	800649a <xTaskCreateStatic+0x66>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61bb      	str	r3, [r7, #24]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <xTaskCreateStatic+0xaa>
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01b      	beq.n	80064de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064b8:	2300      	movs	r3, #0
 80064ba:	9303      	str	r3, [sp, #12]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	9302      	str	r3, [sp, #8]
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f851 	bl	8006578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064d8:	f000 f8ec 	bl	80066b4 <prvAddNewTaskToReadyList>
 80064dc:	e001      	b.n	80064e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064e2:	697b      	ldr	r3, [r7, #20]
	}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3728      	adds	r7, #40	; 0x28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	; 0x30
 80064f0:	af04      	add	r7, sp, #16
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f001 fcf9 	bl	8007ef8 <pvPortMalloc>
 8006506:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800650e:	20a8      	movs	r0, #168	; 0xa8
 8006510:	f001 fcf2 	bl	8007ef8 <pvPortMalloc>
 8006514:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
 8006522:	e005      	b.n	8006530 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	f001 fdab 	bl	8008080 <vPortFree>
 800652a:	e001      	b.n	8006530 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	2300      	movs	r3, #0
 8006542:	9303      	str	r3, [sp, #12]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	9302      	str	r3, [sp, #8]
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f80f 	bl	8006578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800655a:	69f8      	ldr	r0, [r7, #28]
 800655c:	f000 f8aa 	bl	80066b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006560:	2301      	movs	r3, #1
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e002      	b.n	800656c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800656c:	69bb      	ldr	r3, [r7, #24]
	}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	461a      	mov	r2, r3
 8006590:	21a5      	movs	r1, #165	; 0xa5
 8006592:	f002 fe77 	bl	8009284 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065a0:	3b01      	subs	r3, #1
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	617b      	str	r3, [r7, #20]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e012      	b.n	80065fc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	7819      	ldrb	r1, [r3, #0]
 80065de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	3334      	adds	r3, #52	; 0x34
 80065e6:	460a      	mov	r2, r1
 80065e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d006      	beq.n	8006604 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	3301      	adds	r3, #1
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	2b0f      	cmp	r3, #15
 8006600:	d9e9      	bls.n	80065d6 <prvInitialiseNewTask+0x5e>
 8006602:	e000      	b.n	8006606 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006604:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	2b37      	cmp	r3, #55	; 0x37
 8006612:	d901      	bls.n	8006618 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006614:	2337      	movs	r3, #55	; 0x37
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006622:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2200      	movs	r2, #0
 8006628:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff f986 	bl	8005940 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3318      	adds	r3, #24
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff f981 	bl	8005940 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	2200      	movs	r2, #0
 8006660:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	3354      	adds	r3, #84	; 0x54
 8006668:	224c      	movs	r2, #76	; 0x4c
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f002 fe09 	bl	8009284 <memset>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <prvInitialiseNewTask+0x130>)
 8006676:	659a      	str	r2, [r3, #88]	; 0x58
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	4a0c      	ldr	r2, [pc, #48]	; (80066ac <prvInitialiseNewTask+0x134>)
 800667c:	65da      	str	r2, [r3, #92]	; 0x5c
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	4a0b      	ldr	r2, [pc, #44]	; (80066b0 <prvInitialiseNewTask+0x138>)
 8006682:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f001 f9e5 	bl	8007a58 <pxPortInitialiseStack>
 800668e:	4602      	mov	r2, r0
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20001df0 	.word	0x20001df0
 80066ac:	20001e58 	.word	0x20001e58
 80066b0:	20001ec0 	.word	0x20001ec0

080066b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066bc:	f001 fafa 	bl	8007cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066c0:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ca:	4b2c      	ldr	r3, [pc, #176]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066d2:	4a2a      	ldr	r2, [pc, #168]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066d8:	4b27      	ldr	r3, [pc, #156]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d110      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066e0:	f000 fcc8 	bl	8007074 <prvInitialiseTaskLists>
 80066e4:	e00d      	b.n	8006702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066e6:	4b26      	ldr	r3, [pc, #152]	; (8006780 <prvAddNewTaskToReadyList+0xcc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066ee:	4b23      	ldr	r3, [pc, #140]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d802      	bhi.n	8006702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066fc:	4a1f      	ldr	r2, [pc, #124]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006702:	4b20      	ldr	r3, [pc, #128]	; (8006784 <prvAddNewTaskToReadyList+0xd0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <prvAddNewTaskToReadyList+0xd0>)
 800670a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <prvAddNewTaskToReadyList+0xd0>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006718:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <prvAddNewTaskToReadyList+0xd4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d903      	bls.n	8006728 <prvAddNewTaskToReadyList+0x74>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <prvAddNewTaskToReadyList+0xd4>)
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4a15      	ldr	r2, [pc, #84]	; (800678c <prvAddNewTaskToReadyList+0xd8>)
 8006736:	441a      	add	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3304      	adds	r3, #4
 800673c:	4619      	mov	r1, r3
 800673e:	4610      	mov	r0, r2
 8006740:	f7ff f90b 	bl	800595a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006744:	f001 fae6 	bl	8007d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <prvAddNewTaskToReadyList+0xcc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006750:	4b0a      	ldr	r3, [pc, #40]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	429a      	cmp	r2, r3
 800675c:	d207      	bcs.n	800676e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <prvAddNewTaskToReadyList+0xdc>)
 8006760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20001078 	.word	0x20001078
 800677c:	20000ba4 	.word	0x20000ba4
 8006780:	20001084 	.word	0x20001084
 8006784:	20001094 	.word	0x20001094
 8006788:	20001080 	.word	0x20001080
 800678c:	20000ba8 	.word	0x20000ba8
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d017      	beq.n	80067d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <vTaskDelay+0x60>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <vTaskDelay+0x30>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60bb      	str	r3, [r7, #8]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067c4:	f000 f88a 	bl	80068dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067c8:	2100      	movs	r1, #0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fdbe 	bl	800734c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067d0:	f000 f892 	bl	80068f8 <xTaskResumeAll>
 80067d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d107      	bne.n	80067ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <vTaskDelay+0x64>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	200010a0 	.word	0x200010a0
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	; 0x28
 8006800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800680a:	463a      	mov	r2, r7
 800680c:	1d39      	adds	r1, r7, #4
 800680e:	f107 0308 	add.w	r3, r7, #8
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fe52 	bl	80054bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	9202      	str	r2, [sp, #8]
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	460a      	mov	r2, r1
 800682a:	4924      	ldr	r1, [pc, #144]	; (80068bc <vTaskStartScheduler+0xc0>)
 800682c:	4824      	ldr	r0, [pc, #144]	; (80068c0 <vTaskStartScheduler+0xc4>)
 800682e:	f7ff fe01 	bl	8006434 <xTaskCreateStatic>
 8006832:	4603      	mov	r3, r0
 8006834:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <vTaskStartScheduler+0xc8>)
 8006836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006838:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <vTaskStartScheduler+0xc8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e001      	b.n	800684a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d102      	bne.n	8006856 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006850:	f000 fdd0 	bl	80073f4 <xTimerCreateTimerTask>
 8006854:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d11b      	bne.n	8006894 <vTaskStartScheduler+0x98>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006870:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <vTaskStartScheduler+0xcc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3354      	adds	r3, #84	; 0x54
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <vTaskStartScheduler+0xd0>)
 8006878:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800687a:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <vTaskStartScheduler+0xd4>)
 800687c:	f04f 32ff 	mov.w	r2, #4294967295
 8006880:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006882:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <vTaskStartScheduler+0xd8>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006888:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <vTaskStartScheduler+0xdc>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800688e:	f001 f96f 	bl	8007b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006892:	e00e      	b.n	80068b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d10a      	bne.n	80068b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60fb      	str	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <vTaskStartScheduler+0xb4>
}
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	0800b604 	.word	0x0800b604
 80068c0:	08007045 	.word	0x08007045
 80068c4:	2000109c 	.word	0x2000109c
 80068c8:	20000ba4 	.word	0x20000ba4
 80068cc:	200001d8 	.word	0x200001d8
 80068d0:	20001098 	.word	0x20001098
 80068d4:	20001084 	.word	0x20001084
 80068d8:	2000107c 	.word	0x2000107c

080068dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <vTaskSuspendAll+0x18>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a03      	ldr	r2, [pc, #12]	; (80068f4 <vTaskSuspendAll+0x18>)
 80068e8:	6013      	str	r3, [r2, #0]
}
 80068ea:	bf00      	nop
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	200010a0 	.word	0x200010a0

080068f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006906:	4b42      	ldr	r3, [pc, #264]	; (8006a10 <xTaskResumeAll+0x118>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <xTaskResumeAll+0x2c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	603b      	str	r3, [r7, #0]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006924:	f001 f9c6 	bl	8007cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006928:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <xTaskResumeAll+0x118>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	4a38      	ldr	r2, [pc, #224]	; (8006a10 <xTaskResumeAll+0x118>)
 8006930:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006932:	4b37      	ldr	r3, [pc, #220]	; (8006a10 <xTaskResumeAll+0x118>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d162      	bne.n	8006a00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800693a:	4b36      	ldr	r3, [pc, #216]	; (8006a14 <xTaskResumeAll+0x11c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d05e      	beq.n	8006a00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006942:	e02f      	b.n	80069a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006944:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <xTaskResumeAll+0x120>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3318      	adds	r3, #24
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff f85f 	bl	8005a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3304      	adds	r3, #4
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff f85a 	bl	8005a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4b2d      	ldr	r3, [pc, #180]	; (8006a1c <xTaskResumeAll+0x124>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d903      	bls.n	8006974 <xTaskResumeAll+0x7c>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <xTaskResumeAll+0x124>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <xTaskResumeAll+0x128>)
 8006982:	441a      	add	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f7fe ffe5 	bl	800595a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <xTaskResumeAll+0x12c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800699e:	4b22      	ldr	r3, [pc, #136]	; (8006a28 <xTaskResumeAll+0x130>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069a4:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <xTaskResumeAll+0x120>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1cb      	bne.n	8006944 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069b2:	f000 fc01 	bl	80071b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <xTaskResumeAll+0x134>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d010      	beq.n	80069e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069c2:	f000 f847 	bl	8006a54 <xTaskIncrementTick>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069cc:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <xTaskResumeAll+0x130>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f1      	bne.n	80069c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80069de:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <xTaskResumeAll+0x134>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <xTaskResumeAll+0x130>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d009      	beq.n	8006a00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <xTaskResumeAll+0x138>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a00:	f001 f988 	bl	8007d14 <vPortExitCritical>

	return xAlreadyYielded;
 8006a04:	68bb      	ldr	r3, [r7, #8]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200010a0 	.word	0x200010a0
 8006a14:	20001078 	.word	0x20001078
 8006a18:	20001038 	.word	0x20001038
 8006a1c:	20001080 	.word	0x20001080
 8006a20:	20000ba8 	.word	0x20000ba8
 8006a24:	20000ba4 	.word	0x20000ba4
 8006a28:	2000108c 	.word	0x2000108c
 8006a2c:	20001088 	.word	0x20001088
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <xTaskGetTickCount+0x1c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a40:	687b      	ldr	r3, [r7, #4]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	2000107c 	.word	0x2000107c

08006a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5e:	4b51      	ldr	r3, [pc, #324]	; (8006ba4 <xTaskIncrementTick+0x150>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f040 808e 	bne.w	8006b84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a68:	4b4f      	ldr	r3, [pc, #316]	; (8006ba8 <xTaskIncrementTick+0x154>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a70:	4a4d      	ldr	r2, [pc, #308]	; (8006ba8 <xTaskIncrementTick+0x154>)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d120      	bne.n	8006abe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a7c:	4b4b      	ldr	r3, [pc, #300]	; (8006bac <xTaskIncrementTick+0x158>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	603b      	str	r3, [r7, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	e7fe      	b.n	8006a9a <xTaskIncrementTick+0x46>
 8006a9c:	4b43      	ldr	r3, [pc, #268]	; (8006bac <xTaskIncrementTick+0x158>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	4b43      	ldr	r3, [pc, #268]	; (8006bb0 <xTaskIncrementTick+0x15c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a41      	ldr	r2, [pc, #260]	; (8006bac <xTaskIncrementTick+0x158>)
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	4a41      	ldr	r2, [pc, #260]	; (8006bb0 <xTaskIncrementTick+0x15c>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	4b40      	ldr	r3, [pc, #256]	; (8006bb4 <xTaskIncrementTick+0x160>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	4a3f      	ldr	r2, [pc, #252]	; (8006bb4 <xTaskIncrementTick+0x160>)
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	f000 fb7d 	bl	80071b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006abe:	4b3e      	ldr	r3, [pc, #248]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d34e      	bcc.n	8006b66 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac8:	4b38      	ldr	r3, [pc, #224]	; (8006bac <xTaskIncrementTick+0x158>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <xTaskIncrementTick+0x82>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xTaskIncrementTick+0x84>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006adc:	4b36      	ldr	r3, [pc, #216]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006ade:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae2:	601a      	str	r2, [r3, #0]
					break;
 8006ae4:	e03f      	b.n	8006b66 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ae6:	4b31      	ldr	r3, [pc, #196]	; (8006bac <xTaskIncrementTick+0x158>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d203      	bcs.n	8006b06 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006afe:	4a2e      	ldr	r2, [pc, #184]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6013      	str	r3, [r2, #0]
						break;
 8006b04:	e02f      	b.n	8006b66 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe ff82 	bl	8005a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	3318      	adds	r3, #24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe ff79 	bl	8005a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	4b25      	ldr	r3, [pc, #148]	; (8006bbc <xTaskIncrementTick+0x168>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <xTaskIncrementTick+0xe2>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <xTaskIncrementTick+0x168>)
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <xTaskIncrementTick+0x16c>)
 8006b44:	441a      	add	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f7fe ff04 	bl	800595a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b56:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <xTaskIncrementTick+0x170>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d3b3      	bcc.n	8006ac8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b64:	e7b0      	b.n	8006ac8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b66:	4b17      	ldr	r3, [pc, #92]	; (8006bc4 <xTaskIncrementTick+0x170>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6c:	4914      	ldr	r1, [pc, #80]	; (8006bc0 <xTaskIncrementTick+0x16c>)
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d907      	bls.n	8006b8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e004      	b.n	8006b8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <xTaskIncrementTick+0x174>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <xTaskIncrementTick+0x174>)
 8006b8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <xTaskIncrementTick+0x178>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b9a:	697b      	ldr	r3, [r7, #20]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	200010a0 	.word	0x200010a0
 8006ba8:	2000107c 	.word	0x2000107c
 8006bac:	20001030 	.word	0x20001030
 8006bb0:	20001034 	.word	0x20001034
 8006bb4:	20001090 	.word	0x20001090
 8006bb8:	20001098 	.word	0x20001098
 8006bbc:	20001080 	.word	0x20001080
 8006bc0:	20000ba8 	.word	0x20000ba8
 8006bc4:	20000ba4 	.word	0x20000ba4
 8006bc8:	20001088 	.word	0x20001088
 8006bcc:	2000108c 	.word	0x2000108c

08006bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <vTaskSwitchContext+0xb0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bde:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <vTaskSwitchContext+0xb4>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006be4:	e046      	b.n	8006c74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006be6:	4b27      	ldr	r3, [pc, #156]	; (8006c84 <vTaskSwitchContext+0xb4>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bec:	4b26      	ldr	r3, [pc, #152]	; (8006c88 <vTaskSwitchContext+0xb8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e010      	b.n	8006c16 <vTaskSwitchContext+0x46>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	607b      	str	r3, [r7, #4]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <vTaskSwitchContext+0x3e>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	491d      	ldr	r1, [pc, #116]	; (8006c8c <vTaskSwitchContext+0xbc>)
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0e4      	beq.n	8006bf4 <vTaskSwitchContext+0x24>
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <vTaskSwitchContext+0xbc>)
 8006c36:	4413      	add	r3, r2
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	605a      	str	r2, [r3, #4]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d104      	bne.n	8006c5a <vTaskSwitchContext+0x8a>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <vTaskSwitchContext+0xc0>)
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <vTaskSwitchContext+0xb8>)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <vTaskSwitchContext+0xc0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3354      	adds	r3, #84	; 0x54
 8006c70:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <vTaskSwitchContext+0xc4>)
 8006c72:	6013      	str	r3, [r2, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	200010a0 	.word	0x200010a0
 8006c84:	2000108c 	.word	0x2000108c
 8006c88:	20001080 	.word	0x20001080
 8006c8c:	20000ba8 	.word	0x20000ba8
 8006c90:	20000ba4 	.word	0x20000ba4
 8006c94:	200001d8 	.word	0x200001d8

08006c98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60fb      	str	r3, [r7, #12]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cbe:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <vTaskPlaceOnEventList+0x44>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3318      	adds	r3, #24
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fe fe6b 	bl	80059a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ccc:	2101      	movs	r1, #1
 8006cce:	6838      	ldr	r0, [r7, #0]
 8006cd0:	f000 fb3c 	bl	800734c <prvAddCurrentTaskToDelayedList>
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000ba4 	.word	0x20000ba4

08006ce0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	617b      	str	r3, [r7, #20]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	613b      	str	r3, [r7, #16]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d30:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3318      	adds	r3, #24
 8006d38:	4619      	mov	r1, r3
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7fe fe0d 	bl	800595a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d40:	2101      	movs	r1, #1
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fb02 	bl	800734c <prvAddCurrentTaskToDelayedList>
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	200010a0 	.word	0x200010a0
 8006d54:	20000ba4 	.word	0x20000ba4

08006d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	617b      	str	r3, [r7, #20]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <vTaskPlaceOnEventListRestricted+0x54>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3318      	adds	r3, #24
 8006d86:	4619      	mov	r1, r3
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7fe fde6 	bl	800595a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295
 8006d98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	68b8      	ldr	r0, [r7, #8]
 8006d9e:	f000 fad5 	bl	800734c <prvAddCurrentTaskToDelayedList>
	}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000ba4 	.word	0x20000ba4

08006db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60fb      	str	r3, [r7, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	3318      	adds	r3, #24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fe17 	bl	8005a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de6:	4b1e      	ldr	r3, [pc, #120]	; (8006e60 <xTaskRemoveFromEventList+0xb0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11d      	bne.n	8006e2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fe0e 	bl	8005a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <xTaskRemoveFromEventList+0xb4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <xTaskRemoveFromEventList+0x5c>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a16      	ldr	r2, [pc, #88]	; (8006e64 <xTaskRemoveFromEventList+0xb4>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <xTaskRemoveFromEventList+0xb8>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fd99 	bl	800595a <vListInsertEnd>
 8006e28:	e005      	b.n	8006e36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	3318      	adds	r3, #24
 8006e2e:	4619      	mov	r1, r3
 8006e30:	480e      	ldr	r0, [pc, #56]	; (8006e6c <xTaskRemoveFromEventList+0xbc>)
 8006e32:	f7fe fd92 	bl	800595a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <xTaskRemoveFromEventList+0xc0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d905      	bls.n	8006e50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e48:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <xTaskRemoveFromEventList+0xc4>)
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e001      	b.n	8006e54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e54:	697b      	ldr	r3, [r7, #20]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200010a0 	.word	0x200010a0
 8006e64:	20001080 	.word	0x20001080
 8006e68:	20000ba8 	.word	0x20000ba8
 8006e6c:	20001038 	.word	0x20001038
 8006e70:	20000ba4 	.word	0x20000ba4
 8006e74:	2000108c 	.word	0x2000108c

08006e78 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006e82:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	613b      	str	r3, [r7, #16]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60fb      	str	r3, [r7, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7fe fda1 	bl	8005a14 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fd9c 	bl	8005a14 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d903      	bls.n	8006ef0 <vTaskRemoveFromUnorderedEventList+0x78>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a0f      	ldr	r2, [pc, #60]	; (8006f2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006efe:	441a      	add	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7fe fd27 	bl	800595a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d902      	bls.n	8006f20 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
	}
}
 8006f20:	bf00      	nop
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	200010a0 	.word	0x200010a0
 8006f2c:	20001080 	.word	0x20001080
 8006f30:	20000ba8 	.word	0x20000ba8
 8006f34:	20000ba4 	.word	0x20000ba4
 8006f38:	2000108c 	.word	0x2000108c

08006f3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <vTaskInternalSetTimeOutState+0x24>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <vTaskInternalSetTimeOutState+0x28>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	605a      	str	r2, [r3, #4]
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20001090 	.word	0x20001090
 8006f64:	2000107c 	.word	0x2000107c

08006f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	613b      	str	r3, [r7, #16]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	60fb      	str	r3, [r7, #12]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006faa:	f000 fe83 	bl	8007cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fae:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <xTaskCheckForTimeOut+0xbc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d102      	bne.n	8006fce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e023      	b.n	8007016 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <xTaskCheckForTimeOut+0xc0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d007      	beq.n	8006fea <xTaskCheckForTimeOut+0x82>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e015      	b.n	8007016 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d20b      	bcs.n	800700c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff9b 	bl	8006f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
 800700a:	e004      	b.n	8007016 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007012:	2301      	movs	r3, #1
 8007014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007016:	f000 fe7d 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 800701a:	69fb      	ldr	r3, [r7, #28]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3720      	adds	r7, #32
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	2000107c 	.word	0x2000107c
 8007028:	20001090 	.word	0x20001090

0800702c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <vTaskMissedYield+0x14>)
 8007032:	2201      	movs	r2, #1
 8007034:	601a      	str	r2, [r3, #0]
}
 8007036:	bf00      	nop
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	2000108c 	.word	0x2000108c

08007044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800704c:	f000 f852 	bl	80070f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <prvIdleTask+0x28>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d9f9      	bls.n	800704c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <prvIdleTask+0x2c>)
 800705a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007068:	e7f0      	b.n	800704c <prvIdleTask+0x8>
 800706a:	bf00      	nop
 800706c:	20000ba8 	.word	0x20000ba8
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800707a:	2300      	movs	r3, #0
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	e00c      	b.n	800709a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4a12      	ldr	r2, [pc, #72]	; (80070d4 <prvInitialiseTaskLists+0x60>)
 800708c:	4413      	add	r3, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fc36 	bl	8005900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3301      	adds	r3, #1
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b37      	cmp	r3, #55	; 0x37
 800709e:	d9ef      	bls.n	8007080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070a0:	480d      	ldr	r0, [pc, #52]	; (80070d8 <prvInitialiseTaskLists+0x64>)
 80070a2:	f7fe fc2d 	bl	8005900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070a6:	480d      	ldr	r0, [pc, #52]	; (80070dc <prvInitialiseTaskLists+0x68>)
 80070a8:	f7fe fc2a 	bl	8005900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070ac:	480c      	ldr	r0, [pc, #48]	; (80070e0 <prvInitialiseTaskLists+0x6c>)
 80070ae:	f7fe fc27 	bl	8005900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070b2:	480c      	ldr	r0, [pc, #48]	; (80070e4 <prvInitialiseTaskLists+0x70>)
 80070b4:	f7fe fc24 	bl	8005900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070b8:	480b      	ldr	r0, [pc, #44]	; (80070e8 <prvInitialiseTaskLists+0x74>)
 80070ba:	f7fe fc21 	bl	8005900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070be:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <prvInitialiseTaskLists+0x78>)
 80070c0:	4a05      	ldr	r2, [pc, #20]	; (80070d8 <prvInitialiseTaskLists+0x64>)
 80070c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070c4:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <prvInitialiseTaskLists+0x7c>)
 80070c6:	4a05      	ldr	r2, [pc, #20]	; (80070dc <prvInitialiseTaskLists+0x68>)
 80070c8:	601a      	str	r2, [r3, #0]
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000ba8 	.word	0x20000ba8
 80070d8:	20001008 	.word	0x20001008
 80070dc:	2000101c 	.word	0x2000101c
 80070e0:	20001038 	.word	0x20001038
 80070e4:	2000104c 	.word	0x2000104c
 80070e8:	20001064 	.word	0x20001064
 80070ec:	20001030 	.word	0x20001030
 80070f0:	20001034 	.word	0x20001034

080070f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070fa:	e019      	b.n	8007130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070fc:	f000 fdda 	bl	8007cb4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007100:	4b10      	ldr	r3, [pc, #64]	; (8007144 <prvCheckTasksWaitingTermination+0x50>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fc81 	bl	8005a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007112:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <prvCheckTasksWaitingTermination+0x54>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3b01      	subs	r3, #1
 8007118:	4a0b      	ldr	r2, [pc, #44]	; (8007148 <prvCheckTasksWaitingTermination+0x54>)
 800711a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <prvCheckTasksWaitingTermination+0x58>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3b01      	subs	r3, #1
 8007122:	4a0a      	ldr	r2, [pc, #40]	; (800714c <prvCheckTasksWaitingTermination+0x58>)
 8007124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007126:	f000 fdf5 	bl	8007d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f810 	bl	8007150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <prvCheckTasksWaitingTermination+0x58>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e1      	bne.n	80070fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	2000104c 	.word	0x2000104c
 8007148:	20001078 	.word	0x20001078
 800714c:	20001060 	.word	0x20001060

08007150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3354      	adds	r3, #84	; 0x54
 800715c:	4618      	mov	r0, r3
 800715e:	f002 f92b 	bl	80093b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007168:	2b00      	cmp	r3, #0
 800716a:	d108      	bne.n	800717e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	4618      	mov	r0, r3
 8007172:	f000 ff85 	bl	8008080 <vPortFree>
				vPortFree( pxTCB );
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 ff82 	bl	8008080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800717c:	e018      	b.n	80071b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007184:	2b01      	cmp	r3, #1
 8007186:	d103      	bne.n	8007190 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 ff79 	bl	8008080 <vPortFree>
	}
 800718e:	e00f      	b.n	80071b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007196:	2b02      	cmp	r3, #2
 8007198:	d00a      	beq.n	80071b0 <prvDeleteTCB+0x60>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	60fb      	str	r3, [r7, #12]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <prvDeleteTCB+0x5e>
	}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <prvResetNextTaskUnblockTime+0x44>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <prvResetNextTaskUnblockTime+0x14>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <prvResetNextTaskUnblockTime+0x16>
 80071cc:	2300      	movs	r3, #0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <prvResetNextTaskUnblockTime+0x48>)
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071da:	e008      	b.n	80071ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071dc:	4b07      	ldr	r3, [pc, #28]	; (80071fc <prvResetNextTaskUnblockTime+0x44>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	4a05      	ldr	r2, [pc, #20]	; (8007200 <prvResetNextTaskUnblockTime+0x48>)
 80071ec:	6013      	str	r3, [r2, #0]
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	20001030 	.word	0x20001030
 8007200:	20001098 	.word	0x20001098

08007204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800720a:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <xTaskGetSchedulerState+0x34>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007212:	2301      	movs	r3, #1
 8007214:	607b      	str	r3, [r7, #4]
 8007216:	e008      	b.n	800722a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007218:	4b08      	ldr	r3, [pc, #32]	; (800723c <xTaskGetSchedulerState+0x38>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007220:	2302      	movs	r3, #2
 8007222:	607b      	str	r3, [r7, #4]
 8007224:	e001      	b.n	800722a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800722a:	687b      	ldr	r3, [r7, #4]
	}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	20001084 	.word	0x20001084
 800723c:	200010a0 	.word	0x200010a0

08007240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d056      	beq.n	8007304 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007256:	4b2e      	ldr	r3, [pc, #184]	; (8007310 <xTaskPriorityDisinherit+0xd0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	429a      	cmp	r2, r3
 800725e:	d00a      	beq.n	8007276 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60bb      	str	r3, [r7, #8]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007298:	1e5a      	subs	r2, r3, #1
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d02c      	beq.n	8007304 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d128      	bne.n	8007304 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3304      	adds	r3, #4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fbac 	bl	8005a14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <xTaskPriorityDisinherit+0xd4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d903      	bls.n	80072e4 <xTaskPriorityDisinherit+0xa4>
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <xTaskPriorityDisinherit+0xd4>)
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4a09      	ldr	r2, [pc, #36]	; (8007318 <xTaskPriorityDisinherit+0xd8>)
 80072f2:	441a      	add	r2, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	3304      	adds	r3, #4
 80072f8:	4619      	mov	r1, r3
 80072fa:	4610      	mov	r0, r2
 80072fc:	f7fe fb2d 	bl	800595a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007300:	2301      	movs	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007304:	697b      	ldr	r3, [r7, #20]
	}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000ba4 	.word	0x20000ba4
 8007314:	20001080 	.word	0x20001080
 8007318:	20000ba8 	.word	0x20000ba8

0800731c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <uxTaskResetEventItemValue+0x2c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <uxTaskResetEventItemValue+0x2c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <uxTaskResetEventItemValue+0x2c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007338:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800733a:	687b      	ldr	r3, [r7, #4]
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20000ba4 	.word	0x20000ba4

0800734c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007356:	4b21      	ldr	r3, [pc, #132]	; (80073dc <prvAddCurrentTaskToDelayedList+0x90>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800735c:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3304      	adds	r3, #4
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fb56 	bl	8005a14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d10a      	bne.n	8007386 <prvAddCurrentTaskToDelayedList+0x3a>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007376:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4819      	ldr	r0, [pc, #100]	; (80073e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007380:	f7fe faeb 	bl	800595a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007384:	e026      	b.n	80073d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800738e:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	429a      	cmp	r2, r3
 800739c:	d209      	bcs.n	80073b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fe faf9 	bl	80059a2 <vListInsert>
}
 80073b0:	e010      	b.n	80073d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073b2:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fe faef 	bl	80059a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d202      	bcs.n	80073d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073ce:	4a08      	ldr	r2, [pc, #32]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6013      	str	r3, [r2, #0]
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	2000107c 	.word	0x2000107c
 80073e0:	20000ba4 	.word	0x20000ba4
 80073e4:	20001064 	.word	0x20001064
 80073e8:	20001034 	.word	0x20001034
 80073ec:	20001030 	.word	0x20001030
 80073f0:	20001098 	.word	0x20001098

080073f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073fe:	f000 facb 	bl	8007998 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007402:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <xTimerCreateTimerTask+0x80>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d021      	beq.n	800744e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007412:	1d3a      	adds	r2, r7, #4
 8007414:	f107 0108 	add.w	r1, r7, #8
 8007418:	f107 030c 	add.w	r3, r7, #12
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe f867 	bl	80054f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	9202      	str	r2, [sp, #8]
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	2302      	movs	r3, #2
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2300      	movs	r3, #0
 8007432:	460a      	mov	r2, r1
 8007434:	4910      	ldr	r1, [pc, #64]	; (8007478 <xTimerCreateTimerTask+0x84>)
 8007436:	4811      	ldr	r0, [pc, #68]	; (800747c <xTimerCreateTimerTask+0x88>)
 8007438:	f7fe fffc 	bl	8006434 <xTaskCreateStatic>
 800743c:	4603      	mov	r3, r0
 800743e:	4a10      	ldr	r2, [pc, #64]	; (8007480 <xTimerCreateTimerTask+0x8c>)
 8007440:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007442:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <xTimerCreateTimerTask+0x8c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800744a:	2301      	movs	r3, #1
 800744c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	613b      	str	r3, [r7, #16]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800746a:	697b      	ldr	r3, [r7, #20]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	200010d4 	.word	0x200010d4
 8007478:	0800b60c 	.word	0x0800b60c
 800747c:	080075a1 	.word	0x080075a1
 8007480:	200010d8 	.word	0x200010d8

08007484 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007492:	2300      	movs	r3, #0
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	623b      	str	r3, [r7, #32]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074b2:	4b1a      	ldr	r3, [pc, #104]	; (800751c <xTimerGenericCommand+0x98>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d02a      	beq.n	8007510 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	dc18      	bgt.n	80074fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074cc:	f7ff fe9a 	bl	8007204 <xTaskGetSchedulerState>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d109      	bne.n	80074ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074d6:	4b11      	ldr	r3, [pc, #68]	; (800751c <xTimerGenericCommand+0x98>)
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f107 0110 	add.w	r1, r7, #16
 80074de:	2300      	movs	r3, #0
 80074e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e2:	f7fe fbc3 	bl	8005c6c <xQueueGenericSend>
 80074e6:	6278      	str	r0, [r7, #36]	; 0x24
 80074e8:	e012      	b.n	8007510 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074ea:	4b0c      	ldr	r3, [pc, #48]	; (800751c <xTimerGenericCommand+0x98>)
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f107 0110 	add.w	r1, r7, #16
 80074f2:	2300      	movs	r3, #0
 80074f4:	2200      	movs	r2, #0
 80074f6:	f7fe fbb9 	bl	8005c6c <xQueueGenericSend>
 80074fa:	6278      	str	r0, [r7, #36]	; 0x24
 80074fc:	e008      	b.n	8007510 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074fe:	4b07      	ldr	r3, [pc, #28]	; (800751c <xTimerGenericCommand+0x98>)
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	f107 0110 	add.w	r1, r7, #16
 8007506:	2300      	movs	r3, #0
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	f7fe fcad 	bl	8005e68 <xQueueGenericSendFromISR>
 800750e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007512:	4618      	mov	r0, r3
 8007514:	3728      	adds	r7, #40	; 0x28
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	200010d4 	.word	0x200010d4

08007520 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af02      	add	r7, sp, #8
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800752a:	4b1c      	ldr	r3, [pc, #112]	; (800759c <prvProcessExpiredTimer+0x7c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	3304      	adds	r3, #4
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fa6b 	bl	8005a14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d122      	bne.n	800758c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	18d1      	adds	r1, r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	6978      	ldr	r0, [r7, #20]
 8007554:	f000 f8c8 	bl	80076e8 <prvInsertTimerInActiveList>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d016      	beq.n	800758c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800755e:	2300      	movs	r3, #0
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	2100      	movs	r1, #0
 8007568:	6978      	ldr	r0, [r7, #20]
 800756a:	f7ff ff8b 	bl	8007484 <xTimerGenericCommand>
 800756e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60fb      	str	r3, [r7, #12]
}
 8007588:	bf00      	nop
 800758a:	e7fe      	b.n	800758a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	4798      	blx	r3
}
 8007594:	bf00      	nop
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	200010cc 	.word	0x200010cc

080075a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a8:	f107 0308 	add.w	r3, r7, #8
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 f857 	bl	8007660 <prvGetNextExpireTime>
 80075b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f803 	bl	80075c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075be:	f000 f8d5 	bl	800776c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075c2:	e7f1      	b.n	80075a8 <prvTimerTask+0x8>

080075c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075ce:	f7ff f985 	bl	80068dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 f866 	bl	80076a8 <prvSampleTimeNow>
 80075dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d130      	bne.n	8007646 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <prvProcessTimerOrBlockTask+0x3c>
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d806      	bhi.n	8007600 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075f2:	f7ff f981 	bl	80068f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075f6:	68f9      	ldr	r1, [r7, #12]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ff91 	bl	8007520 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075fe:	e024      	b.n	800764a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <prvProcessTimerOrBlockTask+0x90>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf0c      	ite	eq
 8007610:	2301      	moveq	r3, #1
 8007612:	2300      	movne	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <prvProcessTimerOrBlockTask+0x94>)
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	4619      	mov	r1, r3
 8007626:	f7fe fed1 	bl	80063cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800762a:	f7ff f965 	bl	80068f8 <xTaskResumeAll>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <prvProcessTimerOrBlockTask+0x98>)
 8007636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
}
 8007644:	e001      	b.n	800764a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007646:	f7ff f957 	bl	80068f8 <xTaskResumeAll>
}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200010d0 	.word	0x200010d0
 8007658:	200010d4 	.word	0x200010d4
 800765c:	e000ed04 	.word	0xe000ed04

08007660 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007668:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <prvGetNextExpireTime+0x44>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	bf0c      	ite	eq
 8007672:	2301      	moveq	r3, #1
 8007674:	2300      	movne	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	461a      	mov	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d105      	bne.n	8007692 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007686:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <prvGetNextExpireTime+0x44>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e001      	b.n	8007696 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007696:	68fb      	ldr	r3, [r7, #12]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	200010cc 	.word	0x200010cc

080076a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076b0:	f7ff f9c0 	bl	8006a34 <xTaskGetTickCount>
 80076b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <prvSampleTimeNow+0x3c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d205      	bcs.n	80076cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076c0:	f000 f908 	bl	80078d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	e002      	b.n	80076d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076d2:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <prvSampleTimeNow+0x3c>)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200010dc 	.word	0x200010dc

080076e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	429a      	cmp	r2, r3
 800770c:	d812      	bhi.n	8007734 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	1ad2      	subs	r2, r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	429a      	cmp	r2, r3
 800771a:	d302      	bcc.n	8007722 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800771c:	2301      	movs	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e01b      	b.n	800775a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <prvInsertTimerInActiveList+0x7c>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f7fe f938 	bl	80059a2 <vListInsert>
 8007732:	e012      	b.n	800775a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d206      	bcs.n	800774a <prvInsertTimerInActiveList+0x62>
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d302      	bcc.n	800774a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	e007      	b.n	800775a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800774a:	4b07      	ldr	r3, [pc, #28]	; (8007768 <prvInsertTimerInActiveList+0x80>)
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3304      	adds	r3, #4
 8007752:	4619      	mov	r1, r3
 8007754:	4610      	mov	r0, r2
 8007756:	f7fe f924 	bl	80059a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800775a:	697b      	ldr	r3, [r7, #20]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	200010d0 	.word	0x200010d0
 8007768:	200010cc 	.word	0x200010cc

0800776c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08e      	sub	sp, #56	; 0x38
 8007770:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007772:	e09d      	b.n	80078b0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	da18      	bge.n	80077ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800777a:	1d3b      	adds	r3, r7, #4
 800777c:	3304      	adds	r3, #4
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	61fb      	str	r3, [r7, #28]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a2:	6850      	ldr	r0, [r2, #4]
 80077a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a6:	6892      	ldr	r2, [r2, #8]
 80077a8:	4611      	mov	r1, r2
 80077aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	db7e      	blt.n	80078b0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d004      	beq.n	80077c8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	3304      	adds	r3, #4
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe f926 	bl	8005a14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077c8:	463b      	mov	r3, r7
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff ff6c 	bl	80076a8 <prvSampleTimeNow>
 80077d0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b09      	cmp	r3, #9
 80077d6:	d86a      	bhi.n	80078ae <prvProcessReceivedCommands+0x142>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <prvProcessReceivedCommands+0x74>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	08007809 	.word	0x08007809
 80077e4:	08007809 	.word	0x08007809
 80077e8:	08007809 	.word	0x08007809
 80077ec:	080078b1 	.word	0x080078b1
 80077f0:	08007865 	.word	0x08007865
 80077f4:	0800789d 	.word	0x0800789d
 80077f8:	08007809 	.word	0x08007809
 80077fc:	08007809 	.word	0x08007809
 8007800:	080078b1 	.word	0x080078b1
 8007804:	08007865 	.word	0x08007865
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	18d1      	adds	r1, r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007816:	f7ff ff67 	bl	80076e8 <prvInsertTimerInActiveList>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d047      	beq.n	80078b0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007826:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d13f      	bne.n	80078b0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	441a      	add	r2, r3
 8007838:	2300      	movs	r3, #0
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	2100      	movs	r1, #0
 8007840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007842:	f7ff fe1f 	bl	8007484 <xTimerGenericCommand>
 8007846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d130      	bne.n	80078b0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	61bb      	str	r3, [r7, #24]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	617b      	str	r3, [r7, #20]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	699a      	ldr	r2, [r3, #24]
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	18d1      	adds	r1, r2, r3
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007896:	f7ff ff27 	bl	80076e8 <prvInsertTimerInActiveList>
					break;
 800789a:	e009      	b.n	80078b0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80078a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078a8:	f000 fbea 	bl	8008080 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078ac:	e000      	b.n	80078b0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80078ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <prvProcessReceivedCommands+0x164>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	1d39      	adds	r1, r7, #4
 80078b6:	2200      	movs	r2, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fb6d 	bl	8005f98 <xQueueReceive>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f47f af57 	bne.w	8007774 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	3730      	adds	r7, #48	; 0x30
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	200010d4 	.word	0x200010d4

080078d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078da:	e045      	b.n	8007968 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078dc:	4b2c      	ldr	r3, [pc, #176]	; (8007990 <prvSwitchTimerLists+0xbc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078e6:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <prvSwitchTimerLists+0xbc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe f88d 	bl	8005a14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d12e      	bne.n	8007968 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4413      	add	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	429a      	cmp	r2, r3
 800791a:	d90e      	bls.n	800793a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007928:	4b19      	ldr	r3, [pc, #100]	; (8007990 <prvSwitchTimerLists+0xbc>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe f835 	bl	80059a2 <vListInsert>
 8007938:	e016      	b.n	8007968 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800793a:	2300      	movs	r3, #0
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	2300      	movs	r3, #0
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	2100      	movs	r1, #0
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff fd9d 	bl	8007484 <xTimerGenericCommand>
 800794a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	603b      	str	r3, [r7, #0]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007968:	4b09      	ldr	r3, [pc, #36]	; (8007990 <prvSwitchTimerLists+0xbc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1b4      	bne.n	80078dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007972:	4b07      	ldr	r3, [pc, #28]	; (8007990 <prvSwitchTimerLists+0xbc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007978:	4b06      	ldr	r3, [pc, #24]	; (8007994 <prvSwitchTimerLists+0xc0>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a04      	ldr	r2, [pc, #16]	; (8007990 <prvSwitchTimerLists+0xbc>)
 800797e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007980:	4a04      	ldr	r2, [pc, #16]	; (8007994 <prvSwitchTimerLists+0xc0>)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	6013      	str	r3, [r2, #0]
}
 8007986:	bf00      	nop
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	200010cc 	.word	0x200010cc
 8007994:	200010d0 	.word	0x200010d0

08007998 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800799e:	f000 f989 	bl	8007cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <prvCheckForValidListAndQueue+0x60>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d120      	bne.n	80079ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079aa:	4814      	ldr	r0, [pc, #80]	; (80079fc <prvCheckForValidListAndQueue+0x64>)
 80079ac:	f7fd ffa8 	bl	8005900 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079b0:	4813      	ldr	r0, [pc, #76]	; (8007a00 <prvCheckForValidListAndQueue+0x68>)
 80079b2:	f7fd ffa5 	bl	8005900 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079b6:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <prvCheckForValidListAndQueue+0x6c>)
 80079b8:	4a10      	ldr	r2, [pc, #64]	; (80079fc <prvCheckForValidListAndQueue+0x64>)
 80079ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079bc:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <prvCheckForValidListAndQueue+0x70>)
 80079be:	4a10      	ldr	r2, [pc, #64]	; (8007a00 <prvCheckForValidListAndQueue+0x68>)
 80079c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079c2:	2300      	movs	r3, #0
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <prvCheckForValidListAndQueue+0x74>)
 80079c8:	4a11      	ldr	r2, [pc, #68]	; (8007a10 <prvCheckForValidListAndQueue+0x78>)
 80079ca:	2110      	movs	r1, #16
 80079cc:	200a      	movs	r0, #10
 80079ce:	f7fe f8b3 	bl	8005b38 <xQueueGenericCreateStatic>
 80079d2:	4603      	mov	r3, r0
 80079d4:	4a08      	ldr	r2, [pc, #32]	; (80079f8 <prvCheckForValidListAndQueue+0x60>)
 80079d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <prvCheckForValidListAndQueue+0x60>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <prvCheckForValidListAndQueue+0x60>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	490b      	ldr	r1, [pc, #44]	; (8007a14 <prvCheckForValidListAndQueue+0x7c>)
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fcc6 	bl	8006378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079ec:	f000 f992 	bl	8007d14 <vPortExitCritical>
}
 80079f0:	bf00      	nop
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	200010d4 	.word	0x200010d4
 80079fc:	200010a4 	.word	0x200010a4
 8007a00:	200010b8 	.word	0x200010b8
 8007a04:	200010cc 	.word	0x200010cc
 8007a08:	200010d0 	.word	0x200010d0
 8007a0c:	20001180 	.word	0x20001180
 8007a10:	200010e0 	.word	0x200010e0
 8007a14:	0800b614 	.word	0x0800b614

08007a18 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08a      	sub	sp, #40	; 0x28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007a26:	f06f 0301 	mvn.w	r3, #1
 8007a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a38:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <xTimerPendFunctionCallFromISR+0x3c>)
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	f107 0114 	add.w	r1, r7, #20
 8007a40:	2300      	movs	r3, #0
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	f7fe fa10 	bl	8005e68 <xQueueGenericSendFromISR>
 8007a48:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3728      	adds	r7, #40	; 0x28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	200010d4 	.word	0x200010d4

08007a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3b04      	subs	r3, #4
 8007a68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3b04      	subs	r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f023 0201 	bic.w	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3b04      	subs	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a88:	4a0c      	ldr	r2, [pc, #48]	; (8007abc <pxPortInitialiseStack+0x64>)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3b14      	subs	r3, #20
 8007a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f06f 0202 	mvn.w	r2, #2
 8007aa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3b20      	subs	r3, #32
 8007aac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aae:	68fb      	ldr	r3, [r7, #12]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	08007ac1 	.word	0x08007ac1

08007ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <prvTaskExitError+0x54>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d00a      	beq.n	8007aea <prvTaskExitError+0x2a>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	60fb      	str	r3, [r7, #12]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <prvTaskExitError+0x28>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	60bb      	str	r3, [r7, #8]
}
 8007afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007afe:	bf00      	nop
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0fc      	beq.n	8007b00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	20000010 	.word	0x20000010
	...

08007b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <pxCurrentTCBConst2>)
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	6808      	ldr	r0, [r1, #0]
 8007b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	f380 8809 	msr	PSP, r0
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	4770      	bx	lr
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst2>:
 8007b40:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b48:	4808      	ldr	r0, [pc, #32]	; (8007b6c <prvPortStartFirstTask+0x24>)
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f380 8808 	msr	MSP, r0
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8814 	msr	CONTROL, r0
 8007b5a:	b662      	cpsie	i
 8007b5c:	b661      	cpsie	f
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	df00      	svc	0
 8007b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b6a:	bf00      	nop
 8007b6c:	e000ed08 	.word	0xe000ed08

08007b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b76:	4b46      	ldr	r3, [pc, #280]	; (8007c90 <xPortStartScheduler+0x120>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a46      	ldr	r2, [pc, #280]	; (8007c94 <xPortStartScheduler+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10a      	bne.n	8007b96 <xPortStartScheduler+0x26>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	613b      	str	r3, [r7, #16]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b96:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <xPortStartScheduler+0x120>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a3f      	ldr	r2, [pc, #252]	; (8007c98 <xPortStartScheduler+0x128>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d10a      	bne.n	8007bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bb6:	4b39      	ldr	r3, [pc, #228]	; (8007c9c <xPortStartScheduler+0x12c>)
 8007bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	22ff      	movs	r2, #255	; 0xff
 8007bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	4b31      	ldr	r3, [pc, #196]	; (8007ca0 <xPortStartScheduler+0x130>)
 8007bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bde:	4b31      	ldr	r3, [pc, #196]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007be4:	e009      	b.n	8007bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007be6:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	4a2d      	ldr	r2, [pc, #180]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d0ef      	beq.n	8007be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c06:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1c3 0307 	rsb	r3, r3, #7
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d00a      	beq.n	8007c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60bb      	str	r3, [r7, #8]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ca4 <xPortStartScheduler+0x134>)
 8007c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c46:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a14      	ldr	r2, [pc, #80]	; (8007ca8 <xPortStartScheduler+0x138>)
 8007c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c5e:	f000 f8dd 	bl	8007e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c62:	4b12      	ldr	r3, [pc, #72]	; (8007cac <xPortStartScheduler+0x13c>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c68:	f000 f8fc 	bl	8007e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <xPortStartScheduler+0x140>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0f      	ldr	r2, [pc, #60]	; (8007cb0 <xPortStartScheduler+0x140>)
 8007c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c78:	f7ff ff66 	bl	8007b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c7c:	f7fe ffa8 	bl	8006bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8007c80:	f7ff ff1e 	bl	8007ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	e000ed00 	.word	0xe000ed00
 8007c94:	410fc271 	.word	0x410fc271
 8007c98:	410fc270 	.word	0x410fc270
 8007c9c:	e000e400 	.word	0xe000e400
 8007ca0:	200011d0 	.word	0x200011d0
 8007ca4:	200011d4 	.word	0x200011d4
 8007ca8:	e000ed20 	.word	0xe000ed20
 8007cac:	20000010 	.word	0x20000010
 8007cb0:	e000ef34 	.word	0xe000ef34

08007cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	607b      	str	r3, [r7, #4]
}
 8007ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <vPortEnterCritical+0x58>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <vPortEnterCritical+0x58>)
 8007cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <vPortEnterCritical+0x58>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10f      	bne.n	8007d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <vPortEnterCritical+0x5c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	603b      	str	r3, [r7, #0]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vPortEnterCritical+0x4a>
	}
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	20000010 	.word	0x20000010
 8007d10:	e000ed04 	.word	0xe000ed04

08007d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <vPortExitCritical+0x50>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <vPortExitCritical+0x24>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	607b      	str	r3, [r7, #4]
}
 8007d34:	bf00      	nop
 8007d36:	e7fe      	b.n	8007d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <vPortExitCritical+0x50>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <vPortExitCritical+0x50>)
 8007d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d42:	4b08      	ldr	r3, [pc, #32]	; (8007d64 <vPortExitCritical+0x50>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d105      	bne.n	8007d56 <vPortExitCritical+0x42>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	f383 8811 	msr	BASEPRI, r3
}
 8007d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000010 	.word	0x20000010
	...

08007d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d70:	f3ef 8009 	mrs	r0, PSP
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <pxCurrentTCBConst>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f01e 0f10 	tst.w	lr, #16
 8007d80:	bf08      	it	eq
 8007d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	6010      	str	r0, [r2, #0]
 8007d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d94:	f380 8811 	msr	BASEPRI, r0
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f7fe ff16 	bl	8006bd0 <vTaskSwitchContext>
 8007da4:	f04f 0000 	mov.w	r0, #0
 8007da8:	f380 8811 	msr	BASEPRI, r0
 8007dac:	bc09      	pop	{r0, r3}
 8007dae:	6819      	ldr	r1, [r3, #0]
 8007db0:	6808      	ldr	r0, [r1, #0]
 8007db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db6:	f01e 0f10 	tst.w	lr, #16
 8007dba:	bf08      	it	eq
 8007dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007dc0:	f380 8809 	msr	PSP, r0
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	f3af 8000 	nop.w

08007dd0 <pxCurrentTCBConst>:
 8007dd0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop

08007dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007df2:	f7fe fe2f 	bl	8006a54 <xTaskIncrementTick>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dfc:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <xPortSysTickHandler+0x40>)
 8007dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	2300      	movs	r3, #0
 8007e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f383 8811 	msr	BASEPRI, r3
}
 8007e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <vPortSetupTimerInterrupt+0x34>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e26:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <vPortSetupTimerInterrupt+0x38>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <vPortSetupTimerInterrupt+0x3c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a0a      	ldr	r2, [pc, #40]	; (8007e5c <vPortSetupTimerInterrupt+0x40>)
 8007e32:	fba2 2303 	umull	r2, r3, r2, r3
 8007e36:	099b      	lsrs	r3, r3, #6
 8007e38:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <vPortSetupTimerInterrupt+0x44>)
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e3e:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <vPortSetupTimerInterrupt+0x34>)
 8007e40:	2207      	movs	r2, #7
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	e000e010 	.word	0xe000e010
 8007e54:	e000e018 	.word	0xe000e018
 8007e58:	20000004 	.word	0x20000004
 8007e5c:	10624dd3 	.word	0x10624dd3
 8007e60:	e000e014 	.word	0xe000e014

08007e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e74 <vPortEnableVFP+0x10>
 8007e68:	6801      	ldr	r1, [r0, #0]
 8007e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e6e:	6001      	str	r1, [r0, #0]
 8007e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e72:	bf00      	nop
 8007e74:	e000ed88 	.word	0xe000ed88

08007e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e7e:	f3ef 8305 	mrs	r3, IPSR
 8007e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d914      	bls.n	8007eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e8a:	4a17      	ldr	r2, [pc, #92]	; (8007ee8 <vPortValidateInterruptPriority+0x70>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e94:	4b15      	ldr	r3, [pc, #84]	; (8007eec <vPortValidateInterruptPriority+0x74>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	7afa      	ldrb	r2, [r7, #11]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d20a      	bcs.n	8007eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <vPortValidateInterruptPriority+0x78>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <vPortValidateInterruptPriority+0x7c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d90a      	bls.n	8007eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	603b      	str	r3, [r7, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <vPortValidateInterruptPriority+0x60>
	}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	e000e3f0 	.word	0xe000e3f0
 8007eec:	200011d0 	.word	0x200011d0
 8007ef0:	e000ed0c 	.word	0xe000ed0c
 8007ef4:	200011d4 	.word	0x200011d4

08007ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f04:	f7fe fcea 	bl	80068dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f08:	4b58      	ldr	r3, [pc, #352]	; (800806c <pvPortMalloc+0x174>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f10:	f000 f910 	bl	8008134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f14:	4b56      	ldr	r3, [pc, #344]	; (8008070 <pvPortMalloc+0x178>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 808e 	bne.w	800803e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01d      	beq.n	8007f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f28:	2208      	movs	r2, #8
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d014      	beq.n	8007f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f023 0307 	bic.w	r3, r3, #7
 8007f40:	3308      	adds	r3, #8
 8007f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <pvPortMalloc+0x6c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	617b      	str	r3, [r7, #20]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d069      	beq.n	800803e <pvPortMalloc+0x146>
 8007f6a:	4b42      	ldr	r3, [pc, #264]	; (8008074 <pvPortMalloc+0x17c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d864      	bhi.n	800803e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f74:	4b40      	ldr	r3, [pc, #256]	; (8008078 <pvPortMalloc+0x180>)
 8007f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f78:	4b3f      	ldr	r3, [pc, #252]	; (8008078 <pvPortMalloc+0x180>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7e:	e004      	b.n	8007f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d903      	bls.n	8007f9c <pvPortMalloc+0xa4>
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f1      	bne.n	8007f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f9c:	4b33      	ldr	r3, [pc, #204]	; (800806c <pvPortMalloc+0x174>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d04b      	beq.n	800803e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2208      	movs	r2, #8
 8007fac:	4413      	add	r3, r2
 8007fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d91f      	bls.n	8008008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	613b      	str	r3, [r7, #16]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	1ad2      	subs	r2, r2, r3
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008002:	69b8      	ldr	r0, [r7, #24]
 8008004:	f000 f8f8 	bl	80081f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008008:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <pvPortMalloc+0x17c>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a18      	ldr	r2, [pc, #96]	; (8008074 <pvPortMalloc+0x17c>)
 8008014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008016:	4b17      	ldr	r3, [pc, #92]	; (8008074 <pvPortMalloc+0x17c>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b18      	ldr	r3, [pc, #96]	; (800807c <pvPortMalloc+0x184>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d203      	bcs.n	800802a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008022:	4b14      	ldr	r3, [pc, #80]	; (8008074 <pvPortMalloc+0x17c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a15      	ldr	r2, [pc, #84]	; (800807c <pvPortMalloc+0x184>)
 8008028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <pvPortMalloc+0x178>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	431a      	orrs	r2, r3
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800803e:	f7fe fc5b 	bl	80068f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <pvPortMalloc+0x16a>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60fb      	str	r3, [r7, #12]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <pvPortMalloc+0x168>
	return pvReturn;
 8008062:	69fb      	ldr	r3, [r7, #28]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3728      	adds	r7, #40	; 0x28
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20001de0 	.word	0x20001de0
 8008070:	20001dec 	.word	0x20001dec
 8008074:	20001de4 	.word	0x20001de4
 8008078:	20001dd8 	.word	0x20001dd8
 800807c:	20001de8 	.word	0x20001de8

08008080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d048      	beq.n	8008124 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008092:	2308      	movs	r3, #8
 8008094:	425b      	negs	r3, r3
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4413      	add	r3, r2
 800809a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	4b21      	ldr	r3, [pc, #132]	; (800812c <vPortFree+0xac>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <vPortFree+0x44>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <vPortFree+0x62>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60bb      	str	r3, [r7, #8]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b11      	ldr	r3, [pc, #68]	; (800812c <vPortFree+0xac>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d019      	beq.n	8008124 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d115      	bne.n	8008124 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <vPortFree+0xac>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	43db      	mvns	r3, r3
 8008102:	401a      	ands	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008108:	f7fe fbe8 	bl	80068dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <vPortFree+0xb0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a06      	ldr	r2, [pc, #24]	; (8008130 <vPortFree+0xb0>)
 8008118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811a:	6938      	ldr	r0, [r7, #16]
 800811c:	f000 f86c 	bl	80081f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008120:	f7fe fbea 	bl	80068f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008124:	bf00      	nop
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20001dec 	.word	0x20001dec
 8008130:	20001de4 	.word	0x20001de4

08008134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800813a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800813e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008140:	4b27      	ldr	r3, [pc, #156]	; (80081e0 <prvHeapInit+0xac>)
 8008142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00c      	beq.n	8008168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3307      	adds	r3, #7
 8008152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <prvHeapInit+0xac>)
 8008164:	4413      	add	r3, r2
 8008166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800816c:	4a1d      	ldr	r2, [pc, #116]	; (80081e4 <prvHeapInit+0xb0>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008172:	4b1c      	ldr	r3, [pc, #112]	; (80081e4 <prvHeapInit+0xb0>)
 8008174:	2200      	movs	r2, #0
 8008176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4413      	add	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008180:	2208      	movs	r2, #8
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0307 	bic.w	r3, r3, #7
 800818e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <prvHeapInit+0xb4>)
 8008194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <prvHeapInit+0xb4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800819e:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <prvHeapInit+0xb4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <prvHeapInit+0xb4>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <prvHeapInit+0xb8>)
 80081c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <prvHeapInit+0xbc>)
 80081ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081cc:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <prvHeapInit+0xc0>)
 80081ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081d2:	601a      	str	r2, [r3, #0]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	200011d8 	.word	0x200011d8
 80081e4:	20001dd8 	.word	0x20001dd8
 80081e8:	20001de0 	.word	0x20001de0
 80081ec:	20001de8 	.word	0x20001de8
 80081f0:	20001de4 	.word	0x20001de4
 80081f4:	20001dec 	.word	0x20001dec

080081f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008200:	4b28      	ldr	r3, [pc, #160]	; (80082a4 <prvInsertBlockIntoFreeList+0xac>)
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e002      	b.n	800820c <prvInsertBlockIntoFreeList+0x14>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d8f7      	bhi.n	8008206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	4413      	add	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d108      	bne.n	800823a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	441a      	add	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d118      	bne.n	8008280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d00d      	beq.n	8008276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	441a      	add	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	e008      	b.n	8008288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e003      	b.n	8008288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d002      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20001dd8 	.word	0x20001dd8
 80082a8:	20001de0 	.word	0x20001de0

080082ac <atof>:
 80082ac:	2100      	movs	r1, #0
 80082ae:	f000 be13 	b.w	8008ed8 <strtod>

080082b2 <atoi>:
 80082b2:	220a      	movs	r2, #10
 80082b4:	2100      	movs	r1, #0
 80082b6:	f000 be9d 	b.w	8008ff4 <strtol>

080082ba <sulp>:
 80082ba:	b570      	push	{r4, r5, r6, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	ec45 4b10 	vmov	d0, r4, r5
 80082c4:	4616      	mov	r6, r2
 80082c6:	f002 f93b 	bl	800a540 <__ulp>
 80082ca:	ec51 0b10 	vmov	r0, r1, d0
 80082ce:	b17e      	cbz	r6, 80082f0 <sulp+0x36>
 80082d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dd09      	ble.n	80082f0 <sulp+0x36>
 80082dc:	051b      	lsls	r3, r3, #20
 80082de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80082e2:	2400      	movs	r4, #0
 80082e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80082e8:	4622      	mov	r2, r4
 80082ea:	462b      	mov	r3, r5
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	0000      	movs	r0, r0
 80082f4:	0000      	movs	r0, r0
	...

080082f8 <_strtod_l>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	ed2d 8b02 	vpush	{d8}
 8008300:	b09b      	sub	sp, #108	; 0x6c
 8008302:	4604      	mov	r4, r0
 8008304:	9213      	str	r2, [sp, #76]	; 0x4c
 8008306:	2200      	movs	r2, #0
 8008308:	9216      	str	r2, [sp, #88]	; 0x58
 800830a:	460d      	mov	r5, r1
 800830c:	f04f 0800 	mov.w	r8, #0
 8008310:	f04f 0900 	mov.w	r9, #0
 8008314:	460a      	mov	r2, r1
 8008316:	9215      	str	r2, [sp, #84]	; 0x54
 8008318:	7811      	ldrb	r1, [r2, #0]
 800831a:	292b      	cmp	r1, #43	; 0x2b
 800831c:	d04c      	beq.n	80083b8 <_strtod_l+0xc0>
 800831e:	d83a      	bhi.n	8008396 <_strtod_l+0x9e>
 8008320:	290d      	cmp	r1, #13
 8008322:	d834      	bhi.n	800838e <_strtod_l+0x96>
 8008324:	2908      	cmp	r1, #8
 8008326:	d834      	bhi.n	8008392 <_strtod_l+0x9a>
 8008328:	2900      	cmp	r1, #0
 800832a:	d03d      	beq.n	80083a8 <_strtod_l+0xb0>
 800832c:	2200      	movs	r2, #0
 800832e:	920a      	str	r2, [sp, #40]	; 0x28
 8008330:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008332:	7832      	ldrb	r2, [r6, #0]
 8008334:	2a30      	cmp	r2, #48	; 0x30
 8008336:	f040 80b4 	bne.w	80084a2 <_strtod_l+0x1aa>
 800833a:	7872      	ldrb	r2, [r6, #1]
 800833c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008340:	2a58      	cmp	r2, #88	; 0x58
 8008342:	d170      	bne.n	8008426 <_strtod_l+0x12e>
 8008344:	9302      	str	r3, [sp, #8]
 8008346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	ab16      	add	r3, sp, #88	; 0x58
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4a8e      	ldr	r2, [pc, #568]	; (8008588 <_strtod_l+0x290>)
 8008350:	ab17      	add	r3, sp, #92	; 0x5c
 8008352:	a915      	add	r1, sp, #84	; 0x54
 8008354:	4620      	mov	r0, r4
 8008356:	f001 f9d1 	bl	80096fc <__gethex>
 800835a:	f010 070f 	ands.w	r7, r0, #15
 800835e:	4605      	mov	r5, r0
 8008360:	d005      	beq.n	800836e <_strtod_l+0x76>
 8008362:	2f06      	cmp	r7, #6
 8008364:	d12a      	bne.n	80083bc <_strtod_l+0xc4>
 8008366:	3601      	adds	r6, #1
 8008368:	2300      	movs	r3, #0
 800836a:	9615      	str	r6, [sp, #84]	; 0x54
 800836c:	930a      	str	r3, [sp, #40]	; 0x28
 800836e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008370:	2b00      	cmp	r3, #0
 8008372:	f040 857f 	bne.w	8008e74 <_strtod_l+0xb7c>
 8008376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008378:	b1db      	cbz	r3, 80083b2 <_strtod_l+0xba>
 800837a:	4642      	mov	r2, r8
 800837c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008380:	ec43 2b10 	vmov	d0, r2, r3
 8008384:	b01b      	add	sp, #108	; 0x6c
 8008386:	ecbd 8b02 	vpop	{d8}
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	2920      	cmp	r1, #32
 8008390:	d1cc      	bne.n	800832c <_strtod_l+0x34>
 8008392:	3201      	adds	r2, #1
 8008394:	e7bf      	b.n	8008316 <_strtod_l+0x1e>
 8008396:	292d      	cmp	r1, #45	; 0x2d
 8008398:	d1c8      	bne.n	800832c <_strtod_l+0x34>
 800839a:	2101      	movs	r1, #1
 800839c:	910a      	str	r1, [sp, #40]	; 0x28
 800839e:	1c51      	adds	r1, r2, #1
 80083a0:	9115      	str	r1, [sp, #84]	; 0x54
 80083a2:	7852      	ldrb	r2, [r2, #1]
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d1c3      	bne.n	8008330 <_strtod_l+0x38>
 80083a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083aa:	9515      	str	r5, [sp, #84]	; 0x54
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f040 855f 	bne.w	8008e70 <_strtod_l+0xb78>
 80083b2:	4642      	mov	r2, r8
 80083b4:	464b      	mov	r3, r9
 80083b6:	e7e3      	b.n	8008380 <_strtod_l+0x88>
 80083b8:	2100      	movs	r1, #0
 80083ba:	e7ef      	b.n	800839c <_strtod_l+0xa4>
 80083bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083be:	b13a      	cbz	r2, 80083d0 <_strtod_l+0xd8>
 80083c0:	2135      	movs	r1, #53	; 0x35
 80083c2:	a818      	add	r0, sp, #96	; 0x60
 80083c4:	f002 f9b9 	bl	800a73a <__copybits>
 80083c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80083ca:	4620      	mov	r0, r4
 80083cc:	f001 fd8c 	bl	8009ee8 <_Bfree>
 80083d0:	3f01      	subs	r7, #1
 80083d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083d4:	2f04      	cmp	r7, #4
 80083d6:	d806      	bhi.n	80083e6 <_strtod_l+0xee>
 80083d8:	e8df f007 	tbb	[pc, r7]
 80083dc:	201d0314 	.word	0x201d0314
 80083e0:	14          	.byte	0x14
 80083e1:	00          	.byte	0x00
 80083e2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80083e6:	05e9      	lsls	r1, r5, #23
 80083e8:	bf48      	it	mi
 80083ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80083ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083f2:	0d1b      	lsrs	r3, r3, #20
 80083f4:	051b      	lsls	r3, r3, #20
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1b9      	bne.n	800836e <_strtod_l+0x76>
 80083fa:	f001 f869 	bl	80094d0 <__errno>
 80083fe:	2322      	movs	r3, #34	; 0x22
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	e7b4      	b.n	800836e <_strtod_l+0x76>
 8008404:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008408:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800840c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008410:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008414:	e7e7      	b.n	80083e6 <_strtod_l+0xee>
 8008416:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008590 <_strtod_l+0x298>
 800841a:	e7e4      	b.n	80083e6 <_strtod_l+0xee>
 800841c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008420:	f04f 38ff 	mov.w	r8, #4294967295
 8008424:	e7df      	b.n	80083e6 <_strtod_l+0xee>
 8008426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	9215      	str	r2, [sp, #84]	; 0x54
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	2b30      	cmp	r3, #48	; 0x30
 8008430:	d0f9      	beq.n	8008426 <_strtod_l+0x12e>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d09b      	beq.n	800836e <_strtod_l+0x76>
 8008436:	2301      	movs	r3, #1
 8008438:	f04f 0a00 	mov.w	sl, #0
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008440:	930b      	str	r3, [sp, #44]	; 0x2c
 8008442:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008446:	46d3      	mov	fp, sl
 8008448:	220a      	movs	r2, #10
 800844a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800844c:	7806      	ldrb	r6, [r0, #0]
 800844e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008452:	b2d9      	uxtb	r1, r3
 8008454:	2909      	cmp	r1, #9
 8008456:	d926      	bls.n	80084a6 <_strtod_l+0x1ae>
 8008458:	494c      	ldr	r1, [pc, #304]	; (800858c <_strtod_l+0x294>)
 800845a:	2201      	movs	r2, #1
 800845c:	f000 ff1a 	bl	8009294 <strncmp>
 8008460:	2800      	cmp	r0, #0
 8008462:	d030      	beq.n	80084c6 <_strtod_l+0x1ce>
 8008464:	2000      	movs	r0, #0
 8008466:	4632      	mov	r2, r6
 8008468:	9005      	str	r0, [sp, #20]
 800846a:	465e      	mov	r6, fp
 800846c:	4603      	mov	r3, r0
 800846e:	2a65      	cmp	r2, #101	; 0x65
 8008470:	d001      	beq.n	8008476 <_strtod_l+0x17e>
 8008472:	2a45      	cmp	r2, #69	; 0x45
 8008474:	d113      	bne.n	800849e <_strtod_l+0x1a6>
 8008476:	b91e      	cbnz	r6, 8008480 <_strtod_l+0x188>
 8008478:	9a04      	ldr	r2, [sp, #16]
 800847a:	4302      	orrs	r2, r0
 800847c:	d094      	beq.n	80083a8 <_strtod_l+0xb0>
 800847e:	2600      	movs	r6, #0
 8008480:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008482:	1c6a      	adds	r2, r5, #1
 8008484:	9215      	str	r2, [sp, #84]	; 0x54
 8008486:	786a      	ldrb	r2, [r5, #1]
 8008488:	2a2b      	cmp	r2, #43	; 0x2b
 800848a:	d074      	beq.n	8008576 <_strtod_l+0x27e>
 800848c:	2a2d      	cmp	r2, #45	; 0x2d
 800848e:	d078      	beq.n	8008582 <_strtod_l+0x28a>
 8008490:	f04f 0c00 	mov.w	ip, #0
 8008494:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008498:	2909      	cmp	r1, #9
 800849a:	d97f      	bls.n	800859c <_strtod_l+0x2a4>
 800849c:	9515      	str	r5, [sp, #84]	; 0x54
 800849e:	2700      	movs	r7, #0
 80084a0:	e09e      	b.n	80085e0 <_strtod_l+0x2e8>
 80084a2:	2300      	movs	r3, #0
 80084a4:	e7c8      	b.n	8008438 <_strtod_l+0x140>
 80084a6:	f1bb 0f08 	cmp.w	fp, #8
 80084aa:	bfd8      	it	le
 80084ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80084ae:	f100 0001 	add.w	r0, r0, #1
 80084b2:	bfda      	itte	le
 80084b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80084b8:	9309      	strle	r3, [sp, #36]	; 0x24
 80084ba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80084be:	f10b 0b01 	add.w	fp, fp, #1
 80084c2:	9015      	str	r0, [sp, #84]	; 0x54
 80084c4:	e7c1      	b.n	800844a <_strtod_l+0x152>
 80084c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	9215      	str	r2, [sp, #84]	; 0x54
 80084cc:	785a      	ldrb	r2, [r3, #1]
 80084ce:	f1bb 0f00 	cmp.w	fp, #0
 80084d2:	d037      	beq.n	8008544 <_strtod_l+0x24c>
 80084d4:	9005      	str	r0, [sp, #20]
 80084d6:	465e      	mov	r6, fp
 80084d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80084dc:	2b09      	cmp	r3, #9
 80084de:	d912      	bls.n	8008506 <_strtod_l+0x20e>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e7c4      	b.n	800846e <_strtod_l+0x176>
 80084e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	9215      	str	r2, [sp, #84]	; 0x54
 80084ea:	785a      	ldrb	r2, [r3, #1]
 80084ec:	3001      	adds	r0, #1
 80084ee:	2a30      	cmp	r2, #48	; 0x30
 80084f0:	d0f8      	beq.n	80084e4 <_strtod_l+0x1ec>
 80084f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	f200 84c1 	bhi.w	8008e7e <_strtod_l+0xb86>
 80084fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084fe:	9005      	str	r0, [sp, #20]
 8008500:	2000      	movs	r0, #0
 8008502:	930b      	str	r3, [sp, #44]	; 0x2c
 8008504:	4606      	mov	r6, r0
 8008506:	3a30      	subs	r2, #48	; 0x30
 8008508:	f100 0301 	add.w	r3, r0, #1
 800850c:	d014      	beq.n	8008538 <_strtod_l+0x240>
 800850e:	9905      	ldr	r1, [sp, #20]
 8008510:	4419      	add	r1, r3
 8008512:	9105      	str	r1, [sp, #20]
 8008514:	4633      	mov	r3, r6
 8008516:	eb00 0c06 	add.w	ip, r0, r6
 800851a:	210a      	movs	r1, #10
 800851c:	4563      	cmp	r3, ip
 800851e:	d113      	bne.n	8008548 <_strtod_l+0x250>
 8008520:	1833      	adds	r3, r6, r0
 8008522:	2b08      	cmp	r3, #8
 8008524:	f106 0601 	add.w	r6, r6, #1
 8008528:	4406      	add	r6, r0
 800852a:	dc1a      	bgt.n	8008562 <_strtod_l+0x26a>
 800852c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800852e:	230a      	movs	r3, #10
 8008530:	fb03 2301 	mla	r3, r3, r1, r2
 8008534:	9309      	str	r3, [sp, #36]	; 0x24
 8008536:	2300      	movs	r3, #0
 8008538:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800853a:	1c51      	adds	r1, r2, #1
 800853c:	9115      	str	r1, [sp, #84]	; 0x54
 800853e:	7852      	ldrb	r2, [r2, #1]
 8008540:	4618      	mov	r0, r3
 8008542:	e7c9      	b.n	80084d8 <_strtod_l+0x1e0>
 8008544:	4658      	mov	r0, fp
 8008546:	e7d2      	b.n	80084ee <_strtod_l+0x1f6>
 8008548:	2b08      	cmp	r3, #8
 800854a:	f103 0301 	add.w	r3, r3, #1
 800854e:	dc03      	bgt.n	8008558 <_strtod_l+0x260>
 8008550:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008552:	434f      	muls	r7, r1
 8008554:	9709      	str	r7, [sp, #36]	; 0x24
 8008556:	e7e1      	b.n	800851c <_strtod_l+0x224>
 8008558:	2b10      	cmp	r3, #16
 800855a:	bfd8      	it	le
 800855c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008560:	e7dc      	b.n	800851c <_strtod_l+0x224>
 8008562:	2e10      	cmp	r6, #16
 8008564:	bfdc      	itt	le
 8008566:	230a      	movle	r3, #10
 8008568:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800856c:	e7e3      	b.n	8008536 <_strtod_l+0x23e>
 800856e:	2300      	movs	r3, #0
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	2301      	movs	r3, #1
 8008574:	e780      	b.n	8008478 <_strtod_l+0x180>
 8008576:	f04f 0c00 	mov.w	ip, #0
 800857a:	1caa      	adds	r2, r5, #2
 800857c:	9215      	str	r2, [sp, #84]	; 0x54
 800857e:	78aa      	ldrb	r2, [r5, #2]
 8008580:	e788      	b.n	8008494 <_strtod_l+0x19c>
 8008582:	f04f 0c01 	mov.w	ip, #1
 8008586:	e7f8      	b.n	800857a <_strtod_l+0x282>
 8008588:	0800b6bc 	.word	0x0800b6bc
 800858c:	0800b6ac 	.word	0x0800b6ac
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008596:	1c51      	adds	r1, r2, #1
 8008598:	9115      	str	r1, [sp, #84]	; 0x54
 800859a:	7852      	ldrb	r2, [r2, #1]
 800859c:	2a30      	cmp	r2, #48	; 0x30
 800859e:	d0f9      	beq.n	8008594 <_strtod_l+0x29c>
 80085a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80085a4:	2908      	cmp	r1, #8
 80085a6:	f63f af7a 	bhi.w	800849e <_strtod_l+0x1a6>
 80085aa:	3a30      	subs	r2, #48	; 0x30
 80085ac:	9208      	str	r2, [sp, #32]
 80085ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085b0:	920c      	str	r2, [sp, #48]	; 0x30
 80085b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085b4:	1c57      	adds	r7, r2, #1
 80085b6:	9715      	str	r7, [sp, #84]	; 0x54
 80085b8:	7852      	ldrb	r2, [r2, #1]
 80085ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80085be:	f1be 0f09 	cmp.w	lr, #9
 80085c2:	d938      	bls.n	8008636 <_strtod_l+0x33e>
 80085c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085c6:	1a7f      	subs	r7, r7, r1
 80085c8:	2f08      	cmp	r7, #8
 80085ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80085ce:	dc03      	bgt.n	80085d8 <_strtod_l+0x2e0>
 80085d0:	9908      	ldr	r1, [sp, #32]
 80085d2:	428f      	cmp	r7, r1
 80085d4:	bfa8      	it	ge
 80085d6:	460f      	movge	r7, r1
 80085d8:	f1bc 0f00 	cmp.w	ip, #0
 80085dc:	d000      	beq.n	80085e0 <_strtod_l+0x2e8>
 80085de:	427f      	negs	r7, r7
 80085e0:	2e00      	cmp	r6, #0
 80085e2:	d14f      	bne.n	8008684 <_strtod_l+0x38c>
 80085e4:	9904      	ldr	r1, [sp, #16]
 80085e6:	4301      	orrs	r1, r0
 80085e8:	f47f aec1 	bne.w	800836e <_strtod_l+0x76>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f47f aedb 	bne.w	80083a8 <_strtod_l+0xb0>
 80085f2:	2a69      	cmp	r2, #105	; 0x69
 80085f4:	d029      	beq.n	800864a <_strtod_l+0x352>
 80085f6:	dc26      	bgt.n	8008646 <_strtod_l+0x34e>
 80085f8:	2a49      	cmp	r2, #73	; 0x49
 80085fa:	d026      	beq.n	800864a <_strtod_l+0x352>
 80085fc:	2a4e      	cmp	r2, #78	; 0x4e
 80085fe:	f47f aed3 	bne.w	80083a8 <_strtod_l+0xb0>
 8008602:	499b      	ldr	r1, [pc, #620]	; (8008870 <_strtod_l+0x578>)
 8008604:	a815      	add	r0, sp, #84	; 0x54
 8008606:	f001 fab9 	bl	8009b7c <__match>
 800860a:	2800      	cmp	r0, #0
 800860c:	f43f aecc 	beq.w	80083a8 <_strtod_l+0xb0>
 8008610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b28      	cmp	r3, #40	; 0x28
 8008616:	d12f      	bne.n	8008678 <_strtod_l+0x380>
 8008618:	4996      	ldr	r1, [pc, #600]	; (8008874 <_strtod_l+0x57c>)
 800861a:	aa18      	add	r2, sp, #96	; 0x60
 800861c:	a815      	add	r0, sp, #84	; 0x54
 800861e:	f001 fac1 	bl	8009ba4 <__hexnan>
 8008622:	2805      	cmp	r0, #5
 8008624:	d128      	bne.n	8008678 <_strtod_l+0x380>
 8008626:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008628:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800862c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008630:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008634:	e69b      	b.n	800836e <_strtod_l+0x76>
 8008636:	9f08      	ldr	r7, [sp, #32]
 8008638:	210a      	movs	r1, #10
 800863a:	fb01 2107 	mla	r1, r1, r7, r2
 800863e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008642:	9208      	str	r2, [sp, #32]
 8008644:	e7b5      	b.n	80085b2 <_strtod_l+0x2ba>
 8008646:	2a6e      	cmp	r2, #110	; 0x6e
 8008648:	e7d9      	b.n	80085fe <_strtod_l+0x306>
 800864a:	498b      	ldr	r1, [pc, #556]	; (8008878 <_strtod_l+0x580>)
 800864c:	a815      	add	r0, sp, #84	; 0x54
 800864e:	f001 fa95 	bl	8009b7c <__match>
 8008652:	2800      	cmp	r0, #0
 8008654:	f43f aea8 	beq.w	80083a8 <_strtod_l+0xb0>
 8008658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865a:	4988      	ldr	r1, [pc, #544]	; (800887c <_strtod_l+0x584>)
 800865c:	3b01      	subs	r3, #1
 800865e:	a815      	add	r0, sp, #84	; 0x54
 8008660:	9315      	str	r3, [sp, #84]	; 0x54
 8008662:	f001 fa8b 	bl	8009b7c <__match>
 8008666:	b910      	cbnz	r0, 800866e <_strtod_l+0x376>
 8008668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800866a:	3301      	adds	r3, #1
 800866c:	9315      	str	r3, [sp, #84]	; 0x54
 800866e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800888c <_strtod_l+0x594>
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	e67a      	b.n	800836e <_strtod_l+0x76>
 8008678:	4881      	ldr	r0, [pc, #516]	; (8008880 <_strtod_l+0x588>)
 800867a:	f000 ff65 	bl	8009548 <nan>
 800867e:	ec59 8b10 	vmov	r8, r9, d0
 8008682:	e674      	b.n	800836e <_strtod_l+0x76>
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008688:	1afb      	subs	r3, r7, r3
 800868a:	f1bb 0f00 	cmp.w	fp, #0
 800868e:	bf08      	it	eq
 8008690:	46b3      	moveq	fp, r6
 8008692:	2e10      	cmp	r6, #16
 8008694:	9308      	str	r3, [sp, #32]
 8008696:	4635      	mov	r5, r6
 8008698:	bfa8      	it	ge
 800869a:	2510      	movge	r5, #16
 800869c:	f7f7 ff32 	bl	8000504 <__aeabi_ui2d>
 80086a0:	2e09      	cmp	r6, #9
 80086a2:	4680      	mov	r8, r0
 80086a4:	4689      	mov	r9, r1
 80086a6:	dd13      	ble.n	80086d0 <_strtod_l+0x3d8>
 80086a8:	4b76      	ldr	r3, [pc, #472]	; (8008884 <_strtod_l+0x58c>)
 80086aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80086ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80086b2:	f7f7 ffa1 	bl	80005f8 <__aeabi_dmul>
 80086b6:	4680      	mov	r8, r0
 80086b8:	4650      	mov	r0, sl
 80086ba:	4689      	mov	r9, r1
 80086bc:	f7f7 ff22 	bl	8000504 <__aeabi_ui2d>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4640      	mov	r0, r8
 80086c6:	4649      	mov	r1, r9
 80086c8:	f7f7 fde0 	bl	800028c <__adddf3>
 80086cc:	4680      	mov	r8, r0
 80086ce:	4689      	mov	r9, r1
 80086d0:	2e0f      	cmp	r6, #15
 80086d2:	dc38      	bgt.n	8008746 <_strtod_l+0x44e>
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f43f ae49 	beq.w	800836e <_strtod_l+0x76>
 80086dc:	dd24      	ble.n	8008728 <_strtod_l+0x430>
 80086de:	2b16      	cmp	r3, #22
 80086e0:	dc0b      	bgt.n	80086fa <_strtod_l+0x402>
 80086e2:	4968      	ldr	r1, [pc, #416]	; (8008884 <_strtod_l+0x58c>)
 80086e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	f7f7 ff82 	bl	80005f8 <__aeabi_dmul>
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	e639      	b.n	800836e <_strtod_l+0x76>
 80086fa:	9a08      	ldr	r2, [sp, #32]
 80086fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008700:	4293      	cmp	r3, r2
 8008702:	db20      	blt.n	8008746 <_strtod_l+0x44e>
 8008704:	4c5f      	ldr	r4, [pc, #380]	; (8008884 <_strtod_l+0x58c>)
 8008706:	f1c6 060f 	rsb	r6, r6, #15
 800870a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800870e:	4642      	mov	r2, r8
 8008710:	464b      	mov	r3, r9
 8008712:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008716:	f7f7 ff6f 	bl	80005f8 <__aeabi_dmul>
 800871a:	9b08      	ldr	r3, [sp, #32]
 800871c:	1b9e      	subs	r6, r3, r6
 800871e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008722:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008726:	e7e3      	b.n	80086f0 <_strtod_l+0x3f8>
 8008728:	9b08      	ldr	r3, [sp, #32]
 800872a:	3316      	adds	r3, #22
 800872c:	db0b      	blt.n	8008746 <_strtod_l+0x44e>
 800872e:	9b05      	ldr	r3, [sp, #20]
 8008730:	1bdf      	subs	r7, r3, r7
 8008732:	4b54      	ldr	r3, [pc, #336]	; (8008884 <_strtod_l+0x58c>)
 8008734:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800873c:	4640      	mov	r0, r8
 800873e:	4649      	mov	r1, r9
 8008740:	f7f8 f884 	bl	800084c <__aeabi_ddiv>
 8008744:	e7d6      	b.n	80086f4 <_strtod_l+0x3fc>
 8008746:	9b08      	ldr	r3, [sp, #32]
 8008748:	1b75      	subs	r5, r6, r5
 800874a:	441d      	add	r5, r3
 800874c:	2d00      	cmp	r5, #0
 800874e:	dd70      	ble.n	8008832 <_strtod_l+0x53a>
 8008750:	f015 030f 	ands.w	r3, r5, #15
 8008754:	d00a      	beq.n	800876c <_strtod_l+0x474>
 8008756:	494b      	ldr	r1, [pc, #300]	; (8008884 <_strtod_l+0x58c>)
 8008758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800875c:	4642      	mov	r2, r8
 800875e:	464b      	mov	r3, r9
 8008760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008764:	f7f7 ff48 	bl	80005f8 <__aeabi_dmul>
 8008768:	4680      	mov	r8, r0
 800876a:	4689      	mov	r9, r1
 800876c:	f035 050f 	bics.w	r5, r5, #15
 8008770:	d04d      	beq.n	800880e <_strtod_l+0x516>
 8008772:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008776:	dd22      	ble.n	80087be <_strtod_l+0x4c6>
 8008778:	2500      	movs	r5, #0
 800877a:	46ab      	mov	fp, r5
 800877c:	9509      	str	r5, [sp, #36]	; 0x24
 800877e:	9505      	str	r5, [sp, #20]
 8008780:	2322      	movs	r3, #34	; 0x22
 8008782:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800888c <_strtod_l+0x594>
 8008786:	6023      	str	r3, [r4, #0]
 8008788:	f04f 0800 	mov.w	r8, #0
 800878c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	f43f aded 	beq.w	800836e <_strtod_l+0x76>
 8008794:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008796:	4620      	mov	r0, r4
 8008798:	f001 fba6 	bl	8009ee8 <_Bfree>
 800879c:	9905      	ldr	r1, [sp, #20]
 800879e:	4620      	mov	r0, r4
 80087a0:	f001 fba2 	bl	8009ee8 <_Bfree>
 80087a4:	4659      	mov	r1, fp
 80087a6:	4620      	mov	r0, r4
 80087a8:	f001 fb9e 	bl	8009ee8 <_Bfree>
 80087ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ae:	4620      	mov	r0, r4
 80087b0:	f001 fb9a 	bl	8009ee8 <_Bfree>
 80087b4:	4629      	mov	r1, r5
 80087b6:	4620      	mov	r0, r4
 80087b8:	f001 fb96 	bl	8009ee8 <_Bfree>
 80087bc:	e5d7      	b.n	800836e <_strtod_l+0x76>
 80087be:	4b32      	ldr	r3, [pc, #200]	; (8008888 <_strtod_l+0x590>)
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	2300      	movs	r3, #0
 80087c4:	112d      	asrs	r5, r5, #4
 80087c6:	4640      	mov	r0, r8
 80087c8:	4649      	mov	r1, r9
 80087ca:	469a      	mov	sl, r3
 80087cc:	2d01      	cmp	r5, #1
 80087ce:	dc21      	bgt.n	8008814 <_strtod_l+0x51c>
 80087d0:	b10b      	cbz	r3, 80087d6 <_strtod_l+0x4de>
 80087d2:	4680      	mov	r8, r0
 80087d4:	4689      	mov	r9, r1
 80087d6:	492c      	ldr	r1, [pc, #176]	; (8008888 <_strtod_l+0x590>)
 80087d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80087dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087e8:	f7f7 ff06 	bl	80005f8 <__aeabi_dmul>
 80087ec:	4b27      	ldr	r3, [pc, #156]	; (800888c <_strtod_l+0x594>)
 80087ee:	460a      	mov	r2, r1
 80087f0:	400b      	ands	r3, r1
 80087f2:	4927      	ldr	r1, [pc, #156]	; (8008890 <_strtod_l+0x598>)
 80087f4:	428b      	cmp	r3, r1
 80087f6:	4680      	mov	r8, r0
 80087f8:	d8be      	bhi.n	8008778 <_strtod_l+0x480>
 80087fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80087fe:	428b      	cmp	r3, r1
 8008800:	bf86      	itte	hi
 8008802:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008894 <_strtod_l+0x59c>
 8008806:	f04f 38ff 	movhi.w	r8, #4294967295
 800880a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800880e:	2300      	movs	r3, #0
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	e07b      	b.n	800890c <_strtod_l+0x614>
 8008814:	07ea      	lsls	r2, r5, #31
 8008816:	d505      	bpl.n	8008824 <_strtod_l+0x52c>
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 feeb 	bl	80005f8 <__aeabi_dmul>
 8008822:	2301      	movs	r3, #1
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	3208      	adds	r2, #8
 8008828:	f10a 0a01 	add.w	sl, sl, #1
 800882c:	106d      	asrs	r5, r5, #1
 800882e:	9204      	str	r2, [sp, #16]
 8008830:	e7cc      	b.n	80087cc <_strtod_l+0x4d4>
 8008832:	d0ec      	beq.n	800880e <_strtod_l+0x516>
 8008834:	426d      	negs	r5, r5
 8008836:	f015 020f 	ands.w	r2, r5, #15
 800883a:	d00a      	beq.n	8008852 <_strtod_l+0x55a>
 800883c:	4b11      	ldr	r3, [pc, #68]	; (8008884 <_strtod_l+0x58c>)
 800883e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	f7f7 ffff 	bl	800084c <__aeabi_ddiv>
 800884e:	4680      	mov	r8, r0
 8008850:	4689      	mov	r9, r1
 8008852:	112d      	asrs	r5, r5, #4
 8008854:	d0db      	beq.n	800880e <_strtod_l+0x516>
 8008856:	2d1f      	cmp	r5, #31
 8008858:	dd1e      	ble.n	8008898 <_strtod_l+0x5a0>
 800885a:	2500      	movs	r5, #0
 800885c:	46ab      	mov	fp, r5
 800885e:	9509      	str	r5, [sp, #36]	; 0x24
 8008860:	9505      	str	r5, [sp, #20]
 8008862:	2322      	movs	r3, #34	; 0x22
 8008864:	f04f 0800 	mov.w	r8, #0
 8008868:	f04f 0900 	mov.w	r9, #0
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	e78d      	b.n	800878c <_strtod_l+0x494>
 8008870:	0800b6b7 	.word	0x0800b6b7
 8008874:	0800b6d0 	.word	0x0800b6d0
 8008878:	0800b6ae 	.word	0x0800b6ae
 800887c:	0800b6b1 	.word	0x0800b6b1
 8008880:	0800b8c5 	.word	0x0800b8c5
 8008884:	0800b9b8 	.word	0x0800b9b8
 8008888:	0800b990 	.word	0x0800b990
 800888c:	7ff00000 	.word	0x7ff00000
 8008890:	7ca00000 	.word	0x7ca00000
 8008894:	7fefffff 	.word	0x7fefffff
 8008898:	f015 0310 	ands.w	r3, r5, #16
 800889c:	bf18      	it	ne
 800889e:	236a      	movne	r3, #106	; 0x6a
 80088a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008c44 <_strtod_l+0x94c>
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	2300      	movs	r3, #0
 80088ac:	07ea      	lsls	r2, r5, #31
 80088ae:	d504      	bpl.n	80088ba <_strtod_l+0x5c2>
 80088b0:	e9da 2300 	ldrd	r2, r3, [sl]
 80088b4:	f7f7 fea0 	bl	80005f8 <__aeabi_dmul>
 80088b8:	2301      	movs	r3, #1
 80088ba:	106d      	asrs	r5, r5, #1
 80088bc:	f10a 0a08 	add.w	sl, sl, #8
 80088c0:	d1f4      	bne.n	80088ac <_strtod_l+0x5b4>
 80088c2:	b10b      	cbz	r3, 80088c8 <_strtod_l+0x5d0>
 80088c4:	4680      	mov	r8, r0
 80088c6:	4689      	mov	r9, r1
 80088c8:	9b04      	ldr	r3, [sp, #16]
 80088ca:	b1bb      	cbz	r3, 80088fc <_strtod_l+0x604>
 80088cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80088d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	4649      	mov	r1, r9
 80088d8:	dd10      	ble.n	80088fc <_strtod_l+0x604>
 80088da:	2b1f      	cmp	r3, #31
 80088dc:	f340 811e 	ble.w	8008b1c <_strtod_l+0x824>
 80088e0:	2b34      	cmp	r3, #52	; 0x34
 80088e2:	bfde      	ittt	le
 80088e4:	f04f 33ff 	movle.w	r3, #4294967295
 80088e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80088ec:	4093      	lslle	r3, r2
 80088ee:	f04f 0800 	mov.w	r8, #0
 80088f2:	bfcc      	ite	gt
 80088f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80088f8:	ea03 0901 	andle.w	r9, r3, r1
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	f7f8 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008908:	2800      	cmp	r0, #0
 800890a:	d1a6      	bne.n	800885a <_strtod_l+0x562>
 800890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008912:	4633      	mov	r3, r6
 8008914:	465a      	mov	r2, fp
 8008916:	4620      	mov	r0, r4
 8008918:	f001 fb4e 	bl	8009fb8 <__s2b>
 800891c:	9009      	str	r0, [sp, #36]	; 0x24
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f af2a 	beq.w	8008778 <_strtod_l+0x480>
 8008924:	9a08      	ldr	r2, [sp, #32]
 8008926:	9b05      	ldr	r3, [sp, #20]
 8008928:	2a00      	cmp	r2, #0
 800892a:	eba3 0307 	sub.w	r3, r3, r7
 800892e:	bfa8      	it	ge
 8008930:	2300      	movge	r3, #0
 8008932:	930c      	str	r3, [sp, #48]	; 0x30
 8008934:	2500      	movs	r5, #0
 8008936:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800893a:	9312      	str	r3, [sp, #72]	; 0x48
 800893c:	46ab      	mov	fp, r5
 800893e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008940:	4620      	mov	r0, r4
 8008942:	6859      	ldr	r1, [r3, #4]
 8008944:	f001 fa90 	bl	8009e68 <_Balloc>
 8008948:	9005      	str	r0, [sp, #20]
 800894a:	2800      	cmp	r0, #0
 800894c:	f43f af18 	beq.w	8008780 <_strtod_l+0x488>
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	3202      	adds	r2, #2
 8008956:	f103 010c 	add.w	r1, r3, #12
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	300c      	adds	r0, #12
 800895e:	f000 fde4 	bl	800952a <memcpy>
 8008962:	ec49 8b10 	vmov	d0, r8, r9
 8008966:	aa18      	add	r2, sp, #96	; 0x60
 8008968:	a917      	add	r1, sp, #92	; 0x5c
 800896a:	4620      	mov	r0, r4
 800896c:	f001 fe58 	bl	800a620 <__d2b>
 8008970:	ec49 8b18 	vmov	d8, r8, r9
 8008974:	9016      	str	r0, [sp, #88]	; 0x58
 8008976:	2800      	cmp	r0, #0
 8008978:	f43f af02 	beq.w	8008780 <_strtod_l+0x488>
 800897c:	2101      	movs	r1, #1
 800897e:	4620      	mov	r0, r4
 8008980:	f001 fbb2 	bl	800a0e8 <__i2b>
 8008984:	4683      	mov	fp, r0
 8008986:	2800      	cmp	r0, #0
 8008988:	f43f aefa 	beq.w	8008780 <_strtod_l+0x488>
 800898c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800898e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008990:	2e00      	cmp	r6, #0
 8008992:	bfab      	itete	ge
 8008994:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008996:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008998:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800899a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800899e:	bfac      	ite	ge
 80089a0:	eb06 0a03 	addge.w	sl, r6, r3
 80089a4:	1b9f      	sublt	r7, r3, r6
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	1af6      	subs	r6, r6, r3
 80089aa:	4416      	add	r6, r2
 80089ac:	4ba0      	ldr	r3, [pc, #640]	; (8008c30 <_strtod_l+0x938>)
 80089ae:	3e01      	subs	r6, #1
 80089b0:	429e      	cmp	r6, r3
 80089b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089b6:	f280 80c4 	bge.w	8008b42 <_strtod_l+0x84a>
 80089ba:	1b9b      	subs	r3, r3, r6
 80089bc:	2b1f      	cmp	r3, #31
 80089be:	eba2 0203 	sub.w	r2, r2, r3
 80089c2:	f04f 0101 	mov.w	r1, #1
 80089c6:	f300 80b0 	bgt.w	8008b2a <_strtod_l+0x832>
 80089ca:	fa01 f303 	lsl.w	r3, r1, r3
 80089ce:	930e      	str	r3, [sp, #56]	; 0x38
 80089d0:	2300      	movs	r3, #0
 80089d2:	930d      	str	r3, [sp, #52]	; 0x34
 80089d4:	eb0a 0602 	add.w	r6, sl, r2
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	45b2      	cmp	sl, r6
 80089dc:	4417      	add	r7, r2
 80089de:	441f      	add	r7, r3
 80089e0:	4653      	mov	r3, sl
 80089e2:	bfa8      	it	ge
 80089e4:	4633      	movge	r3, r6
 80089e6:	42bb      	cmp	r3, r7
 80089e8:	bfa8      	it	ge
 80089ea:	463b      	movge	r3, r7
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfc2      	ittt	gt
 80089f0:	1af6      	subgt	r6, r6, r3
 80089f2:	1aff      	subgt	r7, r7, r3
 80089f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80089f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd17      	ble.n	8008a2e <_strtod_l+0x736>
 80089fe:	4659      	mov	r1, fp
 8008a00:	461a      	mov	r2, r3
 8008a02:	4620      	mov	r0, r4
 8008a04:	f001 fc30 	bl	800a268 <__pow5mult>
 8008a08:	4683      	mov	fp, r0
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	f43f aeb8 	beq.w	8008780 <_strtod_l+0x488>
 8008a10:	4601      	mov	r1, r0
 8008a12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a14:	4620      	mov	r0, r4
 8008a16:	f001 fb7d 	bl	800a114 <__multiply>
 8008a1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f43f aeaf 	beq.w	8008780 <_strtod_l+0x488>
 8008a22:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a24:	4620      	mov	r0, r4
 8008a26:	f001 fa5f 	bl	8009ee8 <_Bfree>
 8008a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a2c:	9316      	str	r3, [sp, #88]	; 0x58
 8008a2e:	2e00      	cmp	r6, #0
 8008a30:	f300 808c 	bgt.w	8008b4c <_strtod_l+0x854>
 8008a34:	9b08      	ldr	r3, [sp, #32]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dd08      	ble.n	8008a4c <_strtod_l+0x754>
 8008a3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a3c:	9905      	ldr	r1, [sp, #20]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f001 fc12 	bl	800a268 <__pow5mult>
 8008a44:	9005      	str	r0, [sp, #20]
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f ae9a 	beq.w	8008780 <_strtod_l+0x488>
 8008a4c:	2f00      	cmp	r7, #0
 8008a4e:	dd08      	ble.n	8008a62 <_strtod_l+0x76a>
 8008a50:	9905      	ldr	r1, [sp, #20]
 8008a52:	463a      	mov	r2, r7
 8008a54:	4620      	mov	r0, r4
 8008a56:	f001 fc61 	bl	800a31c <__lshift>
 8008a5a:	9005      	str	r0, [sp, #20]
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f43f ae8f 	beq.w	8008780 <_strtod_l+0x488>
 8008a62:	f1ba 0f00 	cmp.w	sl, #0
 8008a66:	dd08      	ble.n	8008a7a <_strtod_l+0x782>
 8008a68:	4659      	mov	r1, fp
 8008a6a:	4652      	mov	r2, sl
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f001 fc55 	bl	800a31c <__lshift>
 8008a72:	4683      	mov	fp, r0
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f43f ae83 	beq.w	8008780 <_strtod_l+0x488>
 8008a7a:	9a05      	ldr	r2, [sp, #20]
 8008a7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f001 fcd4 	bl	800a42c <__mdiff>
 8008a84:	4605      	mov	r5, r0
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f43f ae7a 	beq.w	8008780 <_strtod_l+0x488>
 8008a8c:	68c3      	ldr	r3, [r0, #12]
 8008a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a90:	2300      	movs	r3, #0
 8008a92:	60c3      	str	r3, [r0, #12]
 8008a94:	4659      	mov	r1, fp
 8008a96:	f001 fcad 	bl	800a3f4 <__mcmp>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	da60      	bge.n	8008b60 <_strtod_l+0x868>
 8008a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa0:	ea53 0308 	orrs.w	r3, r3, r8
 8008aa4:	f040 8084 	bne.w	8008bb0 <_strtod_l+0x8b8>
 8008aa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d17f      	bne.n	8008bb0 <_strtod_l+0x8b8>
 8008ab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ab4:	0d1b      	lsrs	r3, r3, #20
 8008ab6:	051b      	lsls	r3, r3, #20
 8008ab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008abc:	d978      	bls.n	8008bb0 <_strtod_l+0x8b8>
 8008abe:	696b      	ldr	r3, [r5, #20]
 8008ac0:	b913      	cbnz	r3, 8008ac8 <_strtod_l+0x7d0>
 8008ac2:	692b      	ldr	r3, [r5, #16]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	dd73      	ble.n	8008bb0 <_strtod_l+0x8b8>
 8008ac8:	4629      	mov	r1, r5
 8008aca:	2201      	movs	r2, #1
 8008acc:	4620      	mov	r0, r4
 8008ace:	f001 fc25 	bl	800a31c <__lshift>
 8008ad2:	4659      	mov	r1, fp
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	f001 fc8d 	bl	800a3f4 <__mcmp>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	dd68      	ble.n	8008bb0 <_strtod_l+0x8b8>
 8008ade:	9904      	ldr	r1, [sp, #16]
 8008ae0:	4a54      	ldr	r2, [pc, #336]	; (8008c34 <_strtod_l+0x93c>)
 8008ae2:	464b      	mov	r3, r9
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	f000 8084 	beq.w	8008bf2 <_strtod_l+0x8fa>
 8008aea:	ea02 0109 	and.w	r1, r2, r9
 8008aee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008af2:	dc7e      	bgt.n	8008bf2 <_strtod_l+0x8fa>
 8008af4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008af8:	f77f aeb3 	ble.w	8008862 <_strtod_l+0x56a>
 8008afc:	4b4e      	ldr	r3, [pc, #312]	; (8008c38 <_strtod_l+0x940>)
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	2200      	movs	r2, #0
 8008b04:	f7f7 fd78 	bl	80005f8 <__aeabi_dmul>
 8008b08:	4b4a      	ldr	r3, [pc, #296]	; (8008c34 <_strtod_l+0x93c>)
 8008b0a:	400b      	ands	r3, r1
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	4689      	mov	r9, r1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f47f ae3f 	bne.w	8008794 <_strtod_l+0x49c>
 8008b16:	2322      	movs	r3, #34	; 0x22
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	e63b      	b.n	8008794 <_strtod_l+0x49c>
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	ea03 0808 	and.w	r8, r3, r8
 8008b28:	e6e8      	b.n	80088fc <_strtod_l+0x604>
 8008b2a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008b2e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008b32:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008b36:	36e2      	adds	r6, #226	; 0xe2
 8008b38:	fa01 f306 	lsl.w	r3, r1, r6
 8008b3c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008b40:	e748      	b.n	80089d4 <_strtod_l+0x6dc>
 8008b42:	2100      	movs	r1, #0
 8008b44:	2301      	movs	r3, #1
 8008b46:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008b4a:	e743      	b.n	80089d4 <_strtod_l+0x6dc>
 8008b4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b4e:	4632      	mov	r2, r6
 8008b50:	4620      	mov	r0, r4
 8008b52:	f001 fbe3 	bl	800a31c <__lshift>
 8008b56:	9016      	str	r0, [sp, #88]	; 0x58
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f47f af6b 	bne.w	8008a34 <_strtod_l+0x73c>
 8008b5e:	e60f      	b.n	8008780 <_strtod_l+0x488>
 8008b60:	46ca      	mov	sl, r9
 8008b62:	d171      	bne.n	8008c48 <_strtod_l+0x950>
 8008b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b6a:	b352      	cbz	r2, 8008bc2 <_strtod_l+0x8ca>
 8008b6c:	4a33      	ldr	r2, [pc, #204]	; (8008c3c <_strtod_l+0x944>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d12a      	bne.n	8008bc8 <_strtod_l+0x8d0>
 8008b72:	9b04      	ldr	r3, [sp, #16]
 8008b74:	4641      	mov	r1, r8
 8008b76:	b1fb      	cbz	r3, 8008bb8 <_strtod_l+0x8c0>
 8008b78:	4b2e      	ldr	r3, [pc, #184]	; (8008c34 <_strtod_l+0x93c>)
 8008b7a:	ea09 0303 	and.w	r3, r9, r3
 8008b7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	d81a      	bhi.n	8008bbe <_strtod_l+0x8c6>
 8008b88:	0d1b      	lsrs	r3, r3, #20
 8008b8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b92:	4299      	cmp	r1, r3
 8008b94:	d118      	bne.n	8008bc8 <_strtod_l+0x8d0>
 8008b96:	4b2a      	ldr	r3, [pc, #168]	; (8008c40 <_strtod_l+0x948>)
 8008b98:	459a      	cmp	sl, r3
 8008b9a:	d102      	bne.n	8008ba2 <_strtod_l+0x8aa>
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	f43f adef 	beq.w	8008780 <_strtod_l+0x488>
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <_strtod_l+0x93c>)
 8008ba4:	ea0a 0303 	and.w	r3, sl, r3
 8008ba8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008bac:	f04f 0800 	mov.w	r8, #0
 8008bb0:	9b04      	ldr	r3, [sp, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1a2      	bne.n	8008afc <_strtod_l+0x804>
 8008bb6:	e5ed      	b.n	8008794 <_strtod_l+0x49c>
 8008bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbc:	e7e9      	b.n	8008b92 <_strtod_l+0x89a>
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	e7e7      	b.n	8008b92 <_strtod_l+0x89a>
 8008bc2:	ea53 0308 	orrs.w	r3, r3, r8
 8008bc6:	d08a      	beq.n	8008ade <_strtod_l+0x7e6>
 8008bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bca:	b1e3      	cbz	r3, 8008c06 <_strtod_l+0x90e>
 8008bcc:	ea13 0f0a 	tst.w	r3, sl
 8008bd0:	d0ee      	beq.n	8008bb0 <_strtod_l+0x8b8>
 8008bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd4:	9a04      	ldr	r2, [sp, #16]
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	b1c3      	cbz	r3, 8008c0e <_strtod_l+0x916>
 8008bdc:	f7ff fb6d 	bl	80082ba <sulp>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	ec51 0b18 	vmov	r0, r1, d8
 8008be8:	f7f7 fb50 	bl	800028c <__adddf3>
 8008bec:	4680      	mov	r8, r0
 8008bee:	4689      	mov	r9, r1
 8008bf0:	e7de      	b.n	8008bb0 <_strtod_l+0x8b8>
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008bf8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008bfc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c00:	f04f 38ff 	mov.w	r8, #4294967295
 8008c04:	e7d4      	b.n	8008bb0 <_strtod_l+0x8b8>
 8008c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c08:	ea13 0f08 	tst.w	r3, r8
 8008c0c:	e7e0      	b.n	8008bd0 <_strtod_l+0x8d8>
 8008c0e:	f7ff fb54 	bl	80082ba <sulp>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	ec51 0b18 	vmov	r0, r1, d8
 8008c1a:	f7f7 fb35 	bl	8000288 <__aeabi_dsub>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2300      	movs	r3, #0
 8008c22:	4680      	mov	r8, r0
 8008c24:	4689      	mov	r9, r1
 8008c26:	f7f7 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d0c0      	beq.n	8008bb0 <_strtod_l+0x8b8>
 8008c2e:	e618      	b.n	8008862 <_strtod_l+0x56a>
 8008c30:	fffffc02 	.word	0xfffffc02
 8008c34:	7ff00000 	.word	0x7ff00000
 8008c38:	39500000 	.word	0x39500000
 8008c3c:	000fffff 	.word	0x000fffff
 8008c40:	7fefffff 	.word	0x7fefffff
 8008c44:	0800b6e8 	.word	0x0800b6e8
 8008c48:	4659      	mov	r1, fp
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f001 fd42 	bl	800a6d4 <__ratio>
 8008c50:	ec57 6b10 	vmov	r6, r7, d0
 8008c54:	ee10 0a10 	vmov	r0, s0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 ff46 	bl	8000af0 <__aeabi_dcmple>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d071      	beq.n	8008d4c <_strtod_l+0xa54>
 8008c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d17c      	bne.n	8008d68 <_strtod_l+0xa70>
 8008c6e:	f1b8 0f00 	cmp.w	r8, #0
 8008c72:	d15a      	bne.n	8008d2a <_strtod_l+0xa32>
 8008c74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d15d      	bne.n	8008d38 <_strtod_l+0xa40>
 8008c7c:	4b90      	ldr	r3, [pc, #576]	; (8008ec0 <_strtod_l+0xbc8>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 ff2a 	bl	8000adc <__aeabi_dcmplt>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d15c      	bne.n	8008d46 <_strtod_l+0xa4e>
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	4639      	mov	r1, r7
 8008c90:	4b8c      	ldr	r3, [pc, #560]	; (8008ec4 <_strtod_l+0xbcc>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	f7f7 fcb0 	bl	80005f8 <__aeabi_dmul>
 8008c98:	4606      	mov	r6, r0
 8008c9a:	460f      	mov	r7, r1
 8008c9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008ca0:	9606      	str	r6, [sp, #24]
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ca8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008cac:	4b86      	ldr	r3, [pc, #536]	; (8008ec8 <_strtod_l+0xbd0>)
 8008cae:	ea0a 0303 	and.w	r3, sl, r3
 8008cb2:	930d      	str	r3, [sp, #52]	; 0x34
 8008cb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cb6:	4b85      	ldr	r3, [pc, #532]	; (8008ecc <_strtod_l+0xbd4>)
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	f040 8090 	bne.w	8008dde <_strtod_l+0xae6>
 8008cbe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008cc2:	ec49 8b10 	vmov	d0, r8, r9
 8008cc6:	f001 fc3b 	bl	800a540 <__ulp>
 8008cca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cce:	ec51 0b10 	vmov	r0, r1, d0
 8008cd2:	f7f7 fc91 	bl	80005f8 <__aeabi_dmul>
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	464b      	mov	r3, r9
 8008cda:	f7f7 fad7 	bl	800028c <__adddf3>
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4979      	ldr	r1, [pc, #484]	; (8008ec8 <_strtod_l+0xbd0>)
 8008ce2:	4a7b      	ldr	r2, [pc, #492]	; (8008ed0 <_strtod_l+0xbd8>)
 8008ce4:	4019      	ands	r1, r3
 8008ce6:	4291      	cmp	r1, r2
 8008ce8:	4680      	mov	r8, r0
 8008cea:	d944      	bls.n	8008d76 <_strtod_l+0xa7e>
 8008cec:	ee18 2a90 	vmov	r2, s17
 8008cf0:	4b78      	ldr	r3, [pc, #480]	; (8008ed4 <_strtod_l+0xbdc>)
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d104      	bne.n	8008d00 <_strtod_l+0xa08>
 8008cf6:	ee18 3a10 	vmov	r3, s16
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f43f ad40 	beq.w	8008780 <_strtod_l+0x488>
 8008d00:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008ed4 <_strtod_l+0xbdc>
 8008d04:	f04f 38ff 	mov.w	r8, #4294967295
 8008d08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f001 f8ec 	bl	8009ee8 <_Bfree>
 8008d10:	9905      	ldr	r1, [sp, #20]
 8008d12:	4620      	mov	r0, r4
 8008d14:	f001 f8e8 	bl	8009ee8 <_Bfree>
 8008d18:	4659      	mov	r1, fp
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f001 f8e4 	bl	8009ee8 <_Bfree>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4620      	mov	r0, r4
 8008d24:	f001 f8e0 	bl	8009ee8 <_Bfree>
 8008d28:	e609      	b.n	800893e <_strtod_l+0x646>
 8008d2a:	f1b8 0f01 	cmp.w	r8, #1
 8008d2e:	d103      	bne.n	8008d38 <_strtod_l+0xa40>
 8008d30:	f1b9 0f00 	cmp.w	r9, #0
 8008d34:	f43f ad95 	beq.w	8008862 <_strtod_l+0x56a>
 8008d38:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008e90 <_strtod_l+0xb98>
 8008d3c:	4f60      	ldr	r7, [pc, #384]	; (8008ec0 <_strtod_l+0xbc8>)
 8008d3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d42:	2600      	movs	r6, #0
 8008d44:	e7ae      	b.n	8008ca4 <_strtod_l+0x9ac>
 8008d46:	4f5f      	ldr	r7, [pc, #380]	; (8008ec4 <_strtod_l+0xbcc>)
 8008d48:	2600      	movs	r6, #0
 8008d4a:	e7a7      	b.n	8008c9c <_strtod_l+0x9a4>
 8008d4c:	4b5d      	ldr	r3, [pc, #372]	; (8008ec4 <_strtod_l+0xbcc>)
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	2200      	movs	r2, #0
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d09c      	beq.n	8008c9c <_strtod_l+0x9a4>
 8008d62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d66:	e79d      	b.n	8008ca4 <_strtod_l+0x9ac>
 8008d68:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008e98 <_strtod_l+0xba0>
 8008d6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d70:	ec57 6b17 	vmov	r6, r7, d7
 8008d74:	e796      	b.n	8008ca4 <_strtod_l+0x9ac>
 8008d76:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	46ca      	mov	sl, r9
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1c2      	bne.n	8008d08 <_strtod_l+0xa10>
 8008d82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d88:	0d1b      	lsrs	r3, r3, #20
 8008d8a:	051b      	lsls	r3, r3, #20
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d1bb      	bne.n	8008d08 <_strtod_l+0xa10>
 8008d90:	4630      	mov	r0, r6
 8008d92:	4639      	mov	r1, r7
 8008d94:	f7f7 ff62 	bl	8000c5c <__aeabi_d2lz>
 8008d98:	f7f7 fc00 	bl	800059c <__aeabi_l2d>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fa70 	bl	8000288 <__aeabi_dsub>
 8008da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008daa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dae:	ea43 0308 	orr.w	r3, r3, r8
 8008db2:	4313      	orrs	r3, r2
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	d054      	beq.n	8008e64 <_strtod_l+0xb6c>
 8008dba:	a339      	add	r3, pc, #228	; (adr r3, 8008ea0 <_strtod_l+0xba8>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	f7f7 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f47f ace5 	bne.w	8008794 <_strtod_l+0x49c>
 8008dca:	a337      	add	r3, pc, #220	; (adr r3, 8008ea8 <_strtod_l+0xbb0>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fea0 	bl	8000b18 <__aeabi_dcmpgt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d095      	beq.n	8008d08 <_strtod_l+0xa10>
 8008ddc:	e4da      	b.n	8008794 <_strtod_l+0x49c>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	b333      	cbz	r3, 8008e30 <_strtod_l+0xb38>
 8008de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008de4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008de8:	d822      	bhi.n	8008e30 <_strtod_l+0xb38>
 8008dea:	a331      	add	r3, pc, #196	; (adr r3, 8008eb0 <_strtod_l+0xbb8>)
 8008dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fe7c 	bl	8000af0 <__aeabi_dcmple>
 8008df8:	b1a0      	cbz	r0, 8008e24 <_strtod_l+0xb2c>
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7f7 febd 	bl	8000b7c <__aeabi_d2uiz>
 8008e02:	2801      	cmp	r0, #1
 8008e04:	bf38      	it	cc
 8008e06:	2001      	movcc	r0, #1
 8008e08:	f7f7 fb7c 	bl	8000504 <__aeabi_ui2d>
 8008e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	bb23      	cbnz	r3, 8008e5e <_strtod_l+0xb66>
 8008e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e18:	9010      	str	r0, [sp, #64]	; 0x40
 8008e1a:	9311      	str	r3, [sp, #68]	; 0x44
 8008e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e34:	eeb0 0a48 	vmov.f32	s0, s16
 8008e38:	eef0 0a68 	vmov.f32	s1, s17
 8008e3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008e40:	f001 fb7e 	bl	800a540 <__ulp>
 8008e44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e48:	ec53 2b10 	vmov	r2, r3, d0
 8008e4c:	f7f7 fbd4 	bl	80005f8 <__aeabi_dmul>
 8008e50:	ec53 2b18 	vmov	r2, r3, d8
 8008e54:	f7f7 fa1a 	bl	800028c <__adddf3>
 8008e58:	4680      	mov	r8, r0
 8008e5a:	4689      	mov	r9, r1
 8008e5c:	e78d      	b.n	8008d7a <_strtod_l+0xa82>
 8008e5e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008e62:	e7db      	b.n	8008e1c <_strtod_l+0xb24>
 8008e64:	a314      	add	r3, pc, #80	; (adr r3, 8008eb8 <_strtod_l+0xbc0>)
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f7f7 fe37 	bl	8000adc <__aeabi_dcmplt>
 8008e6e:	e7b3      	b.n	8008dd8 <_strtod_l+0xae0>
 8008e70:	2300      	movs	r3, #0
 8008e72:	930a      	str	r3, [sp, #40]	; 0x28
 8008e74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	f7ff ba7c 	b.w	8008376 <_strtod_l+0x7e>
 8008e7e:	2a65      	cmp	r2, #101	; 0x65
 8008e80:	f43f ab75 	beq.w	800856e <_strtod_l+0x276>
 8008e84:	2a45      	cmp	r2, #69	; 0x45
 8008e86:	f43f ab72 	beq.w	800856e <_strtod_l+0x276>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	f7ff bbaa 	b.w	80085e4 <_strtod_l+0x2ec>
 8008e90:	00000000 	.word	0x00000000
 8008e94:	bff00000 	.word	0xbff00000
 8008e98:	00000000 	.word	0x00000000
 8008e9c:	3ff00000 	.word	0x3ff00000
 8008ea0:	94a03595 	.word	0x94a03595
 8008ea4:	3fdfffff 	.word	0x3fdfffff
 8008ea8:	35afe535 	.word	0x35afe535
 8008eac:	3fe00000 	.word	0x3fe00000
 8008eb0:	ffc00000 	.word	0xffc00000
 8008eb4:	41dfffff 	.word	0x41dfffff
 8008eb8:	94a03595 	.word	0x94a03595
 8008ebc:	3fcfffff 	.word	0x3fcfffff
 8008ec0:	3ff00000 	.word	0x3ff00000
 8008ec4:	3fe00000 	.word	0x3fe00000
 8008ec8:	7ff00000 	.word	0x7ff00000
 8008ecc:	7fe00000 	.word	0x7fe00000
 8008ed0:	7c9fffff 	.word	0x7c9fffff
 8008ed4:	7fefffff 	.word	0x7fefffff

08008ed8 <strtod>:
 8008ed8:	460a      	mov	r2, r1
 8008eda:	4601      	mov	r1, r0
 8008edc:	4802      	ldr	r0, [pc, #8]	; (8008ee8 <strtod+0x10>)
 8008ede:	4b03      	ldr	r3, [pc, #12]	; (8008eec <strtod+0x14>)
 8008ee0:	6800      	ldr	r0, [r0, #0]
 8008ee2:	f7ff ba09 	b.w	80082f8 <_strtod_l>
 8008ee6:	bf00      	nop
 8008ee8:	200001d8 	.word	0x200001d8
 8008eec:	20000020 	.word	0x20000020

08008ef0 <_strtol_l.constprop.0>:
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef6:	d001      	beq.n	8008efc <_strtol_l.constprop.0+0xc>
 8008ef8:	2b24      	cmp	r3, #36	; 0x24
 8008efa:	d906      	bls.n	8008f0a <_strtol_l.constprop.0+0x1a>
 8008efc:	f000 fae8 	bl	80094d0 <__errno>
 8008f00:	2316      	movs	r3, #22
 8008f02:	6003      	str	r3, [r0, #0]
 8008f04:	2000      	movs	r0, #0
 8008f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ff0 <_strtol_l.constprop.0+0x100>
 8008f0e:	460d      	mov	r5, r1
 8008f10:	462e      	mov	r6, r5
 8008f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f16:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f1a:	f017 0708 	ands.w	r7, r7, #8
 8008f1e:	d1f7      	bne.n	8008f10 <_strtol_l.constprop.0+0x20>
 8008f20:	2c2d      	cmp	r4, #45	; 0x2d
 8008f22:	d132      	bne.n	8008f8a <_strtol_l.constprop.0+0x9a>
 8008f24:	782c      	ldrb	r4, [r5, #0]
 8008f26:	2701      	movs	r7, #1
 8008f28:	1cb5      	adds	r5, r6, #2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d05b      	beq.n	8008fe6 <_strtol_l.constprop.0+0xf6>
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d109      	bne.n	8008f46 <_strtol_l.constprop.0+0x56>
 8008f32:	2c30      	cmp	r4, #48	; 0x30
 8008f34:	d107      	bne.n	8008f46 <_strtol_l.constprop.0+0x56>
 8008f36:	782c      	ldrb	r4, [r5, #0]
 8008f38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f3c:	2c58      	cmp	r4, #88	; 0x58
 8008f3e:	d14d      	bne.n	8008fdc <_strtol_l.constprop.0+0xec>
 8008f40:	786c      	ldrb	r4, [r5, #1]
 8008f42:	2310      	movs	r3, #16
 8008f44:	3502      	adds	r5, #2
 8008f46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f4e:	f04f 0e00 	mov.w	lr, #0
 8008f52:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f56:	4676      	mov	r6, lr
 8008f58:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008f60:	f1bc 0f09 	cmp.w	ip, #9
 8008f64:	d816      	bhi.n	8008f94 <_strtol_l.constprop.0+0xa4>
 8008f66:	4664      	mov	r4, ip
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	dd24      	ble.n	8008fb6 <_strtol_l.constprop.0+0xc6>
 8008f6c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f70:	d008      	beq.n	8008f84 <_strtol_l.constprop.0+0x94>
 8008f72:	45b1      	cmp	r9, r6
 8008f74:	d31c      	bcc.n	8008fb0 <_strtol_l.constprop.0+0xc0>
 8008f76:	d101      	bne.n	8008f7c <_strtol_l.constprop.0+0x8c>
 8008f78:	45a2      	cmp	sl, r4
 8008f7a:	db19      	blt.n	8008fb0 <_strtol_l.constprop.0+0xc0>
 8008f7c:	fb06 4603 	mla	r6, r6, r3, r4
 8008f80:	f04f 0e01 	mov.w	lr, #1
 8008f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f88:	e7e8      	b.n	8008f5c <_strtol_l.constprop.0+0x6c>
 8008f8a:	2c2b      	cmp	r4, #43	; 0x2b
 8008f8c:	bf04      	itt	eq
 8008f8e:	782c      	ldrbeq	r4, [r5, #0]
 8008f90:	1cb5      	addeq	r5, r6, #2
 8008f92:	e7ca      	b.n	8008f2a <_strtol_l.constprop.0+0x3a>
 8008f94:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008f98:	f1bc 0f19 	cmp.w	ip, #25
 8008f9c:	d801      	bhi.n	8008fa2 <_strtol_l.constprop.0+0xb2>
 8008f9e:	3c37      	subs	r4, #55	; 0x37
 8008fa0:	e7e2      	b.n	8008f68 <_strtol_l.constprop.0+0x78>
 8008fa2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008fa6:	f1bc 0f19 	cmp.w	ip, #25
 8008faa:	d804      	bhi.n	8008fb6 <_strtol_l.constprop.0+0xc6>
 8008fac:	3c57      	subs	r4, #87	; 0x57
 8008fae:	e7db      	b.n	8008f68 <_strtol_l.constprop.0+0x78>
 8008fb0:	f04f 3eff 	mov.w	lr, #4294967295
 8008fb4:	e7e6      	b.n	8008f84 <_strtol_l.constprop.0+0x94>
 8008fb6:	f1be 3fff 	cmp.w	lr, #4294967295
 8008fba:	d105      	bne.n	8008fc8 <_strtol_l.constprop.0+0xd8>
 8008fbc:	2322      	movs	r3, #34	; 0x22
 8008fbe:	6003      	str	r3, [r0, #0]
 8008fc0:	4646      	mov	r6, r8
 8008fc2:	b942      	cbnz	r2, 8008fd6 <_strtol_l.constprop.0+0xe6>
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	e79e      	b.n	8008f06 <_strtol_l.constprop.0+0x16>
 8008fc8:	b107      	cbz	r7, 8008fcc <_strtol_l.constprop.0+0xdc>
 8008fca:	4276      	negs	r6, r6
 8008fcc:	2a00      	cmp	r2, #0
 8008fce:	d0f9      	beq.n	8008fc4 <_strtol_l.constprop.0+0xd4>
 8008fd0:	f1be 0f00 	cmp.w	lr, #0
 8008fd4:	d000      	beq.n	8008fd8 <_strtol_l.constprop.0+0xe8>
 8008fd6:	1e69      	subs	r1, r5, #1
 8008fd8:	6011      	str	r1, [r2, #0]
 8008fda:	e7f3      	b.n	8008fc4 <_strtol_l.constprop.0+0xd4>
 8008fdc:	2430      	movs	r4, #48	; 0x30
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1b1      	bne.n	8008f46 <_strtol_l.constprop.0+0x56>
 8008fe2:	2308      	movs	r3, #8
 8008fe4:	e7af      	b.n	8008f46 <_strtol_l.constprop.0+0x56>
 8008fe6:	2c30      	cmp	r4, #48	; 0x30
 8008fe8:	d0a5      	beq.n	8008f36 <_strtol_l.constprop.0+0x46>
 8008fea:	230a      	movs	r3, #10
 8008fec:	e7ab      	b.n	8008f46 <_strtol_l.constprop.0+0x56>
 8008fee:	bf00      	nop
 8008ff0:	0800b711 	.word	0x0800b711

08008ff4 <strtol>:
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	460a      	mov	r2, r1
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	4802      	ldr	r0, [pc, #8]	; (8009004 <strtol+0x10>)
 8008ffc:	6800      	ldr	r0, [r0, #0]
 8008ffe:	f7ff bf77 	b.w	8008ef0 <_strtol_l.constprop.0>
 8009002:	bf00      	nop
 8009004:	200001d8 	.word	0x200001d8

08009008 <std>:
 8009008:	2300      	movs	r3, #0
 800900a:	b510      	push	{r4, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	e9c0 3300 	strd	r3, r3, [r0]
 8009012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009016:	6083      	str	r3, [r0, #8]
 8009018:	8181      	strh	r1, [r0, #12]
 800901a:	6643      	str	r3, [r0, #100]	; 0x64
 800901c:	81c2      	strh	r2, [r0, #14]
 800901e:	6183      	str	r3, [r0, #24]
 8009020:	4619      	mov	r1, r3
 8009022:	2208      	movs	r2, #8
 8009024:	305c      	adds	r0, #92	; 0x5c
 8009026:	f000 f92d 	bl	8009284 <memset>
 800902a:	4b0d      	ldr	r3, [pc, #52]	; (8009060 <std+0x58>)
 800902c:	6263      	str	r3, [r4, #36]	; 0x24
 800902e:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <std+0x5c>)
 8009030:	62a3      	str	r3, [r4, #40]	; 0x28
 8009032:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <std+0x60>)
 8009034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009036:	4b0d      	ldr	r3, [pc, #52]	; (800906c <std+0x64>)
 8009038:	6323      	str	r3, [r4, #48]	; 0x30
 800903a:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <std+0x68>)
 800903c:	6224      	str	r4, [r4, #32]
 800903e:	429c      	cmp	r4, r3
 8009040:	d006      	beq.n	8009050 <std+0x48>
 8009042:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009046:	4294      	cmp	r4, r2
 8009048:	d002      	beq.n	8009050 <std+0x48>
 800904a:	33d0      	adds	r3, #208	; 0xd0
 800904c:	429c      	cmp	r4, r3
 800904e:	d105      	bne.n	800905c <std+0x54>
 8009050:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009058:	f000 ba64 	b.w	8009524 <__retarget_lock_init_recursive>
 800905c:	bd10      	pop	{r4, pc}
 800905e:	bf00      	nop
 8009060:	0800918d 	.word	0x0800918d
 8009064:	080091af 	.word	0x080091af
 8009068:	080091e7 	.word	0x080091e7
 800906c:	0800920b 	.word	0x0800920b
 8009070:	20001df0 	.word	0x20001df0

08009074 <stdio_exit_handler>:
 8009074:	4a02      	ldr	r2, [pc, #8]	; (8009080 <stdio_exit_handler+0xc>)
 8009076:	4903      	ldr	r1, [pc, #12]	; (8009084 <stdio_exit_handler+0x10>)
 8009078:	4803      	ldr	r0, [pc, #12]	; (8009088 <stdio_exit_handler+0x14>)
 800907a:	f000 b869 	b.w	8009150 <_fwalk_sglue>
 800907e:	bf00      	nop
 8009080:	20000014 	.word	0x20000014
 8009084:	0800aeb9 	.word	0x0800aeb9
 8009088:	2000018c 	.word	0x2000018c

0800908c <cleanup_stdio>:
 800908c:	6841      	ldr	r1, [r0, #4]
 800908e:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <cleanup_stdio+0x34>)
 8009090:	4299      	cmp	r1, r3
 8009092:	b510      	push	{r4, lr}
 8009094:	4604      	mov	r4, r0
 8009096:	d001      	beq.n	800909c <cleanup_stdio+0x10>
 8009098:	f001 ff0e 	bl	800aeb8 <_fflush_r>
 800909c:	68a1      	ldr	r1, [r4, #8]
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <cleanup_stdio+0x38>)
 80090a0:	4299      	cmp	r1, r3
 80090a2:	d002      	beq.n	80090aa <cleanup_stdio+0x1e>
 80090a4:	4620      	mov	r0, r4
 80090a6:	f001 ff07 	bl	800aeb8 <_fflush_r>
 80090aa:	68e1      	ldr	r1, [r4, #12]
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <cleanup_stdio+0x3c>)
 80090ae:	4299      	cmp	r1, r3
 80090b0:	d004      	beq.n	80090bc <cleanup_stdio+0x30>
 80090b2:	4620      	mov	r0, r4
 80090b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b8:	f001 befe 	b.w	800aeb8 <_fflush_r>
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	20001df0 	.word	0x20001df0
 80090c4:	20001e58 	.word	0x20001e58
 80090c8:	20001ec0 	.word	0x20001ec0

080090cc <global_stdio_init.part.0>:
 80090cc:	b510      	push	{r4, lr}
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <global_stdio_init.part.0+0x30>)
 80090d0:	4c0b      	ldr	r4, [pc, #44]	; (8009100 <global_stdio_init.part.0+0x34>)
 80090d2:	4a0c      	ldr	r2, [pc, #48]	; (8009104 <global_stdio_init.part.0+0x38>)
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	4620      	mov	r0, r4
 80090d8:	2200      	movs	r2, #0
 80090da:	2104      	movs	r1, #4
 80090dc:	f7ff ff94 	bl	8009008 <std>
 80090e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090e4:	2201      	movs	r2, #1
 80090e6:	2109      	movs	r1, #9
 80090e8:	f7ff ff8e 	bl	8009008 <std>
 80090ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090f0:	2202      	movs	r2, #2
 80090f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090f6:	2112      	movs	r1, #18
 80090f8:	f7ff bf86 	b.w	8009008 <std>
 80090fc:	20001f28 	.word	0x20001f28
 8009100:	20001df0 	.word	0x20001df0
 8009104:	08009075 	.word	0x08009075

08009108 <__sfp_lock_acquire>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_acquire+0x8>)
 800910a:	f000 ba0c 	b.w	8009526 <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	20001f31 	.word	0x20001f31

08009114 <__sfp_lock_release>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_release+0x8>)
 8009116:	f000 ba07 	b.w	8009528 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	20001f31 	.word	0x20001f31

08009120 <__sinit>:
 8009120:	b510      	push	{r4, lr}
 8009122:	4604      	mov	r4, r0
 8009124:	f7ff fff0 	bl	8009108 <__sfp_lock_acquire>
 8009128:	6a23      	ldr	r3, [r4, #32]
 800912a:	b11b      	cbz	r3, 8009134 <__sinit+0x14>
 800912c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009130:	f7ff bff0 	b.w	8009114 <__sfp_lock_release>
 8009134:	4b04      	ldr	r3, [pc, #16]	; (8009148 <__sinit+0x28>)
 8009136:	6223      	str	r3, [r4, #32]
 8009138:	4b04      	ldr	r3, [pc, #16]	; (800914c <__sinit+0x2c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1f5      	bne.n	800912c <__sinit+0xc>
 8009140:	f7ff ffc4 	bl	80090cc <global_stdio_init.part.0>
 8009144:	e7f2      	b.n	800912c <__sinit+0xc>
 8009146:	bf00      	nop
 8009148:	0800908d 	.word	0x0800908d
 800914c:	20001f28 	.word	0x20001f28

08009150 <_fwalk_sglue>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	4607      	mov	r7, r0
 8009156:	4688      	mov	r8, r1
 8009158:	4614      	mov	r4, r2
 800915a:	2600      	movs	r6, #0
 800915c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009160:	f1b9 0901 	subs.w	r9, r9, #1
 8009164:	d505      	bpl.n	8009172 <_fwalk_sglue+0x22>
 8009166:	6824      	ldr	r4, [r4, #0]
 8009168:	2c00      	cmp	r4, #0
 800916a:	d1f7      	bne.n	800915c <_fwalk_sglue+0xc>
 800916c:	4630      	mov	r0, r6
 800916e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d907      	bls.n	8009188 <_fwalk_sglue+0x38>
 8009178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800917c:	3301      	adds	r3, #1
 800917e:	d003      	beq.n	8009188 <_fwalk_sglue+0x38>
 8009180:	4629      	mov	r1, r5
 8009182:	4638      	mov	r0, r7
 8009184:	47c0      	blx	r8
 8009186:	4306      	orrs	r6, r0
 8009188:	3568      	adds	r5, #104	; 0x68
 800918a:	e7e9      	b.n	8009160 <_fwalk_sglue+0x10>

0800918c <__sread>:
 800918c:	b510      	push	{r4, lr}
 800918e:	460c      	mov	r4, r1
 8009190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009194:	f000 f978 	bl	8009488 <_read_r>
 8009198:	2800      	cmp	r0, #0
 800919a:	bfab      	itete	ge
 800919c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800919e:	89a3      	ldrhlt	r3, [r4, #12]
 80091a0:	181b      	addge	r3, r3, r0
 80091a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091a6:	bfac      	ite	ge
 80091a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091aa:	81a3      	strhlt	r3, [r4, #12]
 80091ac:	bd10      	pop	{r4, pc}

080091ae <__swrite>:
 80091ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b2:	461f      	mov	r7, r3
 80091b4:	898b      	ldrh	r3, [r1, #12]
 80091b6:	05db      	lsls	r3, r3, #23
 80091b8:	4605      	mov	r5, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	4616      	mov	r6, r2
 80091be:	d505      	bpl.n	80091cc <__swrite+0x1e>
 80091c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c4:	2302      	movs	r3, #2
 80091c6:	2200      	movs	r2, #0
 80091c8:	f000 f94c 	bl	8009464 <_lseek_r>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	4632      	mov	r2, r6
 80091da:	463b      	mov	r3, r7
 80091dc:	4628      	mov	r0, r5
 80091de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091e2:	f000 b963 	b.w	80094ac <_write_r>

080091e6 <__sseek>:
 80091e6:	b510      	push	{r4, lr}
 80091e8:	460c      	mov	r4, r1
 80091ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ee:	f000 f939 	bl	8009464 <_lseek_r>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	bf15      	itete	ne
 80091f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80091fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009202:	81a3      	strheq	r3, [r4, #12]
 8009204:	bf18      	it	ne
 8009206:	81a3      	strhne	r3, [r4, #12]
 8009208:	bd10      	pop	{r4, pc}

0800920a <__sclose>:
 800920a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920e:	f000 b8c3 	b.w	8009398 <_close_r>

08009212 <_vsniprintf_r>:
 8009212:	b530      	push	{r4, r5, lr}
 8009214:	4614      	mov	r4, r2
 8009216:	2c00      	cmp	r4, #0
 8009218:	b09b      	sub	sp, #108	; 0x6c
 800921a:	4605      	mov	r5, r0
 800921c:	461a      	mov	r2, r3
 800921e:	da05      	bge.n	800922c <_vsniprintf_r+0x1a>
 8009220:	238b      	movs	r3, #139	; 0x8b
 8009222:	6003      	str	r3, [r0, #0]
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	b01b      	add	sp, #108	; 0x6c
 800922a:	bd30      	pop	{r4, r5, pc}
 800922c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009230:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009234:	bf14      	ite	ne
 8009236:	f104 33ff 	addne.w	r3, r4, #4294967295
 800923a:	4623      	moveq	r3, r4
 800923c:	9302      	str	r3, [sp, #8]
 800923e:	9305      	str	r3, [sp, #20]
 8009240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009244:	9100      	str	r1, [sp, #0]
 8009246:	9104      	str	r1, [sp, #16]
 8009248:	f8ad 300e 	strh.w	r3, [sp, #14]
 800924c:	4669      	mov	r1, sp
 800924e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009250:	f001 fb1e 	bl	800a890 <_svfiprintf_r>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	bfbc      	itt	lt
 8009258:	238b      	movlt	r3, #139	; 0x8b
 800925a:	602b      	strlt	r3, [r5, #0]
 800925c:	2c00      	cmp	r4, #0
 800925e:	d0e3      	beq.n	8009228 <_vsniprintf_r+0x16>
 8009260:	9b00      	ldr	r3, [sp, #0]
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
 8009266:	e7df      	b.n	8009228 <_vsniprintf_r+0x16>

08009268 <vsniprintf>:
 8009268:	b507      	push	{r0, r1, r2, lr}
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	460a      	mov	r2, r1
 8009270:	4601      	mov	r1, r0
 8009272:	4803      	ldr	r0, [pc, #12]	; (8009280 <vsniprintf+0x18>)
 8009274:	6800      	ldr	r0, [r0, #0]
 8009276:	f7ff ffcc 	bl	8009212 <_vsniprintf_r>
 800927a:	b003      	add	sp, #12
 800927c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009280:	200001d8 	.word	0x200001d8

08009284 <memset>:
 8009284:	4402      	add	r2, r0
 8009286:	4603      	mov	r3, r0
 8009288:	4293      	cmp	r3, r2
 800928a:	d100      	bne.n	800928e <memset+0xa>
 800928c:	4770      	bx	lr
 800928e:	f803 1b01 	strb.w	r1, [r3], #1
 8009292:	e7f9      	b.n	8009288 <memset+0x4>

08009294 <strncmp>:
 8009294:	b510      	push	{r4, lr}
 8009296:	b16a      	cbz	r2, 80092b4 <strncmp+0x20>
 8009298:	3901      	subs	r1, #1
 800929a:	1884      	adds	r4, r0, r2
 800929c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d103      	bne.n	80092b0 <strncmp+0x1c>
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	d001      	beq.n	80092b0 <strncmp+0x1c>
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d1f5      	bne.n	800929c <strncmp+0x8>
 80092b0:	1ad0      	subs	r0, r2, r3
 80092b2:	bd10      	pop	{r4, pc}
 80092b4:	4610      	mov	r0, r2
 80092b6:	e7fc      	b.n	80092b2 <strncmp+0x1e>

080092b8 <strncpy>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	3901      	subs	r1, #1
 80092bc:	4603      	mov	r3, r0
 80092be:	b132      	cbz	r2, 80092ce <strncpy+0x16>
 80092c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092c4:	f803 4b01 	strb.w	r4, [r3], #1
 80092c8:	3a01      	subs	r2, #1
 80092ca:	2c00      	cmp	r4, #0
 80092cc:	d1f7      	bne.n	80092be <strncpy+0x6>
 80092ce:	441a      	add	r2, r3
 80092d0:	2100      	movs	r1, #0
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d100      	bne.n	80092d8 <strncpy+0x20>
 80092d6:	bd10      	pop	{r4, pc}
 80092d8:	f803 1b01 	strb.w	r1, [r3], #1
 80092dc:	e7f9      	b.n	80092d2 <strncpy+0x1a>
	...

080092e0 <strtok>:
 80092e0:	4b16      	ldr	r3, [pc, #88]	; (800933c <strtok+0x5c>)
 80092e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092e4:	681e      	ldr	r6, [r3, #0]
 80092e6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80092e8:	4605      	mov	r5, r0
 80092ea:	b9fc      	cbnz	r4, 800932c <strtok+0x4c>
 80092ec:	2050      	movs	r0, #80	; 0x50
 80092ee:	9101      	str	r1, [sp, #4]
 80092f0:	f000 fcf4 	bl	8009cdc <malloc>
 80092f4:	9901      	ldr	r1, [sp, #4]
 80092f6:	6470      	str	r0, [r6, #68]	; 0x44
 80092f8:	4602      	mov	r2, r0
 80092fa:	b920      	cbnz	r0, 8009306 <strtok+0x26>
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <strtok+0x60>)
 80092fe:	4811      	ldr	r0, [pc, #68]	; (8009344 <strtok+0x64>)
 8009300:	215b      	movs	r1, #91	; 0x5b
 8009302:	f000 f929 	bl	8009558 <__assert_func>
 8009306:	e9c0 4400 	strd	r4, r4, [r0]
 800930a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800930e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009312:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009316:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800931a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800931e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009322:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009326:	6184      	str	r4, [r0, #24]
 8009328:	7704      	strb	r4, [r0, #28]
 800932a:	6244      	str	r4, [r0, #36]	; 0x24
 800932c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800932e:	2301      	movs	r3, #1
 8009330:	4628      	mov	r0, r5
 8009332:	b002      	add	sp, #8
 8009334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009338:	f000 b806 	b.w	8009348 <__strtok_r>
 800933c:	200001d8 	.word	0x200001d8
 8009340:	0800b811 	.word	0x0800b811
 8009344:	0800b828 	.word	0x0800b828

08009348 <__strtok_r>:
 8009348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800934a:	b908      	cbnz	r0, 8009350 <__strtok_r+0x8>
 800934c:	6810      	ldr	r0, [r2, #0]
 800934e:	b188      	cbz	r0, 8009374 <__strtok_r+0x2c>
 8009350:	4604      	mov	r4, r0
 8009352:	4620      	mov	r0, r4
 8009354:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009358:	460f      	mov	r7, r1
 800935a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800935e:	b91e      	cbnz	r6, 8009368 <__strtok_r+0x20>
 8009360:	b965      	cbnz	r5, 800937c <__strtok_r+0x34>
 8009362:	6015      	str	r5, [r2, #0]
 8009364:	4628      	mov	r0, r5
 8009366:	e005      	b.n	8009374 <__strtok_r+0x2c>
 8009368:	42b5      	cmp	r5, r6
 800936a:	d1f6      	bne.n	800935a <__strtok_r+0x12>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1f0      	bne.n	8009352 <__strtok_r+0xa>
 8009370:	6014      	str	r4, [r2, #0]
 8009372:	7003      	strb	r3, [r0, #0]
 8009374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009376:	461c      	mov	r4, r3
 8009378:	e00c      	b.n	8009394 <__strtok_r+0x4c>
 800937a:	b915      	cbnz	r5, 8009382 <__strtok_r+0x3a>
 800937c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009380:	460e      	mov	r6, r1
 8009382:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009386:	42ab      	cmp	r3, r5
 8009388:	d1f7      	bne.n	800937a <__strtok_r+0x32>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0f3      	beq.n	8009376 <__strtok_r+0x2e>
 800938e:	2300      	movs	r3, #0
 8009390:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009394:	6014      	str	r4, [r2, #0]
 8009396:	e7ed      	b.n	8009374 <__strtok_r+0x2c>

08009398 <_close_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	4d06      	ldr	r5, [pc, #24]	; (80093b4 <_close_r+0x1c>)
 800939c:	2300      	movs	r3, #0
 800939e:	4604      	mov	r4, r0
 80093a0:	4608      	mov	r0, r1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7f8 f97d 	bl	80016a2 <_close>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_close_r+0x1a>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_close_r+0x1a>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	20001f2c 	.word	0x20001f2c

080093b8 <_reclaim_reent>:
 80093b8:	4b29      	ldr	r3, [pc, #164]	; (8009460 <_reclaim_reent+0xa8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4283      	cmp	r3, r0
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	4604      	mov	r4, r0
 80093c2:	d04b      	beq.n	800945c <_reclaim_reent+0xa4>
 80093c4:	69c3      	ldr	r3, [r0, #28]
 80093c6:	b143      	cbz	r3, 80093da <_reclaim_reent+0x22>
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d144      	bne.n	8009458 <_reclaim_reent+0xa0>
 80093ce:	69e3      	ldr	r3, [r4, #28]
 80093d0:	6819      	ldr	r1, [r3, #0]
 80093d2:	b111      	cbz	r1, 80093da <_reclaim_reent+0x22>
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 f8dd 	bl	8009594 <_free_r>
 80093da:	6961      	ldr	r1, [r4, #20]
 80093dc:	b111      	cbz	r1, 80093e4 <_reclaim_reent+0x2c>
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f8d8 	bl	8009594 <_free_r>
 80093e4:	69e1      	ldr	r1, [r4, #28]
 80093e6:	b111      	cbz	r1, 80093ee <_reclaim_reent+0x36>
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 f8d3 	bl	8009594 <_free_r>
 80093ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80093f0:	b111      	cbz	r1, 80093f8 <_reclaim_reent+0x40>
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 f8ce 	bl	8009594 <_free_r>
 80093f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093fa:	b111      	cbz	r1, 8009402 <_reclaim_reent+0x4a>
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 f8c9 	bl	8009594 <_free_r>
 8009402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009404:	b111      	cbz	r1, 800940c <_reclaim_reent+0x54>
 8009406:	4620      	mov	r0, r4
 8009408:	f000 f8c4 	bl	8009594 <_free_r>
 800940c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800940e:	b111      	cbz	r1, 8009416 <_reclaim_reent+0x5e>
 8009410:	4620      	mov	r0, r4
 8009412:	f000 f8bf 	bl	8009594 <_free_r>
 8009416:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009418:	b111      	cbz	r1, 8009420 <_reclaim_reent+0x68>
 800941a:	4620      	mov	r0, r4
 800941c:	f000 f8ba 	bl	8009594 <_free_r>
 8009420:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009422:	b111      	cbz	r1, 800942a <_reclaim_reent+0x72>
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f8b5 	bl	8009594 <_free_r>
 800942a:	6a23      	ldr	r3, [r4, #32]
 800942c:	b1b3      	cbz	r3, 800945c <_reclaim_reent+0xa4>
 800942e:	4620      	mov	r0, r4
 8009430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009434:	4718      	bx	r3
 8009436:	5949      	ldr	r1, [r1, r5]
 8009438:	b941      	cbnz	r1, 800944c <_reclaim_reent+0x94>
 800943a:	3504      	adds	r5, #4
 800943c:	69e3      	ldr	r3, [r4, #28]
 800943e:	2d80      	cmp	r5, #128	; 0x80
 8009440:	68d9      	ldr	r1, [r3, #12]
 8009442:	d1f8      	bne.n	8009436 <_reclaim_reent+0x7e>
 8009444:	4620      	mov	r0, r4
 8009446:	f000 f8a5 	bl	8009594 <_free_r>
 800944a:	e7c0      	b.n	80093ce <_reclaim_reent+0x16>
 800944c:	680e      	ldr	r6, [r1, #0]
 800944e:	4620      	mov	r0, r4
 8009450:	f000 f8a0 	bl	8009594 <_free_r>
 8009454:	4631      	mov	r1, r6
 8009456:	e7ef      	b.n	8009438 <_reclaim_reent+0x80>
 8009458:	2500      	movs	r5, #0
 800945a:	e7ef      	b.n	800943c <_reclaim_reent+0x84>
 800945c:	bd70      	pop	{r4, r5, r6, pc}
 800945e:	bf00      	nop
 8009460:	200001d8 	.word	0x200001d8

08009464 <_lseek_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_lseek_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f8 f93c 	bl	80016f0 <_lseek>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_lseek_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_lseek_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20001f2c 	.word	0x20001f2c

08009488 <_read_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d07      	ldr	r5, [pc, #28]	; (80094a8 <_read_r+0x20>)
 800948c:	4604      	mov	r4, r0
 800948e:	4608      	mov	r0, r1
 8009490:	4611      	mov	r1, r2
 8009492:	2200      	movs	r2, #0
 8009494:	602a      	str	r2, [r5, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f7f8 f8ca 	bl	8001630 <_read>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_read_r+0x1e>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_read_r+0x1e>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20001f2c 	.word	0x20001f2c

080094ac <_write_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	; (80094cc <_write_r+0x20>)
 80094b0:	4604      	mov	r4, r0
 80094b2:	4608      	mov	r0, r1
 80094b4:	4611      	mov	r1, r2
 80094b6:	2200      	movs	r2, #0
 80094b8:	602a      	str	r2, [r5, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f7f8 f8d5 	bl	800166a <_write>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_write_r+0x1e>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_write_r+0x1e>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20001f2c 	.word	0x20001f2c

080094d0 <__errno>:
 80094d0:	4b01      	ldr	r3, [pc, #4]	; (80094d8 <__errno+0x8>)
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	200001d8 	.word	0x200001d8

080094dc <__libc_init_array>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	4d0d      	ldr	r5, [pc, #52]	; (8009514 <__libc_init_array+0x38>)
 80094e0:	4c0d      	ldr	r4, [pc, #52]	; (8009518 <__libc_init_array+0x3c>)
 80094e2:	1b64      	subs	r4, r4, r5
 80094e4:	10a4      	asrs	r4, r4, #2
 80094e6:	2600      	movs	r6, #0
 80094e8:	42a6      	cmp	r6, r4
 80094ea:	d109      	bne.n	8009500 <__libc_init_array+0x24>
 80094ec:	4d0b      	ldr	r5, [pc, #44]	; (800951c <__libc_init_array+0x40>)
 80094ee:	4c0c      	ldr	r4, [pc, #48]	; (8009520 <__libc_init_array+0x44>)
 80094f0:	f002 f83c 	bl	800b56c <_init>
 80094f4:	1b64      	subs	r4, r4, r5
 80094f6:	10a4      	asrs	r4, r4, #2
 80094f8:	2600      	movs	r6, #0
 80094fa:	42a6      	cmp	r6, r4
 80094fc:	d105      	bne.n	800950a <__libc_init_array+0x2e>
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	f855 3b04 	ldr.w	r3, [r5], #4
 8009504:	4798      	blx	r3
 8009506:	3601      	adds	r6, #1
 8009508:	e7ee      	b.n	80094e8 <__libc_init_array+0xc>
 800950a:	f855 3b04 	ldr.w	r3, [r5], #4
 800950e:	4798      	blx	r3
 8009510:	3601      	adds	r6, #1
 8009512:	e7f2      	b.n	80094fa <__libc_init_array+0x1e>
 8009514:	0800bac0 	.word	0x0800bac0
 8009518:	0800bac0 	.word	0x0800bac0
 800951c:	0800bac0 	.word	0x0800bac0
 8009520:	0800bac4 	.word	0x0800bac4

08009524 <__retarget_lock_init_recursive>:
 8009524:	4770      	bx	lr

08009526 <__retarget_lock_acquire_recursive>:
 8009526:	4770      	bx	lr

08009528 <__retarget_lock_release_recursive>:
 8009528:	4770      	bx	lr

0800952a <memcpy>:
 800952a:	440a      	add	r2, r1
 800952c:	4291      	cmp	r1, r2
 800952e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009532:	d100      	bne.n	8009536 <memcpy+0xc>
 8009534:	4770      	bx	lr
 8009536:	b510      	push	{r4, lr}
 8009538:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009540:	4291      	cmp	r1, r2
 8009542:	d1f9      	bne.n	8009538 <memcpy+0xe>
 8009544:	bd10      	pop	{r4, pc}
	...

08009548 <nan>:
 8009548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009550 <nan+0x8>
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	00000000 	.word	0x00000000
 8009554:	7ff80000 	.word	0x7ff80000

08009558 <__assert_func>:
 8009558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800955a:	4614      	mov	r4, r2
 800955c:	461a      	mov	r2, r3
 800955e:	4b09      	ldr	r3, [pc, #36]	; (8009584 <__assert_func+0x2c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4605      	mov	r5, r0
 8009564:	68d8      	ldr	r0, [r3, #12]
 8009566:	b14c      	cbz	r4, 800957c <__assert_func+0x24>
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <__assert_func+0x30>)
 800956a:	9100      	str	r1, [sp, #0]
 800956c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009570:	4906      	ldr	r1, [pc, #24]	; (800958c <__assert_func+0x34>)
 8009572:	462b      	mov	r3, r5
 8009574:	f001 fcc8 	bl	800af08 <fiprintf>
 8009578:	f001 fd02 	bl	800af80 <abort>
 800957c:	4b04      	ldr	r3, [pc, #16]	; (8009590 <__assert_func+0x38>)
 800957e:	461c      	mov	r4, r3
 8009580:	e7f3      	b.n	800956a <__assert_func+0x12>
 8009582:	bf00      	nop
 8009584:	200001d8 	.word	0x200001d8
 8009588:	0800b88a 	.word	0x0800b88a
 800958c:	0800b897 	.word	0x0800b897
 8009590:	0800b8c5 	.word	0x0800b8c5

08009594 <_free_r>:
 8009594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009596:	2900      	cmp	r1, #0
 8009598:	d044      	beq.n	8009624 <_free_r+0x90>
 800959a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800959e:	9001      	str	r0, [sp, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f1a1 0404 	sub.w	r4, r1, #4
 80095a6:	bfb8      	it	lt
 80095a8:	18e4      	addlt	r4, r4, r3
 80095aa:	f000 fc51 	bl	8009e50 <__malloc_lock>
 80095ae:	4a1e      	ldr	r2, [pc, #120]	; (8009628 <_free_r+0x94>)
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	6813      	ldr	r3, [r2, #0]
 80095b4:	b933      	cbnz	r3, 80095c4 <_free_r+0x30>
 80095b6:	6063      	str	r3, [r4, #4]
 80095b8:	6014      	str	r4, [r2, #0]
 80095ba:	b003      	add	sp, #12
 80095bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095c0:	f000 bc4c 	b.w	8009e5c <__malloc_unlock>
 80095c4:	42a3      	cmp	r3, r4
 80095c6:	d908      	bls.n	80095da <_free_r+0x46>
 80095c8:	6825      	ldr	r5, [r4, #0]
 80095ca:	1961      	adds	r1, r4, r5
 80095cc:	428b      	cmp	r3, r1
 80095ce:	bf01      	itttt	eq
 80095d0:	6819      	ldreq	r1, [r3, #0]
 80095d2:	685b      	ldreq	r3, [r3, #4]
 80095d4:	1949      	addeq	r1, r1, r5
 80095d6:	6021      	streq	r1, [r4, #0]
 80095d8:	e7ed      	b.n	80095b6 <_free_r+0x22>
 80095da:	461a      	mov	r2, r3
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b10b      	cbz	r3, 80095e4 <_free_r+0x50>
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	d9fa      	bls.n	80095da <_free_r+0x46>
 80095e4:	6811      	ldr	r1, [r2, #0]
 80095e6:	1855      	adds	r5, r2, r1
 80095e8:	42a5      	cmp	r5, r4
 80095ea:	d10b      	bne.n	8009604 <_free_r+0x70>
 80095ec:	6824      	ldr	r4, [r4, #0]
 80095ee:	4421      	add	r1, r4
 80095f0:	1854      	adds	r4, r2, r1
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	6011      	str	r1, [r2, #0]
 80095f6:	d1e0      	bne.n	80095ba <_free_r+0x26>
 80095f8:	681c      	ldr	r4, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	6053      	str	r3, [r2, #4]
 80095fe:	440c      	add	r4, r1
 8009600:	6014      	str	r4, [r2, #0]
 8009602:	e7da      	b.n	80095ba <_free_r+0x26>
 8009604:	d902      	bls.n	800960c <_free_r+0x78>
 8009606:	230c      	movs	r3, #12
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	e7d6      	b.n	80095ba <_free_r+0x26>
 800960c:	6825      	ldr	r5, [r4, #0]
 800960e:	1961      	adds	r1, r4, r5
 8009610:	428b      	cmp	r3, r1
 8009612:	bf04      	itt	eq
 8009614:	6819      	ldreq	r1, [r3, #0]
 8009616:	685b      	ldreq	r3, [r3, #4]
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	bf04      	itt	eq
 800961c:	1949      	addeq	r1, r1, r5
 800961e:	6021      	streq	r1, [r4, #0]
 8009620:	6054      	str	r4, [r2, #4]
 8009622:	e7ca      	b.n	80095ba <_free_r+0x26>
 8009624:	b003      	add	sp, #12
 8009626:	bd30      	pop	{r4, r5, pc}
 8009628:	20001f34 	.word	0x20001f34

0800962c <rshift>:
 800962c:	6903      	ldr	r3, [r0, #16]
 800962e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800963a:	f100 0414 	add.w	r4, r0, #20
 800963e:	dd45      	ble.n	80096cc <rshift+0xa0>
 8009640:	f011 011f 	ands.w	r1, r1, #31
 8009644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800964c:	d10c      	bne.n	8009668 <rshift+0x3c>
 800964e:	f100 0710 	add.w	r7, r0, #16
 8009652:	4629      	mov	r1, r5
 8009654:	42b1      	cmp	r1, r6
 8009656:	d334      	bcc.n	80096c2 <rshift+0x96>
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	1eea      	subs	r2, r5, #3
 800965e:	4296      	cmp	r6, r2
 8009660:	bf38      	it	cc
 8009662:	2300      	movcc	r3, #0
 8009664:	4423      	add	r3, r4
 8009666:	e015      	b.n	8009694 <rshift+0x68>
 8009668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800966c:	f1c1 0820 	rsb	r8, r1, #32
 8009670:	40cf      	lsrs	r7, r1
 8009672:	f105 0e04 	add.w	lr, r5, #4
 8009676:	46a1      	mov	r9, r4
 8009678:	4576      	cmp	r6, lr
 800967a:	46f4      	mov	ip, lr
 800967c:	d815      	bhi.n	80096aa <rshift+0x7e>
 800967e:	1a9a      	subs	r2, r3, r2
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	3a04      	subs	r2, #4
 8009684:	3501      	adds	r5, #1
 8009686:	42ae      	cmp	r6, r5
 8009688:	bf38      	it	cc
 800968a:	2200      	movcc	r2, #0
 800968c:	18a3      	adds	r3, r4, r2
 800968e:	50a7      	str	r7, [r4, r2]
 8009690:	b107      	cbz	r7, 8009694 <rshift+0x68>
 8009692:	3304      	adds	r3, #4
 8009694:	1b1a      	subs	r2, r3, r4
 8009696:	42a3      	cmp	r3, r4
 8009698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800969c:	bf08      	it	eq
 800969e:	2300      	moveq	r3, #0
 80096a0:	6102      	str	r2, [r0, #16]
 80096a2:	bf08      	it	eq
 80096a4:	6143      	streq	r3, [r0, #20]
 80096a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096aa:	f8dc c000 	ldr.w	ip, [ip]
 80096ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80096b2:	ea4c 0707 	orr.w	r7, ip, r7
 80096b6:	f849 7b04 	str.w	r7, [r9], #4
 80096ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096be:	40cf      	lsrs	r7, r1
 80096c0:	e7da      	b.n	8009678 <rshift+0x4c>
 80096c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80096c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80096ca:	e7c3      	b.n	8009654 <rshift+0x28>
 80096cc:	4623      	mov	r3, r4
 80096ce:	e7e1      	b.n	8009694 <rshift+0x68>

080096d0 <__hexdig_fun>:
 80096d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d802      	bhi.n	80096de <__hexdig_fun+0xe>
 80096d8:	3820      	subs	r0, #32
 80096da:	b2c0      	uxtb	r0, r0
 80096dc:	4770      	bx	lr
 80096de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d801      	bhi.n	80096ea <__hexdig_fun+0x1a>
 80096e6:	3847      	subs	r0, #71	; 0x47
 80096e8:	e7f7      	b.n	80096da <__hexdig_fun+0xa>
 80096ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096ee:	2b05      	cmp	r3, #5
 80096f0:	d801      	bhi.n	80096f6 <__hexdig_fun+0x26>
 80096f2:	3827      	subs	r0, #39	; 0x27
 80096f4:	e7f1      	b.n	80096da <__hexdig_fun+0xa>
 80096f6:	2000      	movs	r0, #0
 80096f8:	4770      	bx	lr
	...

080096fc <__gethex>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	4617      	mov	r7, r2
 8009702:	680a      	ldr	r2, [r1, #0]
 8009704:	b085      	sub	sp, #20
 8009706:	f102 0b02 	add.w	fp, r2, #2
 800970a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800970e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009712:	4681      	mov	r9, r0
 8009714:	468a      	mov	sl, r1
 8009716:	9302      	str	r3, [sp, #8]
 8009718:	32fe      	adds	r2, #254	; 0xfe
 800971a:	eb02 030b 	add.w	r3, r2, fp
 800971e:	46d8      	mov	r8, fp
 8009720:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	2830      	cmp	r0, #48	; 0x30
 8009728:	d0f7      	beq.n	800971a <__gethex+0x1e>
 800972a:	f7ff ffd1 	bl	80096d0 <__hexdig_fun>
 800972e:	4604      	mov	r4, r0
 8009730:	2800      	cmp	r0, #0
 8009732:	d138      	bne.n	80097a6 <__gethex+0xaa>
 8009734:	49a7      	ldr	r1, [pc, #668]	; (80099d4 <__gethex+0x2d8>)
 8009736:	2201      	movs	r2, #1
 8009738:	4640      	mov	r0, r8
 800973a:	f7ff fdab 	bl	8009294 <strncmp>
 800973e:	4606      	mov	r6, r0
 8009740:	2800      	cmp	r0, #0
 8009742:	d169      	bne.n	8009818 <__gethex+0x11c>
 8009744:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009748:	465d      	mov	r5, fp
 800974a:	f7ff ffc1 	bl	80096d0 <__hexdig_fun>
 800974e:	2800      	cmp	r0, #0
 8009750:	d064      	beq.n	800981c <__gethex+0x120>
 8009752:	465a      	mov	r2, fp
 8009754:	7810      	ldrb	r0, [r2, #0]
 8009756:	2830      	cmp	r0, #48	; 0x30
 8009758:	4690      	mov	r8, r2
 800975a:	f102 0201 	add.w	r2, r2, #1
 800975e:	d0f9      	beq.n	8009754 <__gethex+0x58>
 8009760:	f7ff ffb6 	bl	80096d0 <__hexdig_fun>
 8009764:	2301      	movs	r3, #1
 8009766:	fab0 f480 	clz	r4, r0
 800976a:	0964      	lsrs	r4, r4, #5
 800976c:	465e      	mov	r6, fp
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	4642      	mov	r2, r8
 8009772:	4615      	mov	r5, r2
 8009774:	3201      	adds	r2, #1
 8009776:	7828      	ldrb	r0, [r5, #0]
 8009778:	f7ff ffaa 	bl	80096d0 <__hexdig_fun>
 800977c:	2800      	cmp	r0, #0
 800977e:	d1f8      	bne.n	8009772 <__gethex+0x76>
 8009780:	4994      	ldr	r1, [pc, #592]	; (80099d4 <__gethex+0x2d8>)
 8009782:	2201      	movs	r2, #1
 8009784:	4628      	mov	r0, r5
 8009786:	f7ff fd85 	bl	8009294 <strncmp>
 800978a:	b978      	cbnz	r0, 80097ac <__gethex+0xb0>
 800978c:	b946      	cbnz	r6, 80097a0 <__gethex+0xa4>
 800978e:	1c6e      	adds	r6, r5, #1
 8009790:	4632      	mov	r2, r6
 8009792:	4615      	mov	r5, r2
 8009794:	3201      	adds	r2, #1
 8009796:	7828      	ldrb	r0, [r5, #0]
 8009798:	f7ff ff9a 	bl	80096d0 <__hexdig_fun>
 800979c:	2800      	cmp	r0, #0
 800979e:	d1f8      	bne.n	8009792 <__gethex+0x96>
 80097a0:	1b73      	subs	r3, r6, r5
 80097a2:	009e      	lsls	r6, r3, #2
 80097a4:	e004      	b.n	80097b0 <__gethex+0xb4>
 80097a6:	2400      	movs	r4, #0
 80097a8:	4626      	mov	r6, r4
 80097aa:	e7e1      	b.n	8009770 <__gethex+0x74>
 80097ac:	2e00      	cmp	r6, #0
 80097ae:	d1f7      	bne.n	80097a0 <__gethex+0xa4>
 80097b0:	782b      	ldrb	r3, [r5, #0]
 80097b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097b6:	2b50      	cmp	r3, #80	; 0x50
 80097b8:	d13d      	bne.n	8009836 <__gethex+0x13a>
 80097ba:	786b      	ldrb	r3, [r5, #1]
 80097bc:	2b2b      	cmp	r3, #43	; 0x2b
 80097be:	d02f      	beq.n	8009820 <__gethex+0x124>
 80097c0:	2b2d      	cmp	r3, #45	; 0x2d
 80097c2:	d031      	beq.n	8009828 <__gethex+0x12c>
 80097c4:	1c69      	adds	r1, r5, #1
 80097c6:	f04f 0b00 	mov.w	fp, #0
 80097ca:	7808      	ldrb	r0, [r1, #0]
 80097cc:	f7ff ff80 	bl	80096d0 <__hexdig_fun>
 80097d0:	1e42      	subs	r2, r0, #1
 80097d2:	b2d2      	uxtb	r2, r2
 80097d4:	2a18      	cmp	r2, #24
 80097d6:	d82e      	bhi.n	8009836 <__gethex+0x13a>
 80097d8:	f1a0 0210 	sub.w	r2, r0, #16
 80097dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097e0:	f7ff ff76 	bl	80096d0 <__hexdig_fun>
 80097e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80097e8:	fa5f fc8c 	uxtb.w	ip, ip
 80097ec:	f1bc 0f18 	cmp.w	ip, #24
 80097f0:	d91d      	bls.n	800982e <__gethex+0x132>
 80097f2:	f1bb 0f00 	cmp.w	fp, #0
 80097f6:	d000      	beq.n	80097fa <__gethex+0xfe>
 80097f8:	4252      	negs	r2, r2
 80097fa:	4416      	add	r6, r2
 80097fc:	f8ca 1000 	str.w	r1, [sl]
 8009800:	b1dc      	cbz	r4, 800983a <__gethex+0x13e>
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bf14      	ite	ne
 8009808:	f04f 0800 	movne.w	r8, #0
 800980c:	f04f 0806 	moveq.w	r8, #6
 8009810:	4640      	mov	r0, r8
 8009812:	b005      	add	sp, #20
 8009814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009818:	4645      	mov	r5, r8
 800981a:	4626      	mov	r6, r4
 800981c:	2401      	movs	r4, #1
 800981e:	e7c7      	b.n	80097b0 <__gethex+0xb4>
 8009820:	f04f 0b00 	mov.w	fp, #0
 8009824:	1ca9      	adds	r1, r5, #2
 8009826:	e7d0      	b.n	80097ca <__gethex+0xce>
 8009828:	f04f 0b01 	mov.w	fp, #1
 800982c:	e7fa      	b.n	8009824 <__gethex+0x128>
 800982e:	230a      	movs	r3, #10
 8009830:	fb03 0002 	mla	r0, r3, r2, r0
 8009834:	e7d0      	b.n	80097d8 <__gethex+0xdc>
 8009836:	4629      	mov	r1, r5
 8009838:	e7e0      	b.n	80097fc <__gethex+0x100>
 800983a:	eba5 0308 	sub.w	r3, r5, r8
 800983e:	3b01      	subs	r3, #1
 8009840:	4621      	mov	r1, r4
 8009842:	2b07      	cmp	r3, #7
 8009844:	dc0a      	bgt.n	800985c <__gethex+0x160>
 8009846:	4648      	mov	r0, r9
 8009848:	f000 fb0e 	bl	8009e68 <_Balloc>
 800984c:	4604      	mov	r4, r0
 800984e:	b940      	cbnz	r0, 8009862 <__gethex+0x166>
 8009850:	4b61      	ldr	r3, [pc, #388]	; (80099d8 <__gethex+0x2dc>)
 8009852:	4602      	mov	r2, r0
 8009854:	21e4      	movs	r1, #228	; 0xe4
 8009856:	4861      	ldr	r0, [pc, #388]	; (80099dc <__gethex+0x2e0>)
 8009858:	f7ff fe7e 	bl	8009558 <__assert_func>
 800985c:	3101      	adds	r1, #1
 800985e:	105b      	asrs	r3, r3, #1
 8009860:	e7ef      	b.n	8009842 <__gethex+0x146>
 8009862:	f100 0a14 	add.w	sl, r0, #20
 8009866:	2300      	movs	r3, #0
 8009868:	495a      	ldr	r1, [pc, #360]	; (80099d4 <__gethex+0x2d8>)
 800986a:	f8cd a004 	str.w	sl, [sp, #4]
 800986e:	469b      	mov	fp, r3
 8009870:	45a8      	cmp	r8, r5
 8009872:	d342      	bcc.n	80098fa <__gethex+0x1fe>
 8009874:	9801      	ldr	r0, [sp, #4]
 8009876:	f840 bb04 	str.w	fp, [r0], #4
 800987a:	eba0 000a 	sub.w	r0, r0, sl
 800987e:	1080      	asrs	r0, r0, #2
 8009880:	6120      	str	r0, [r4, #16]
 8009882:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009886:	4658      	mov	r0, fp
 8009888:	f000 fbe0 	bl	800a04c <__hi0bits>
 800988c:	683d      	ldr	r5, [r7, #0]
 800988e:	eba8 0000 	sub.w	r0, r8, r0
 8009892:	42a8      	cmp	r0, r5
 8009894:	dd59      	ble.n	800994a <__gethex+0x24e>
 8009896:	eba0 0805 	sub.w	r8, r0, r5
 800989a:	4641      	mov	r1, r8
 800989c:	4620      	mov	r0, r4
 800989e:	f000 ff6f 	bl	800a780 <__any_on>
 80098a2:	4683      	mov	fp, r0
 80098a4:	b1b8      	cbz	r0, 80098d6 <__gethex+0x1da>
 80098a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80098aa:	1159      	asrs	r1, r3, #5
 80098ac:	f003 021f 	and.w	r2, r3, #31
 80098b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098b4:	f04f 0b01 	mov.w	fp, #1
 80098b8:	fa0b f202 	lsl.w	r2, fp, r2
 80098bc:	420a      	tst	r2, r1
 80098be:	d00a      	beq.n	80098d6 <__gethex+0x1da>
 80098c0:	455b      	cmp	r3, fp
 80098c2:	dd06      	ble.n	80098d2 <__gethex+0x1d6>
 80098c4:	f1a8 0102 	sub.w	r1, r8, #2
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 ff59 	bl	800a780 <__any_on>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d138      	bne.n	8009944 <__gethex+0x248>
 80098d2:	f04f 0b02 	mov.w	fp, #2
 80098d6:	4641      	mov	r1, r8
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff fea7 	bl	800962c <rshift>
 80098de:	4446      	add	r6, r8
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	42b3      	cmp	r3, r6
 80098e4:	da41      	bge.n	800996a <__gethex+0x26e>
 80098e6:	4621      	mov	r1, r4
 80098e8:	4648      	mov	r0, r9
 80098ea:	f000 fafd 	bl	8009ee8 <_Bfree>
 80098ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098f0:	2300      	movs	r3, #0
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80098f8:	e78a      	b.n	8009810 <__gethex+0x114>
 80098fa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80098fe:	2a2e      	cmp	r2, #46	; 0x2e
 8009900:	d014      	beq.n	800992c <__gethex+0x230>
 8009902:	2b20      	cmp	r3, #32
 8009904:	d106      	bne.n	8009914 <__gethex+0x218>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	f843 bb04 	str.w	fp, [r3], #4
 800990c:	f04f 0b00 	mov.w	fp, #0
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	465b      	mov	r3, fp
 8009914:	7828      	ldrb	r0, [r5, #0]
 8009916:	9303      	str	r3, [sp, #12]
 8009918:	f7ff feda 	bl	80096d0 <__hexdig_fun>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	f000 000f 	and.w	r0, r0, #15
 8009922:	4098      	lsls	r0, r3
 8009924:	ea4b 0b00 	orr.w	fp, fp, r0
 8009928:	3304      	adds	r3, #4
 800992a:	e7a1      	b.n	8009870 <__gethex+0x174>
 800992c:	45a8      	cmp	r8, r5
 800992e:	d8e8      	bhi.n	8009902 <__gethex+0x206>
 8009930:	2201      	movs	r2, #1
 8009932:	4628      	mov	r0, r5
 8009934:	9303      	str	r3, [sp, #12]
 8009936:	f7ff fcad 	bl	8009294 <strncmp>
 800993a:	4926      	ldr	r1, [pc, #152]	; (80099d4 <__gethex+0x2d8>)
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	2800      	cmp	r0, #0
 8009940:	d1df      	bne.n	8009902 <__gethex+0x206>
 8009942:	e795      	b.n	8009870 <__gethex+0x174>
 8009944:	f04f 0b03 	mov.w	fp, #3
 8009948:	e7c5      	b.n	80098d6 <__gethex+0x1da>
 800994a:	da0b      	bge.n	8009964 <__gethex+0x268>
 800994c:	eba5 0800 	sub.w	r8, r5, r0
 8009950:	4621      	mov	r1, r4
 8009952:	4642      	mov	r2, r8
 8009954:	4648      	mov	r0, r9
 8009956:	f000 fce1 	bl	800a31c <__lshift>
 800995a:	eba6 0608 	sub.w	r6, r6, r8
 800995e:	4604      	mov	r4, r0
 8009960:	f100 0a14 	add.w	sl, r0, #20
 8009964:	f04f 0b00 	mov.w	fp, #0
 8009968:	e7ba      	b.n	80098e0 <__gethex+0x1e4>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	42b3      	cmp	r3, r6
 800996e:	dd73      	ble.n	8009a58 <__gethex+0x35c>
 8009970:	1b9e      	subs	r6, r3, r6
 8009972:	42b5      	cmp	r5, r6
 8009974:	dc34      	bgt.n	80099e0 <__gethex+0x2e4>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d023      	beq.n	80099c4 <__gethex+0x2c8>
 800997c:	2b03      	cmp	r3, #3
 800997e:	d025      	beq.n	80099cc <__gethex+0x2d0>
 8009980:	2b01      	cmp	r3, #1
 8009982:	d115      	bne.n	80099b0 <__gethex+0x2b4>
 8009984:	42b5      	cmp	r5, r6
 8009986:	d113      	bne.n	80099b0 <__gethex+0x2b4>
 8009988:	2d01      	cmp	r5, #1
 800998a:	d10b      	bne.n	80099a4 <__gethex+0x2a8>
 800998c:	9a02      	ldr	r2, [sp, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	2301      	movs	r3, #1
 8009994:	6123      	str	r3, [r4, #16]
 8009996:	f8ca 3000 	str.w	r3, [sl]
 800999a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800999c:	f04f 0862 	mov.w	r8, #98	; 0x62
 80099a0:	601c      	str	r4, [r3, #0]
 80099a2:	e735      	b.n	8009810 <__gethex+0x114>
 80099a4:	1e69      	subs	r1, r5, #1
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 feea 	bl	800a780 <__any_on>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d1ed      	bne.n	800998c <__gethex+0x290>
 80099b0:	4621      	mov	r1, r4
 80099b2:	4648      	mov	r0, r9
 80099b4:	f000 fa98 	bl	8009ee8 <_Bfree>
 80099b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099ba:	2300      	movs	r3, #0
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	f04f 0850 	mov.w	r8, #80	; 0x50
 80099c2:	e725      	b.n	8009810 <__gethex+0x114>
 80099c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f2      	bne.n	80099b0 <__gethex+0x2b4>
 80099ca:	e7df      	b.n	800998c <__gethex+0x290>
 80099cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1dc      	bne.n	800998c <__gethex+0x290>
 80099d2:	e7ed      	b.n	80099b0 <__gethex+0x2b4>
 80099d4:	0800b6ac 	.word	0x0800b6ac
 80099d8:	0800b8c6 	.word	0x0800b8c6
 80099dc:	0800b8d7 	.word	0x0800b8d7
 80099e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80099e4:	f1bb 0f00 	cmp.w	fp, #0
 80099e8:	d133      	bne.n	8009a52 <__gethex+0x356>
 80099ea:	f1b8 0f00 	cmp.w	r8, #0
 80099ee:	d004      	beq.n	80099fa <__gethex+0x2fe>
 80099f0:	4641      	mov	r1, r8
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 fec4 	bl	800a780 <__any_on>
 80099f8:	4683      	mov	fp, r0
 80099fa:	ea4f 1268 	mov.w	r2, r8, asr #5
 80099fe:	2301      	movs	r3, #1
 8009a00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a04:	f008 081f 	and.w	r8, r8, #31
 8009a08:	fa03 f308 	lsl.w	r3, r3, r8
 8009a0c:	4213      	tst	r3, r2
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4620      	mov	r0, r4
 8009a12:	bf18      	it	ne
 8009a14:	f04b 0b02 	orrne.w	fp, fp, #2
 8009a18:	1bad      	subs	r5, r5, r6
 8009a1a:	f7ff fe07 	bl	800962c <rshift>
 8009a1e:	687e      	ldr	r6, [r7, #4]
 8009a20:	f04f 0802 	mov.w	r8, #2
 8009a24:	f1bb 0f00 	cmp.w	fp, #0
 8009a28:	d04a      	beq.n	8009ac0 <__gethex+0x3c4>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d016      	beq.n	8009a5e <__gethex+0x362>
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d018      	beq.n	8009a66 <__gethex+0x36a>
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d109      	bne.n	8009a4c <__gethex+0x350>
 8009a38:	f01b 0f02 	tst.w	fp, #2
 8009a3c:	d006      	beq.n	8009a4c <__gethex+0x350>
 8009a3e:	f8da 3000 	ldr.w	r3, [sl]
 8009a42:	ea4b 0b03 	orr.w	fp, fp, r3
 8009a46:	f01b 0f01 	tst.w	fp, #1
 8009a4a:	d10f      	bne.n	8009a6c <__gethex+0x370>
 8009a4c:	f048 0810 	orr.w	r8, r8, #16
 8009a50:	e036      	b.n	8009ac0 <__gethex+0x3c4>
 8009a52:	f04f 0b01 	mov.w	fp, #1
 8009a56:	e7d0      	b.n	80099fa <__gethex+0x2fe>
 8009a58:	f04f 0801 	mov.w	r8, #1
 8009a5c:	e7e2      	b.n	8009a24 <__gethex+0x328>
 8009a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a60:	f1c3 0301 	rsb	r3, r3, #1
 8009a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0ef      	beq.n	8009a4c <__gethex+0x350>
 8009a6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a70:	f104 0214 	add.w	r2, r4, #20
 8009a74:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4694      	mov	ip, r2
 8009a82:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a86:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009a8a:	d01e      	beq.n	8009aca <__gethex+0x3ce>
 8009a8c:	3101      	adds	r1, #1
 8009a8e:	f8cc 1000 	str.w	r1, [ip]
 8009a92:	f1b8 0f02 	cmp.w	r8, #2
 8009a96:	f104 0214 	add.w	r2, r4, #20
 8009a9a:	d13d      	bne.n	8009b18 <__gethex+0x41c>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	42ab      	cmp	r3, r5
 8009aa2:	d10b      	bne.n	8009abc <__gethex+0x3c0>
 8009aa4:	1169      	asrs	r1, r5, #5
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f005 051f 	and.w	r5, r5, #31
 8009aac:	fa03 f505 	lsl.w	r5, r3, r5
 8009ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ab4:	421d      	tst	r5, r3
 8009ab6:	bf18      	it	ne
 8009ab8:	f04f 0801 	movne.w	r8, #1
 8009abc:	f048 0820 	orr.w	r8, r8, #32
 8009ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac2:	601c      	str	r4, [r3, #0]
 8009ac4:	9b02      	ldr	r3, [sp, #8]
 8009ac6:	601e      	str	r6, [r3, #0]
 8009ac8:	e6a2      	b.n	8009810 <__gethex+0x114>
 8009aca:	4290      	cmp	r0, r2
 8009acc:	f842 3c04 	str.w	r3, [r2, #-4]
 8009ad0:	d8d6      	bhi.n	8009a80 <__gethex+0x384>
 8009ad2:	68a2      	ldr	r2, [r4, #8]
 8009ad4:	4593      	cmp	fp, r2
 8009ad6:	db17      	blt.n	8009b08 <__gethex+0x40c>
 8009ad8:	6861      	ldr	r1, [r4, #4]
 8009ada:	4648      	mov	r0, r9
 8009adc:	3101      	adds	r1, #1
 8009ade:	f000 f9c3 	bl	8009e68 <_Balloc>
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	b918      	cbnz	r0, 8009aee <__gethex+0x3f2>
 8009ae6:	4b1b      	ldr	r3, [pc, #108]	; (8009b54 <__gethex+0x458>)
 8009ae8:	4602      	mov	r2, r0
 8009aea:	2184      	movs	r1, #132	; 0x84
 8009aec:	e6b3      	b.n	8009856 <__gethex+0x15a>
 8009aee:	6922      	ldr	r2, [r4, #16]
 8009af0:	3202      	adds	r2, #2
 8009af2:	f104 010c 	add.w	r1, r4, #12
 8009af6:	0092      	lsls	r2, r2, #2
 8009af8:	300c      	adds	r0, #12
 8009afa:	f7ff fd16 	bl	800952a <memcpy>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4648      	mov	r0, r9
 8009b02:	f000 f9f1 	bl	8009ee8 <_Bfree>
 8009b06:	4654      	mov	r4, sl
 8009b08:	6922      	ldr	r2, [r4, #16]
 8009b0a:	1c51      	adds	r1, r2, #1
 8009b0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b10:	6121      	str	r1, [r4, #16]
 8009b12:	2101      	movs	r1, #1
 8009b14:	6151      	str	r1, [r2, #20]
 8009b16:	e7bc      	b.n	8009a92 <__gethex+0x396>
 8009b18:	6921      	ldr	r1, [r4, #16]
 8009b1a:	4559      	cmp	r1, fp
 8009b1c:	dd0b      	ble.n	8009b36 <__gethex+0x43a>
 8009b1e:	2101      	movs	r1, #1
 8009b20:	4620      	mov	r0, r4
 8009b22:	f7ff fd83 	bl	800962c <rshift>
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	3601      	adds	r6, #1
 8009b2a:	42b3      	cmp	r3, r6
 8009b2c:	f6ff aedb 	blt.w	80098e6 <__gethex+0x1ea>
 8009b30:	f04f 0801 	mov.w	r8, #1
 8009b34:	e7c2      	b.n	8009abc <__gethex+0x3c0>
 8009b36:	f015 051f 	ands.w	r5, r5, #31
 8009b3a:	d0f9      	beq.n	8009b30 <__gethex+0x434>
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	441a      	add	r2, r3
 8009b40:	f1c5 0520 	rsb	r5, r5, #32
 8009b44:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009b48:	f000 fa80 	bl	800a04c <__hi0bits>
 8009b4c:	42a8      	cmp	r0, r5
 8009b4e:	dbe6      	blt.n	8009b1e <__gethex+0x422>
 8009b50:	e7ee      	b.n	8009b30 <__gethex+0x434>
 8009b52:	bf00      	nop
 8009b54:	0800b8c6 	.word	0x0800b8c6

08009b58 <L_shift>:
 8009b58:	f1c2 0208 	rsb	r2, r2, #8
 8009b5c:	0092      	lsls	r2, r2, #2
 8009b5e:	b570      	push	{r4, r5, r6, lr}
 8009b60:	f1c2 0620 	rsb	r6, r2, #32
 8009b64:	6843      	ldr	r3, [r0, #4]
 8009b66:	6804      	ldr	r4, [r0, #0]
 8009b68:	fa03 f506 	lsl.w	r5, r3, r6
 8009b6c:	432c      	orrs	r4, r5
 8009b6e:	40d3      	lsrs	r3, r2
 8009b70:	6004      	str	r4, [r0, #0]
 8009b72:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b76:	4288      	cmp	r0, r1
 8009b78:	d3f4      	bcc.n	8009b64 <L_shift+0xc>
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}

08009b7c <__match>:
 8009b7c:	b530      	push	{r4, r5, lr}
 8009b7e:	6803      	ldr	r3, [r0, #0]
 8009b80:	3301      	adds	r3, #1
 8009b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b86:	b914      	cbnz	r4, 8009b8e <__match+0x12>
 8009b88:	6003      	str	r3, [r0, #0]
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	bd30      	pop	{r4, r5, pc}
 8009b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b96:	2d19      	cmp	r5, #25
 8009b98:	bf98      	it	ls
 8009b9a:	3220      	addls	r2, #32
 8009b9c:	42a2      	cmp	r2, r4
 8009b9e:	d0f0      	beq.n	8009b82 <__match+0x6>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e7f3      	b.n	8009b8c <__match+0x10>

08009ba4 <__hexnan>:
 8009ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba8:	680b      	ldr	r3, [r1, #0]
 8009baa:	6801      	ldr	r1, [r0, #0]
 8009bac:	115e      	asrs	r6, r3, #5
 8009bae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009bb2:	f013 031f 	ands.w	r3, r3, #31
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	bf18      	it	ne
 8009bba:	3604      	addne	r6, #4
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	1f37      	subs	r7, r6, #4
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	4690      	mov	r8, r2
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009bca:	46b9      	mov	r9, r7
 8009bcc:	463c      	mov	r4, r7
 8009bce:	9502      	str	r5, [sp, #8]
 8009bd0:	46ab      	mov	fp, r5
 8009bd2:	784a      	ldrb	r2, [r1, #1]
 8009bd4:	1c4b      	adds	r3, r1, #1
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	b342      	cbz	r2, 8009c2c <__hexnan+0x88>
 8009bda:	4610      	mov	r0, r2
 8009bdc:	9105      	str	r1, [sp, #20]
 8009bde:	9204      	str	r2, [sp, #16]
 8009be0:	f7ff fd76 	bl	80096d0 <__hexdig_fun>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d14f      	bne.n	8009c88 <__hexnan+0xe4>
 8009be8:	9a04      	ldr	r2, [sp, #16]
 8009bea:	9905      	ldr	r1, [sp, #20]
 8009bec:	2a20      	cmp	r2, #32
 8009bee:	d818      	bhi.n	8009c22 <__hexnan+0x7e>
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	459b      	cmp	fp, r3
 8009bf4:	dd13      	ble.n	8009c1e <__hexnan+0x7a>
 8009bf6:	454c      	cmp	r4, r9
 8009bf8:	d206      	bcs.n	8009c08 <__hexnan+0x64>
 8009bfa:	2d07      	cmp	r5, #7
 8009bfc:	dc04      	bgt.n	8009c08 <__hexnan+0x64>
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4649      	mov	r1, r9
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff ffa8 	bl	8009b58 <L_shift>
 8009c08:	4544      	cmp	r4, r8
 8009c0a:	d950      	bls.n	8009cae <__hexnan+0x10a>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f1a4 0904 	sub.w	r9, r4, #4
 8009c12:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c16:	f8cd b008 	str.w	fp, [sp, #8]
 8009c1a:	464c      	mov	r4, r9
 8009c1c:	461d      	mov	r5, r3
 8009c1e:	9903      	ldr	r1, [sp, #12]
 8009c20:	e7d7      	b.n	8009bd2 <__hexnan+0x2e>
 8009c22:	2a29      	cmp	r2, #41	; 0x29
 8009c24:	d155      	bne.n	8009cd2 <__hexnan+0x12e>
 8009c26:	3102      	adds	r1, #2
 8009c28:	f8ca 1000 	str.w	r1, [sl]
 8009c2c:	f1bb 0f00 	cmp.w	fp, #0
 8009c30:	d04f      	beq.n	8009cd2 <__hexnan+0x12e>
 8009c32:	454c      	cmp	r4, r9
 8009c34:	d206      	bcs.n	8009c44 <__hexnan+0xa0>
 8009c36:	2d07      	cmp	r5, #7
 8009c38:	dc04      	bgt.n	8009c44 <__hexnan+0xa0>
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7ff ff8a 	bl	8009b58 <L_shift>
 8009c44:	4544      	cmp	r4, r8
 8009c46:	d934      	bls.n	8009cb2 <__hexnan+0x10e>
 8009c48:	f1a8 0204 	sub.w	r2, r8, #4
 8009c4c:	4623      	mov	r3, r4
 8009c4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c52:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c56:	429f      	cmp	r7, r3
 8009c58:	d2f9      	bcs.n	8009c4e <__hexnan+0xaa>
 8009c5a:	1b3b      	subs	r3, r7, r4
 8009c5c:	f023 0303 	bic.w	r3, r3, #3
 8009c60:	3304      	adds	r3, #4
 8009c62:	3e03      	subs	r6, #3
 8009c64:	3401      	adds	r4, #1
 8009c66:	42a6      	cmp	r6, r4
 8009c68:	bf38      	it	cc
 8009c6a:	2304      	movcc	r3, #4
 8009c6c:	4443      	add	r3, r8
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f843 2b04 	str.w	r2, [r3], #4
 8009c74:	429f      	cmp	r7, r3
 8009c76:	d2fb      	bcs.n	8009c70 <__hexnan+0xcc>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	b91b      	cbnz	r3, 8009c84 <__hexnan+0xe0>
 8009c7c:	4547      	cmp	r7, r8
 8009c7e:	d126      	bne.n	8009cce <__hexnan+0x12a>
 8009c80:	2301      	movs	r3, #1
 8009c82:	603b      	str	r3, [r7, #0]
 8009c84:	2005      	movs	r0, #5
 8009c86:	e025      	b.n	8009cd4 <__hexnan+0x130>
 8009c88:	3501      	adds	r5, #1
 8009c8a:	2d08      	cmp	r5, #8
 8009c8c:	f10b 0b01 	add.w	fp, fp, #1
 8009c90:	dd06      	ble.n	8009ca0 <__hexnan+0xfc>
 8009c92:	4544      	cmp	r4, r8
 8009c94:	d9c3      	bls.n	8009c1e <__hexnan+0x7a>
 8009c96:	2300      	movs	r3, #0
 8009c98:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c9c:	2501      	movs	r5, #1
 8009c9e:	3c04      	subs	r4, #4
 8009ca0:	6822      	ldr	r2, [r4, #0]
 8009ca2:	f000 000f 	and.w	r0, r0, #15
 8009ca6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009caa:	6020      	str	r0, [r4, #0]
 8009cac:	e7b7      	b.n	8009c1e <__hexnan+0x7a>
 8009cae:	2508      	movs	r5, #8
 8009cb0:	e7b5      	b.n	8009c1e <__hexnan+0x7a>
 8009cb2:	9b01      	ldr	r3, [sp, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0df      	beq.n	8009c78 <__hexnan+0xd4>
 8009cb8:	f1c3 0320 	rsb	r3, r3, #32
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	40da      	lsrs	r2, r3
 8009cc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ccc:	e7d4      	b.n	8009c78 <__hexnan+0xd4>
 8009cce:	3f04      	subs	r7, #4
 8009cd0:	e7d2      	b.n	8009c78 <__hexnan+0xd4>
 8009cd2:	2004      	movs	r0, #4
 8009cd4:	b007      	add	sp, #28
 8009cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009cdc <malloc>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <malloc+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f000 b823 	b.w	8009d2c <_malloc_r>
 8009ce6:	bf00      	nop
 8009ce8:	200001d8 	.word	0x200001d8

08009cec <sbrk_aligned>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4e0e      	ldr	r6, [pc, #56]	; (8009d28 <sbrk_aligned+0x3c>)
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	6831      	ldr	r1, [r6, #0]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	b911      	cbnz	r1, 8009cfe <sbrk_aligned+0x12>
 8009cf8:	f001 f932 	bl	800af60 <_sbrk_r>
 8009cfc:	6030      	str	r0, [r6, #0]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4628      	mov	r0, r5
 8009d02:	f001 f92d 	bl	800af60 <_sbrk_r>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d00a      	beq.n	8009d20 <sbrk_aligned+0x34>
 8009d0a:	1cc4      	adds	r4, r0, #3
 8009d0c:	f024 0403 	bic.w	r4, r4, #3
 8009d10:	42a0      	cmp	r0, r4
 8009d12:	d007      	beq.n	8009d24 <sbrk_aligned+0x38>
 8009d14:	1a21      	subs	r1, r4, r0
 8009d16:	4628      	mov	r0, r5
 8009d18:	f001 f922 	bl	800af60 <_sbrk_r>
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d101      	bne.n	8009d24 <sbrk_aligned+0x38>
 8009d20:	f04f 34ff 	mov.w	r4, #4294967295
 8009d24:	4620      	mov	r0, r4
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	20001f38 	.word	0x20001f38

08009d2c <_malloc_r>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	1ccd      	adds	r5, r1, #3
 8009d32:	f025 0503 	bic.w	r5, r5, #3
 8009d36:	3508      	adds	r5, #8
 8009d38:	2d0c      	cmp	r5, #12
 8009d3a:	bf38      	it	cc
 8009d3c:	250c      	movcc	r5, #12
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	4607      	mov	r7, r0
 8009d42:	db01      	blt.n	8009d48 <_malloc_r+0x1c>
 8009d44:	42a9      	cmp	r1, r5
 8009d46:	d905      	bls.n	8009d54 <_malloc_r+0x28>
 8009d48:	230c      	movs	r3, #12
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	4630      	mov	r0, r6
 8009d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e28 <_malloc_r+0xfc>
 8009d58:	f000 f87a 	bl	8009e50 <__malloc_lock>
 8009d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d60:	461c      	mov	r4, r3
 8009d62:	bb5c      	cbnz	r4, 8009dbc <_malloc_r+0x90>
 8009d64:	4629      	mov	r1, r5
 8009d66:	4638      	mov	r0, r7
 8009d68:	f7ff ffc0 	bl	8009cec <sbrk_aligned>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	4604      	mov	r4, r0
 8009d70:	d155      	bne.n	8009e1e <_malloc_r+0xf2>
 8009d72:	f8d8 4000 	ldr.w	r4, [r8]
 8009d76:	4626      	mov	r6, r4
 8009d78:	2e00      	cmp	r6, #0
 8009d7a:	d145      	bne.n	8009e08 <_malloc_r+0xdc>
 8009d7c:	2c00      	cmp	r4, #0
 8009d7e:	d048      	beq.n	8009e12 <_malloc_r+0xe6>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	4631      	mov	r1, r6
 8009d84:	4638      	mov	r0, r7
 8009d86:	eb04 0903 	add.w	r9, r4, r3
 8009d8a:	f001 f8e9 	bl	800af60 <_sbrk_r>
 8009d8e:	4581      	cmp	r9, r0
 8009d90:	d13f      	bne.n	8009e12 <_malloc_r+0xe6>
 8009d92:	6821      	ldr	r1, [r4, #0]
 8009d94:	1a6d      	subs	r5, r5, r1
 8009d96:	4629      	mov	r1, r5
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f7ff ffa7 	bl	8009cec <sbrk_aligned>
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d037      	beq.n	8009e12 <_malloc_r+0xe6>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	442b      	add	r3, r5
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d038      	beq.n	8009e22 <_malloc_r+0xf6>
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	42a2      	cmp	r2, r4
 8009db4:	d12b      	bne.n	8009e0e <_malloc_r+0xe2>
 8009db6:	2200      	movs	r2, #0
 8009db8:	605a      	str	r2, [r3, #4]
 8009dba:	e00f      	b.n	8009ddc <_malloc_r+0xb0>
 8009dbc:	6822      	ldr	r2, [r4, #0]
 8009dbe:	1b52      	subs	r2, r2, r5
 8009dc0:	d41f      	bmi.n	8009e02 <_malloc_r+0xd6>
 8009dc2:	2a0b      	cmp	r2, #11
 8009dc4:	d917      	bls.n	8009df6 <_malloc_r+0xca>
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	6025      	str	r5, [r4, #0]
 8009dcc:	bf18      	it	ne
 8009dce:	6059      	strne	r1, [r3, #4]
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	bf08      	it	eq
 8009dd4:	f8c8 1000 	streq.w	r1, [r8]
 8009dd8:	5162      	str	r2, [r4, r5]
 8009dda:	604b      	str	r3, [r1, #4]
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f104 060b 	add.w	r6, r4, #11
 8009de2:	f000 f83b 	bl	8009e5c <__malloc_unlock>
 8009de6:	f026 0607 	bic.w	r6, r6, #7
 8009dea:	1d23      	adds	r3, r4, #4
 8009dec:	1af2      	subs	r2, r6, r3
 8009dee:	d0ae      	beq.n	8009d4e <_malloc_r+0x22>
 8009df0:	1b9b      	subs	r3, r3, r6
 8009df2:	50a3      	str	r3, [r4, r2]
 8009df4:	e7ab      	b.n	8009d4e <_malloc_r+0x22>
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	6862      	ldr	r2, [r4, #4]
 8009dfa:	d1dd      	bne.n	8009db8 <_malloc_r+0x8c>
 8009dfc:	f8c8 2000 	str.w	r2, [r8]
 8009e00:	e7ec      	b.n	8009ddc <_malloc_r+0xb0>
 8009e02:	4623      	mov	r3, r4
 8009e04:	6864      	ldr	r4, [r4, #4]
 8009e06:	e7ac      	b.n	8009d62 <_malloc_r+0x36>
 8009e08:	4634      	mov	r4, r6
 8009e0a:	6876      	ldr	r6, [r6, #4]
 8009e0c:	e7b4      	b.n	8009d78 <_malloc_r+0x4c>
 8009e0e:	4613      	mov	r3, r2
 8009e10:	e7cc      	b.n	8009dac <_malloc_r+0x80>
 8009e12:	230c      	movs	r3, #12
 8009e14:	603b      	str	r3, [r7, #0]
 8009e16:	4638      	mov	r0, r7
 8009e18:	f000 f820 	bl	8009e5c <__malloc_unlock>
 8009e1c:	e797      	b.n	8009d4e <_malloc_r+0x22>
 8009e1e:	6025      	str	r5, [r4, #0]
 8009e20:	e7dc      	b.n	8009ddc <_malloc_r+0xb0>
 8009e22:	605b      	str	r3, [r3, #4]
 8009e24:	deff      	udf	#255	; 0xff
 8009e26:	bf00      	nop
 8009e28:	20001f34 	.word	0x20001f34

08009e2c <__ascii_mbtowc>:
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	b901      	cbnz	r1, 8009e32 <__ascii_mbtowc+0x6>
 8009e30:	a901      	add	r1, sp, #4
 8009e32:	b142      	cbz	r2, 8009e46 <__ascii_mbtowc+0x1a>
 8009e34:	b14b      	cbz	r3, 8009e4a <__ascii_mbtowc+0x1e>
 8009e36:	7813      	ldrb	r3, [r2, #0]
 8009e38:	600b      	str	r3, [r1, #0]
 8009e3a:	7812      	ldrb	r2, [r2, #0]
 8009e3c:	1e10      	subs	r0, r2, #0
 8009e3e:	bf18      	it	ne
 8009e40:	2001      	movne	r0, #1
 8009e42:	b002      	add	sp, #8
 8009e44:	4770      	bx	lr
 8009e46:	4610      	mov	r0, r2
 8009e48:	e7fb      	b.n	8009e42 <__ascii_mbtowc+0x16>
 8009e4a:	f06f 0001 	mvn.w	r0, #1
 8009e4e:	e7f8      	b.n	8009e42 <__ascii_mbtowc+0x16>

08009e50 <__malloc_lock>:
 8009e50:	4801      	ldr	r0, [pc, #4]	; (8009e58 <__malloc_lock+0x8>)
 8009e52:	f7ff bb68 	b.w	8009526 <__retarget_lock_acquire_recursive>
 8009e56:	bf00      	nop
 8009e58:	20001f30 	.word	0x20001f30

08009e5c <__malloc_unlock>:
 8009e5c:	4801      	ldr	r0, [pc, #4]	; (8009e64 <__malloc_unlock+0x8>)
 8009e5e:	f7ff bb63 	b.w	8009528 <__retarget_lock_release_recursive>
 8009e62:	bf00      	nop
 8009e64:	20001f30 	.word	0x20001f30

08009e68 <_Balloc>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	69c6      	ldr	r6, [r0, #28]
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	b976      	cbnz	r6, 8009e90 <_Balloc+0x28>
 8009e72:	2010      	movs	r0, #16
 8009e74:	f7ff ff32 	bl	8009cdc <malloc>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	61e0      	str	r0, [r4, #28]
 8009e7c:	b920      	cbnz	r0, 8009e88 <_Balloc+0x20>
 8009e7e:	4b18      	ldr	r3, [pc, #96]	; (8009ee0 <_Balloc+0x78>)
 8009e80:	4818      	ldr	r0, [pc, #96]	; (8009ee4 <_Balloc+0x7c>)
 8009e82:	216b      	movs	r1, #107	; 0x6b
 8009e84:	f7ff fb68 	bl	8009558 <__assert_func>
 8009e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e8c:	6006      	str	r6, [r0, #0]
 8009e8e:	60c6      	str	r6, [r0, #12]
 8009e90:	69e6      	ldr	r6, [r4, #28]
 8009e92:	68f3      	ldr	r3, [r6, #12]
 8009e94:	b183      	cbz	r3, 8009eb8 <_Balloc+0x50>
 8009e96:	69e3      	ldr	r3, [r4, #28]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e9e:	b9b8      	cbnz	r0, 8009ed0 <_Balloc+0x68>
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ea6:	1d72      	adds	r2, r6, #5
 8009ea8:	0092      	lsls	r2, r2, #2
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f001 f86f 	bl	800af8e <_calloc_r>
 8009eb0:	b160      	cbz	r0, 8009ecc <_Balloc+0x64>
 8009eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eb6:	e00e      	b.n	8009ed6 <_Balloc+0x6e>
 8009eb8:	2221      	movs	r2, #33	; 0x21
 8009eba:	2104      	movs	r1, #4
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f001 f866 	bl	800af8e <_calloc_r>
 8009ec2:	69e3      	ldr	r3, [r4, #28]
 8009ec4:	60f0      	str	r0, [r6, #12]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e4      	bne.n	8009e96 <_Balloc+0x2e>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	6802      	ldr	r2, [r0, #0]
 8009ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009edc:	e7f7      	b.n	8009ece <_Balloc+0x66>
 8009ede:	bf00      	nop
 8009ee0:	0800b811 	.word	0x0800b811
 8009ee4:	0800b937 	.word	0x0800b937

08009ee8 <_Bfree>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	69c6      	ldr	r6, [r0, #28]
 8009eec:	4605      	mov	r5, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	b976      	cbnz	r6, 8009f10 <_Bfree+0x28>
 8009ef2:	2010      	movs	r0, #16
 8009ef4:	f7ff fef2 	bl	8009cdc <malloc>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	61e8      	str	r0, [r5, #28]
 8009efc:	b920      	cbnz	r0, 8009f08 <_Bfree+0x20>
 8009efe:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <_Bfree+0x3c>)
 8009f00:	4809      	ldr	r0, [pc, #36]	; (8009f28 <_Bfree+0x40>)
 8009f02:	218f      	movs	r1, #143	; 0x8f
 8009f04:	f7ff fb28 	bl	8009558 <__assert_func>
 8009f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f0c:	6006      	str	r6, [r0, #0]
 8009f0e:	60c6      	str	r6, [r0, #12]
 8009f10:	b13c      	cbz	r4, 8009f22 <_Bfree+0x3a>
 8009f12:	69eb      	ldr	r3, [r5, #28]
 8009f14:	6862      	ldr	r2, [r4, #4]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f1c:	6021      	str	r1, [r4, #0]
 8009f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	0800b811 	.word	0x0800b811
 8009f28:	0800b937 	.word	0x0800b937

08009f2c <__multadd>:
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	690d      	ldr	r5, [r1, #16]
 8009f32:	4607      	mov	r7, r0
 8009f34:	460c      	mov	r4, r1
 8009f36:	461e      	mov	r6, r3
 8009f38:	f101 0c14 	add.w	ip, r1, #20
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f42:	b299      	uxth	r1, r3
 8009f44:	fb02 6101 	mla	r1, r2, r1, r6
 8009f48:	0c1e      	lsrs	r6, r3, #16
 8009f4a:	0c0b      	lsrs	r3, r1, #16
 8009f4c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f50:	b289      	uxth	r1, r1
 8009f52:	3001      	adds	r0, #1
 8009f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f58:	4285      	cmp	r5, r0
 8009f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f62:	dcec      	bgt.n	8009f3e <__multadd+0x12>
 8009f64:	b30e      	cbz	r6, 8009faa <__multadd+0x7e>
 8009f66:	68a3      	ldr	r3, [r4, #8]
 8009f68:	42ab      	cmp	r3, r5
 8009f6a:	dc19      	bgt.n	8009fa0 <__multadd+0x74>
 8009f6c:	6861      	ldr	r1, [r4, #4]
 8009f6e:	4638      	mov	r0, r7
 8009f70:	3101      	adds	r1, #1
 8009f72:	f7ff ff79 	bl	8009e68 <_Balloc>
 8009f76:	4680      	mov	r8, r0
 8009f78:	b928      	cbnz	r0, 8009f86 <__multadd+0x5a>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <__multadd+0x84>)
 8009f7e:	480d      	ldr	r0, [pc, #52]	; (8009fb4 <__multadd+0x88>)
 8009f80:	21ba      	movs	r1, #186	; 0xba
 8009f82:	f7ff fae9 	bl	8009558 <__assert_func>
 8009f86:	6922      	ldr	r2, [r4, #16]
 8009f88:	3202      	adds	r2, #2
 8009f8a:	f104 010c 	add.w	r1, r4, #12
 8009f8e:	0092      	lsls	r2, r2, #2
 8009f90:	300c      	adds	r0, #12
 8009f92:	f7ff faca 	bl	800952a <memcpy>
 8009f96:	4621      	mov	r1, r4
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff ffa5 	bl	8009ee8 <_Bfree>
 8009f9e:	4644      	mov	r4, r8
 8009fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	615e      	str	r6, [r3, #20]
 8009fa8:	6125      	str	r5, [r4, #16]
 8009faa:	4620      	mov	r0, r4
 8009fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb0:	0800b8c6 	.word	0x0800b8c6
 8009fb4:	0800b937 	.word	0x0800b937

08009fb8 <__s2b>:
 8009fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	4615      	mov	r5, r2
 8009fc0:	461f      	mov	r7, r3
 8009fc2:	2209      	movs	r2, #9
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fcc:	2100      	movs	r1, #0
 8009fce:	2201      	movs	r2, #1
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	db09      	blt.n	8009fe8 <__s2b+0x30>
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7ff ff47 	bl	8009e68 <_Balloc>
 8009fda:	b940      	cbnz	r0, 8009fee <__s2b+0x36>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	4b19      	ldr	r3, [pc, #100]	; (800a044 <__s2b+0x8c>)
 8009fe0:	4819      	ldr	r0, [pc, #100]	; (800a048 <__s2b+0x90>)
 8009fe2:	21d3      	movs	r1, #211	; 0xd3
 8009fe4:	f7ff fab8 	bl	8009558 <__assert_func>
 8009fe8:	0052      	lsls	r2, r2, #1
 8009fea:	3101      	adds	r1, #1
 8009fec:	e7f0      	b.n	8009fd0 <__s2b+0x18>
 8009fee:	9b08      	ldr	r3, [sp, #32]
 8009ff0:	6143      	str	r3, [r0, #20]
 8009ff2:	2d09      	cmp	r5, #9
 8009ff4:	f04f 0301 	mov.w	r3, #1
 8009ff8:	6103      	str	r3, [r0, #16]
 8009ffa:	dd16      	ble.n	800a02a <__s2b+0x72>
 8009ffc:	f104 0909 	add.w	r9, r4, #9
 800a000:	46c8      	mov	r8, r9
 800a002:	442c      	add	r4, r5
 800a004:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a008:	4601      	mov	r1, r0
 800a00a:	3b30      	subs	r3, #48	; 0x30
 800a00c:	220a      	movs	r2, #10
 800a00e:	4630      	mov	r0, r6
 800a010:	f7ff ff8c 	bl	8009f2c <__multadd>
 800a014:	45a0      	cmp	r8, r4
 800a016:	d1f5      	bne.n	800a004 <__s2b+0x4c>
 800a018:	f1a5 0408 	sub.w	r4, r5, #8
 800a01c:	444c      	add	r4, r9
 800a01e:	1b2d      	subs	r5, r5, r4
 800a020:	1963      	adds	r3, r4, r5
 800a022:	42bb      	cmp	r3, r7
 800a024:	db04      	blt.n	800a030 <__s2b+0x78>
 800a026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a02a:	340a      	adds	r4, #10
 800a02c:	2509      	movs	r5, #9
 800a02e:	e7f6      	b.n	800a01e <__s2b+0x66>
 800a030:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a034:	4601      	mov	r1, r0
 800a036:	3b30      	subs	r3, #48	; 0x30
 800a038:	220a      	movs	r2, #10
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ff76 	bl	8009f2c <__multadd>
 800a040:	e7ee      	b.n	800a020 <__s2b+0x68>
 800a042:	bf00      	nop
 800a044:	0800b8c6 	.word	0x0800b8c6
 800a048:	0800b937 	.word	0x0800b937

0800a04c <__hi0bits>:
 800a04c:	0c03      	lsrs	r3, r0, #16
 800a04e:	041b      	lsls	r3, r3, #16
 800a050:	b9d3      	cbnz	r3, 800a088 <__hi0bits+0x3c>
 800a052:	0400      	lsls	r0, r0, #16
 800a054:	2310      	movs	r3, #16
 800a056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a05a:	bf04      	itt	eq
 800a05c:	0200      	lsleq	r0, r0, #8
 800a05e:	3308      	addeq	r3, #8
 800a060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a064:	bf04      	itt	eq
 800a066:	0100      	lsleq	r0, r0, #4
 800a068:	3304      	addeq	r3, #4
 800a06a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a06e:	bf04      	itt	eq
 800a070:	0080      	lsleq	r0, r0, #2
 800a072:	3302      	addeq	r3, #2
 800a074:	2800      	cmp	r0, #0
 800a076:	db05      	blt.n	800a084 <__hi0bits+0x38>
 800a078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a07c:	f103 0301 	add.w	r3, r3, #1
 800a080:	bf08      	it	eq
 800a082:	2320      	moveq	r3, #32
 800a084:	4618      	mov	r0, r3
 800a086:	4770      	bx	lr
 800a088:	2300      	movs	r3, #0
 800a08a:	e7e4      	b.n	800a056 <__hi0bits+0xa>

0800a08c <__lo0bits>:
 800a08c:	6803      	ldr	r3, [r0, #0]
 800a08e:	f013 0207 	ands.w	r2, r3, #7
 800a092:	d00c      	beq.n	800a0ae <__lo0bits+0x22>
 800a094:	07d9      	lsls	r1, r3, #31
 800a096:	d422      	bmi.n	800a0de <__lo0bits+0x52>
 800a098:	079a      	lsls	r2, r3, #30
 800a09a:	bf49      	itett	mi
 800a09c:	085b      	lsrmi	r3, r3, #1
 800a09e:	089b      	lsrpl	r3, r3, #2
 800a0a0:	6003      	strmi	r3, [r0, #0]
 800a0a2:	2201      	movmi	r2, #1
 800a0a4:	bf5c      	itt	pl
 800a0a6:	6003      	strpl	r3, [r0, #0]
 800a0a8:	2202      	movpl	r2, #2
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4770      	bx	lr
 800a0ae:	b299      	uxth	r1, r3
 800a0b0:	b909      	cbnz	r1, 800a0b6 <__lo0bits+0x2a>
 800a0b2:	0c1b      	lsrs	r3, r3, #16
 800a0b4:	2210      	movs	r2, #16
 800a0b6:	b2d9      	uxtb	r1, r3
 800a0b8:	b909      	cbnz	r1, 800a0be <__lo0bits+0x32>
 800a0ba:	3208      	adds	r2, #8
 800a0bc:	0a1b      	lsrs	r3, r3, #8
 800a0be:	0719      	lsls	r1, r3, #28
 800a0c0:	bf04      	itt	eq
 800a0c2:	091b      	lsreq	r3, r3, #4
 800a0c4:	3204      	addeq	r2, #4
 800a0c6:	0799      	lsls	r1, r3, #30
 800a0c8:	bf04      	itt	eq
 800a0ca:	089b      	lsreq	r3, r3, #2
 800a0cc:	3202      	addeq	r2, #2
 800a0ce:	07d9      	lsls	r1, r3, #31
 800a0d0:	d403      	bmi.n	800a0da <__lo0bits+0x4e>
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	f102 0201 	add.w	r2, r2, #1
 800a0d8:	d003      	beq.n	800a0e2 <__lo0bits+0x56>
 800a0da:	6003      	str	r3, [r0, #0]
 800a0dc:	e7e5      	b.n	800a0aa <__lo0bits+0x1e>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	e7e3      	b.n	800a0aa <__lo0bits+0x1e>
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	e7e1      	b.n	800a0aa <__lo0bits+0x1e>
	...

0800a0e8 <__i2b>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	f7ff febb 	bl	8009e68 <_Balloc>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	b928      	cbnz	r0, 800a102 <__i2b+0x1a>
 800a0f6:	4b05      	ldr	r3, [pc, #20]	; (800a10c <__i2b+0x24>)
 800a0f8:	4805      	ldr	r0, [pc, #20]	; (800a110 <__i2b+0x28>)
 800a0fa:	f240 1145 	movw	r1, #325	; 0x145
 800a0fe:	f7ff fa2b 	bl	8009558 <__assert_func>
 800a102:	2301      	movs	r3, #1
 800a104:	6144      	str	r4, [r0, #20]
 800a106:	6103      	str	r3, [r0, #16]
 800a108:	bd10      	pop	{r4, pc}
 800a10a:	bf00      	nop
 800a10c:	0800b8c6 	.word	0x0800b8c6
 800a110:	0800b937 	.word	0x0800b937

0800a114 <__multiply>:
 800a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	4691      	mov	r9, r2
 800a11a:	690a      	ldr	r2, [r1, #16]
 800a11c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a120:	429a      	cmp	r2, r3
 800a122:	bfb8      	it	lt
 800a124:	460b      	movlt	r3, r1
 800a126:	460c      	mov	r4, r1
 800a128:	bfbc      	itt	lt
 800a12a:	464c      	movlt	r4, r9
 800a12c:	4699      	movlt	r9, r3
 800a12e:	6927      	ldr	r7, [r4, #16]
 800a130:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a134:	68a3      	ldr	r3, [r4, #8]
 800a136:	6861      	ldr	r1, [r4, #4]
 800a138:	eb07 060a 	add.w	r6, r7, sl
 800a13c:	42b3      	cmp	r3, r6
 800a13e:	b085      	sub	sp, #20
 800a140:	bfb8      	it	lt
 800a142:	3101      	addlt	r1, #1
 800a144:	f7ff fe90 	bl	8009e68 <_Balloc>
 800a148:	b930      	cbnz	r0, 800a158 <__multiply+0x44>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4b44      	ldr	r3, [pc, #272]	; (800a260 <__multiply+0x14c>)
 800a14e:	4845      	ldr	r0, [pc, #276]	; (800a264 <__multiply+0x150>)
 800a150:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a154:	f7ff fa00 	bl	8009558 <__assert_func>
 800a158:	f100 0514 	add.w	r5, r0, #20
 800a15c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a160:	462b      	mov	r3, r5
 800a162:	2200      	movs	r2, #0
 800a164:	4543      	cmp	r3, r8
 800a166:	d321      	bcc.n	800a1ac <__multiply+0x98>
 800a168:	f104 0314 	add.w	r3, r4, #20
 800a16c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a170:	f109 0314 	add.w	r3, r9, #20
 800a174:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a178:	9202      	str	r2, [sp, #8]
 800a17a:	1b3a      	subs	r2, r7, r4
 800a17c:	3a15      	subs	r2, #21
 800a17e:	f022 0203 	bic.w	r2, r2, #3
 800a182:	3204      	adds	r2, #4
 800a184:	f104 0115 	add.w	r1, r4, #21
 800a188:	428f      	cmp	r7, r1
 800a18a:	bf38      	it	cc
 800a18c:	2204      	movcc	r2, #4
 800a18e:	9201      	str	r2, [sp, #4]
 800a190:	9a02      	ldr	r2, [sp, #8]
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	429a      	cmp	r2, r3
 800a196:	d80c      	bhi.n	800a1b2 <__multiply+0x9e>
 800a198:	2e00      	cmp	r6, #0
 800a19a:	dd03      	ble.n	800a1a4 <__multiply+0x90>
 800a19c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d05b      	beq.n	800a25c <__multiply+0x148>
 800a1a4:	6106      	str	r6, [r0, #16]
 800a1a6:	b005      	add	sp, #20
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	f843 2b04 	str.w	r2, [r3], #4
 800a1b0:	e7d8      	b.n	800a164 <__multiply+0x50>
 800a1b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1b6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ba:	d024      	beq.n	800a206 <__multiply+0xf2>
 800a1bc:	f104 0e14 	add.w	lr, r4, #20
 800a1c0:	46a9      	mov	r9, r5
 800a1c2:	f04f 0c00 	mov.w	ip, #0
 800a1c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1ca:	f8d9 1000 	ldr.w	r1, [r9]
 800a1ce:	fa1f fb82 	uxth.w	fp, r2
 800a1d2:	b289      	uxth	r1, r1
 800a1d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1dc:	f8d9 2000 	ldr.w	r2, [r9]
 800a1e0:	4461      	add	r1, ip
 800a1e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1ee:	b289      	uxth	r1, r1
 800a1f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1f4:	4577      	cmp	r7, lr
 800a1f6:	f849 1b04 	str.w	r1, [r9], #4
 800a1fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1fe:	d8e2      	bhi.n	800a1c6 <__multiply+0xb2>
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	f845 c002 	str.w	ip, [r5, r2]
 800a206:	9a03      	ldr	r2, [sp, #12]
 800a208:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a20c:	3304      	adds	r3, #4
 800a20e:	f1b9 0f00 	cmp.w	r9, #0
 800a212:	d021      	beq.n	800a258 <__multiply+0x144>
 800a214:	6829      	ldr	r1, [r5, #0]
 800a216:	f104 0c14 	add.w	ip, r4, #20
 800a21a:	46ae      	mov	lr, r5
 800a21c:	f04f 0a00 	mov.w	sl, #0
 800a220:	f8bc b000 	ldrh.w	fp, [ip]
 800a224:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a228:	fb09 220b 	mla	r2, r9, fp, r2
 800a22c:	4452      	add	r2, sl
 800a22e:	b289      	uxth	r1, r1
 800a230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a234:	f84e 1b04 	str.w	r1, [lr], #4
 800a238:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a23c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a240:	f8be 1000 	ldrh.w	r1, [lr]
 800a244:	fb09 110a 	mla	r1, r9, sl, r1
 800a248:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a24c:	4567      	cmp	r7, ip
 800a24e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a252:	d8e5      	bhi.n	800a220 <__multiply+0x10c>
 800a254:	9a01      	ldr	r2, [sp, #4]
 800a256:	50a9      	str	r1, [r5, r2]
 800a258:	3504      	adds	r5, #4
 800a25a:	e799      	b.n	800a190 <__multiply+0x7c>
 800a25c:	3e01      	subs	r6, #1
 800a25e:	e79b      	b.n	800a198 <__multiply+0x84>
 800a260:	0800b8c6 	.word	0x0800b8c6
 800a264:	0800b937 	.word	0x0800b937

0800a268 <__pow5mult>:
 800a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a26c:	4615      	mov	r5, r2
 800a26e:	f012 0203 	ands.w	r2, r2, #3
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	d007      	beq.n	800a288 <__pow5mult+0x20>
 800a278:	4c25      	ldr	r4, [pc, #148]	; (800a310 <__pow5mult+0xa8>)
 800a27a:	3a01      	subs	r2, #1
 800a27c:	2300      	movs	r3, #0
 800a27e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a282:	f7ff fe53 	bl	8009f2c <__multadd>
 800a286:	4607      	mov	r7, r0
 800a288:	10ad      	asrs	r5, r5, #2
 800a28a:	d03d      	beq.n	800a308 <__pow5mult+0xa0>
 800a28c:	69f4      	ldr	r4, [r6, #28]
 800a28e:	b97c      	cbnz	r4, 800a2b0 <__pow5mult+0x48>
 800a290:	2010      	movs	r0, #16
 800a292:	f7ff fd23 	bl	8009cdc <malloc>
 800a296:	4602      	mov	r2, r0
 800a298:	61f0      	str	r0, [r6, #28]
 800a29a:	b928      	cbnz	r0, 800a2a8 <__pow5mult+0x40>
 800a29c:	4b1d      	ldr	r3, [pc, #116]	; (800a314 <__pow5mult+0xac>)
 800a29e:	481e      	ldr	r0, [pc, #120]	; (800a318 <__pow5mult+0xb0>)
 800a2a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a2a4:	f7ff f958 	bl	8009558 <__assert_func>
 800a2a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2ac:	6004      	str	r4, [r0, #0]
 800a2ae:	60c4      	str	r4, [r0, #12]
 800a2b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a2b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b8:	b94c      	cbnz	r4, 800a2ce <__pow5mult+0x66>
 800a2ba:	f240 2171 	movw	r1, #625	; 0x271
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f7ff ff12 	bl	800a0e8 <__i2b>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	6003      	str	r3, [r0, #0]
 800a2ce:	f04f 0900 	mov.w	r9, #0
 800a2d2:	07eb      	lsls	r3, r5, #31
 800a2d4:	d50a      	bpl.n	800a2ec <__pow5mult+0x84>
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	4622      	mov	r2, r4
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ff1a 	bl	800a114 <__multiply>
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7ff fdff 	bl	8009ee8 <_Bfree>
 800a2ea:	4647      	mov	r7, r8
 800a2ec:	106d      	asrs	r5, r5, #1
 800a2ee:	d00b      	beq.n	800a308 <__pow5mult+0xa0>
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	b938      	cbnz	r0, 800a304 <__pow5mult+0x9c>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff ff0b 	bl	800a114 <__multiply>
 800a2fe:	6020      	str	r0, [r4, #0]
 800a300:	f8c0 9000 	str.w	r9, [r0]
 800a304:	4604      	mov	r4, r0
 800a306:	e7e4      	b.n	800a2d2 <__pow5mult+0x6a>
 800a308:	4638      	mov	r0, r7
 800a30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30e:	bf00      	nop
 800a310:	0800ba80 	.word	0x0800ba80
 800a314:	0800b811 	.word	0x0800b811
 800a318:	0800b937 	.word	0x0800b937

0800a31c <__lshift>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	6849      	ldr	r1, [r1, #4]
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a32a:	68a3      	ldr	r3, [r4, #8]
 800a32c:	4607      	mov	r7, r0
 800a32e:	4691      	mov	r9, r2
 800a330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a334:	f108 0601 	add.w	r6, r8, #1
 800a338:	42b3      	cmp	r3, r6
 800a33a:	db0b      	blt.n	800a354 <__lshift+0x38>
 800a33c:	4638      	mov	r0, r7
 800a33e:	f7ff fd93 	bl	8009e68 <_Balloc>
 800a342:	4605      	mov	r5, r0
 800a344:	b948      	cbnz	r0, 800a35a <__lshift+0x3e>
 800a346:	4602      	mov	r2, r0
 800a348:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <__lshift+0xd0>)
 800a34a:	4829      	ldr	r0, [pc, #164]	; (800a3f0 <__lshift+0xd4>)
 800a34c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a350:	f7ff f902 	bl	8009558 <__assert_func>
 800a354:	3101      	adds	r1, #1
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	e7ee      	b.n	800a338 <__lshift+0x1c>
 800a35a:	2300      	movs	r3, #0
 800a35c:	f100 0114 	add.w	r1, r0, #20
 800a360:	f100 0210 	add.w	r2, r0, #16
 800a364:	4618      	mov	r0, r3
 800a366:	4553      	cmp	r3, sl
 800a368:	db33      	blt.n	800a3d2 <__lshift+0xb6>
 800a36a:	6920      	ldr	r0, [r4, #16]
 800a36c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a370:	f104 0314 	add.w	r3, r4, #20
 800a374:	f019 091f 	ands.w	r9, r9, #31
 800a378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a37c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a380:	d02b      	beq.n	800a3da <__lshift+0xbe>
 800a382:	f1c9 0e20 	rsb	lr, r9, #32
 800a386:	468a      	mov	sl, r1
 800a388:	2200      	movs	r2, #0
 800a38a:	6818      	ldr	r0, [r3, #0]
 800a38c:	fa00 f009 	lsl.w	r0, r0, r9
 800a390:	4310      	orrs	r0, r2
 800a392:	f84a 0b04 	str.w	r0, [sl], #4
 800a396:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39a:	459c      	cmp	ip, r3
 800a39c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3a0:	d8f3      	bhi.n	800a38a <__lshift+0x6e>
 800a3a2:	ebac 0304 	sub.w	r3, ip, r4
 800a3a6:	3b15      	subs	r3, #21
 800a3a8:	f023 0303 	bic.w	r3, r3, #3
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	f104 0015 	add.w	r0, r4, #21
 800a3b2:	4584      	cmp	ip, r0
 800a3b4:	bf38      	it	cc
 800a3b6:	2304      	movcc	r3, #4
 800a3b8:	50ca      	str	r2, [r1, r3]
 800a3ba:	b10a      	cbz	r2, 800a3c0 <__lshift+0xa4>
 800a3bc:	f108 0602 	add.w	r6, r8, #2
 800a3c0:	3e01      	subs	r6, #1
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	612e      	str	r6, [r5, #16]
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f7ff fd8e 	bl	8009ee8 <_Bfree>
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	e7c5      	b.n	800a366 <__lshift+0x4a>
 800a3da:	3904      	subs	r1, #4
 800a3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3e4:	459c      	cmp	ip, r3
 800a3e6:	d8f9      	bhi.n	800a3dc <__lshift+0xc0>
 800a3e8:	e7ea      	b.n	800a3c0 <__lshift+0xa4>
 800a3ea:	bf00      	nop
 800a3ec:	0800b8c6 	.word	0x0800b8c6
 800a3f0:	0800b937 	.word	0x0800b937

0800a3f4 <__mcmp>:
 800a3f4:	b530      	push	{r4, r5, lr}
 800a3f6:	6902      	ldr	r2, [r0, #16]
 800a3f8:	690c      	ldr	r4, [r1, #16]
 800a3fa:	1b12      	subs	r2, r2, r4
 800a3fc:	d10e      	bne.n	800a41c <__mcmp+0x28>
 800a3fe:	f100 0314 	add.w	r3, r0, #20
 800a402:	3114      	adds	r1, #20
 800a404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a40c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a414:	42a5      	cmp	r5, r4
 800a416:	d003      	beq.n	800a420 <__mcmp+0x2c>
 800a418:	d305      	bcc.n	800a426 <__mcmp+0x32>
 800a41a:	2201      	movs	r2, #1
 800a41c:	4610      	mov	r0, r2
 800a41e:	bd30      	pop	{r4, r5, pc}
 800a420:	4283      	cmp	r3, r0
 800a422:	d3f3      	bcc.n	800a40c <__mcmp+0x18>
 800a424:	e7fa      	b.n	800a41c <__mcmp+0x28>
 800a426:	f04f 32ff 	mov.w	r2, #4294967295
 800a42a:	e7f7      	b.n	800a41c <__mcmp+0x28>

0800a42c <__mdiff>:
 800a42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	460c      	mov	r4, r1
 800a432:	4606      	mov	r6, r0
 800a434:	4611      	mov	r1, r2
 800a436:	4620      	mov	r0, r4
 800a438:	4690      	mov	r8, r2
 800a43a:	f7ff ffdb 	bl	800a3f4 <__mcmp>
 800a43e:	1e05      	subs	r5, r0, #0
 800a440:	d110      	bne.n	800a464 <__mdiff+0x38>
 800a442:	4629      	mov	r1, r5
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff fd0f 	bl	8009e68 <_Balloc>
 800a44a:	b930      	cbnz	r0, 800a45a <__mdiff+0x2e>
 800a44c:	4b3a      	ldr	r3, [pc, #232]	; (800a538 <__mdiff+0x10c>)
 800a44e:	4602      	mov	r2, r0
 800a450:	f240 2137 	movw	r1, #567	; 0x237
 800a454:	4839      	ldr	r0, [pc, #228]	; (800a53c <__mdiff+0x110>)
 800a456:	f7ff f87f 	bl	8009558 <__assert_func>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a464:	bfa4      	itt	ge
 800a466:	4643      	movge	r3, r8
 800a468:	46a0      	movge	r8, r4
 800a46a:	4630      	mov	r0, r6
 800a46c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a470:	bfa6      	itte	ge
 800a472:	461c      	movge	r4, r3
 800a474:	2500      	movge	r5, #0
 800a476:	2501      	movlt	r5, #1
 800a478:	f7ff fcf6 	bl	8009e68 <_Balloc>
 800a47c:	b920      	cbnz	r0, 800a488 <__mdiff+0x5c>
 800a47e:	4b2e      	ldr	r3, [pc, #184]	; (800a538 <__mdiff+0x10c>)
 800a480:	4602      	mov	r2, r0
 800a482:	f240 2145 	movw	r1, #581	; 0x245
 800a486:	e7e5      	b.n	800a454 <__mdiff+0x28>
 800a488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a48c:	6926      	ldr	r6, [r4, #16]
 800a48e:	60c5      	str	r5, [r0, #12]
 800a490:	f104 0914 	add.w	r9, r4, #20
 800a494:	f108 0514 	add.w	r5, r8, #20
 800a498:	f100 0e14 	add.w	lr, r0, #20
 800a49c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4a4:	f108 0210 	add.w	r2, r8, #16
 800a4a8:	46f2      	mov	sl, lr
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4b4:	fa11 f88b 	uxtah	r8, r1, fp
 800a4b8:	b299      	uxth	r1, r3
 800a4ba:	0c1b      	lsrs	r3, r3, #16
 800a4bc:	eba8 0801 	sub.w	r8, r8, r1
 800a4c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4c8:	fa1f f888 	uxth.w	r8, r8
 800a4cc:	1419      	asrs	r1, r3, #16
 800a4ce:	454e      	cmp	r6, r9
 800a4d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4d4:	f84a 3b04 	str.w	r3, [sl], #4
 800a4d8:	d8e8      	bhi.n	800a4ac <__mdiff+0x80>
 800a4da:	1b33      	subs	r3, r6, r4
 800a4dc:	3b15      	subs	r3, #21
 800a4de:	f023 0303 	bic.w	r3, r3, #3
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	3415      	adds	r4, #21
 800a4e6:	42a6      	cmp	r6, r4
 800a4e8:	bf38      	it	cc
 800a4ea:	2304      	movcc	r3, #4
 800a4ec:	441d      	add	r5, r3
 800a4ee:	4473      	add	r3, lr
 800a4f0:	469e      	mov	lr, r3
 800a4f2:	462e      	mov	r6, r5
 800a4f4:	4566      	cmp	r6, ip
 800a4f6:	d30e      	bcc.n	800a516 <__mdiff+0xea>
 800a4f8:	f10c 0203 	add.w	r2, ip, #3
 800a4fc:	1b52      	subs	r2, r2, r5
 800a4fe:	f022 0203 	bic.w	r2, r2, #3
 800a502:	3d03      	subs	r5, #3
 800a504:	45ac      	cmp	ip, r5
 800a506:	bf38      	it	cc
 800a508:	2200      	movcc	r2, #0
 800a50a:	4413      	add	r3, r2
 800a50c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a510:	b17a      	cbz	r2, 800a532 <__mdiff+0x106>
 800a512:	6107      	str	r7, [r0, #16]
 800a514:	e7a4      	b.n	800a460 <__mdiff+0x34>
 800a516:	f856 8b04 	ldr.w	r8, [r6], #4
 800a51a:	fa11 f288 	uxtah	r2, r1, r8
 800a51e:	1414      	asrs	r4, r2, #16
 800a520:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a524:	b292      	uxth	r2, r2
 800a526:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a52a:	f84e 2b04 	str.w	r2, [lr], #4
 800a52e:	1421      	asrs	r1, r4, #16
 800a530:	e7e0      	b.n	800a4f4 <__mdiff+0xc8>
 800a532:	3f01      	subs	r7, #1
 800a534:	e7ea      	b.n	800a50c <__mdiff+0xe0>
 800a536:	bf00      	nop
 800a538:	0800b8c6 	.word	0x0800b8c6
 800a53c:	0800b937 	.word	0x0800b937

0800a540 <__ulp>:
 800a540:	b082      	sub	sp, #8
 800a542:	ed8d 0b00 	vstr	d0, [sp]
 800a546:	9a01      	ldr	r2, [sp, #4]
 800a548:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <__ulp+0x48>)
 800a54a:	4013      	ands	r3, r2
 800a54c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a550:	2b00      	cmp	r3, #0
 800a552:	dc08      	bgt.n	800a566 <__ulp+0x26>
 800a554:	425b      	negs	r3, r3
 800a556:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a55a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a55e:	da04      	bge.n	800a56a <__ulp+0x2a>
 800a560:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a564:	4113      	asrs	r3, r2
 800a566:	2200      	movs	r2, #0
 800a568:	e008      	b.n	800a57c <__ulp+0x3c>
 800a56a:	f1a2 0314 	sub.w	r3, r2, #20
 800a56e:	2b1e      	cmp	r3, #30
 800a570:	bfda      	itte	le
 800a572:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a576:	40da      	lsrle	r2, r3
 800a578:	2201      	movgt	r2, #1
 800a57a:	2300      	movs	r3, #0
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	ec41 0b10 	vmov	d0, r0, r1
 800a584:	b002      	add	sp, #8
 800a586:	4770      	bx	lr
 800a588:	7ff00000 	.word	0x7ff00000

0800a58c <__b2d>:
 800a58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a590:	6906      	ldr	r6, [r0, #16]
 800a592:	f100 0814 	add.w	r8, r0, #20
 800a596:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a59a:	1f37      	subs	r7, r6, #4
 800a59c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7ff fd53 	bl	800a04c <__hi0bits>
 800a5a6:	f1c0 0320 	rsb	r3, r0, #32
 800a5aa:	280a      	cmp	r0, #10
 800a5ac:	600b      	str	r3, [r1, #0]
 800a5ae:	491b      	ldr	r1, [pc, #108]	; (800a61c <__b2d+0x90>)
 800a5b0:	dc15      	bgt.n	800a5de <__b2d+0x52>
 800a5b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5b6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5ba:	45b8      	cmp	r8, r7
 800a5bc:	ea43 0501 	orr.w	r5, r3, r1
 800a5c0:	bf34      	ite	cc
 800a5c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5c6:	2300      	movcs	r3, #0
 800a5c8:	3015      	adds	r0, #21
 800a5ca:	fa02 f000 	lsl.w	r0, r2, r0
 800a5ce:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5d2:	4303      	orrs	r3, r0
 800a5d4:	461c      	mov	r4, r3
 800a5d6:	ec45 4b10 	vmov	d0, r4, r5
 800a5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5de:	45b8      	cmp	r8, r7
 800a5e0:	bf3a      	itte	cc
 800a5e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5e6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5ea:	2300      	movcs	r3, #0
 800a5ec:	380b      	subs	r0, #11
 800a5ee:	d012      	beq.n	800a616 <__b2d+0x8a>
 800a5f0:	f1c0 0120 	rsb	r1, r0, #32
 800a5f4:	fa23 f401 	lsr.w	r4, r3, r1
 800a5f8:	4082      	lsls	r2, r0
 800a5fa:	4322      	orrs	r2, r4
 800a5fc:	4547      	cmp	r7, r8
 800a5fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a602:	bf8c      	ite	hi
 800a604:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a608:	2200      	movls	r2, #0
 800a60a:	4083      	lsls	r3, r0
 800a60c:	40ca      	lsrs	r2, r1
 800a60e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a612:	4313      	orrs	r3, r2
 800a614:	e7de      	b.n	800a5d4 <__b2d+0x48>
 800a616:	ea42 0501 	orr.w	r5, r2, r1
 800a61a:	e7db      	b.n	800a5d4 <__b2d+0x48>
 800a61c:	3ff00000 	.word	0x3ff00000

0800a620 <__d2b>:
 800a620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a624:	460f      	mov	r7, r1
 800a626:	2101      	movs	r1, #1
 800a628:	ec59 8b10 	vmov	r8, r9, d0
 800a62c:	4616      	mov	r6, r2
 800a62e:	f7ff fc1b 	bl	8009e68 <_Balloc>
 800a632:	4604      	mov	r4, r0
 800a634:	b930      	cbnz	r0, 800a644 <__d2b+0x24>
 800a636:	4602      	mov	r2, r0
 800a638:	4b24      	ldr	r3, [pc, #144]	; (800a6cc <__d2b+0xac>)
 800a63a:	4825      	ldr	r0, [pc, #148]	; (800a6d0 <__d2b+0xb0>)
 800a63c:	f240 310f 	movw	r1, #783	; 0x30f
 800a640:	f7fe ff8a 	bl	8009558 <__assert_func>
 800a644:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a64c:	bb2d      	cbnz	r5, 800a69a <__d2b+0x7a>
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	f1b8 0300 	subs.w	r3, r8, #0
 800a654:	d026      	beq.n	800a6a4 <__d2b+0x84>
 800a656:	4668      	mov	r0, sp
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	f7ff fd17 	bl	800a08c <__lo0bits>
 800a65e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a662:	b1e8      	cbz	r0, 800a6a0 <__d2b+0x80>
 800a664:	f1c0 0320 	rsb	r3, r0, #32
 800a668:	fa02 f303 	lsl.w	r3, r2, r3
 800a66c:	430b      	orrs	r3, r1
 800a66e:	40c2      	lsrs	r2, r0
 800a670:	6163      	str	r3, [r4, #20]
 800a672:	9201      	str	r2, [sp, #4]
 800a674:	9b01      	ldr	r3, [sp, #4]
 800a676:	61a3      	str	r3, [r4, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	bf14      	ite	ne
 800a67c:	2202      	movne	r2, #2
 800a67e:	2201      	moveq	r2, #1
 800a680:	6122      	str	r2, [r4, #16]
 800a682:	b1bd      	cbz	r5, 800a6b4 <__d2b+0x94>
 800a684:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a688:	4405      	add	r5, r0
 800a68a:	603d      	str	r5, [r7, #0]
 800a68c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a690:	6030      	str	r0, [r6, #0]
 800a692:	4620      	mov	r0, r4
 800a694:	b003      	add	sp, #12
 800a696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a69a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a69e:	e7d6      	b.n	800a64e <__d2b+0x2e>
 800a6a0:	6161      	str	r1, [r4, #20]
 800a6a2:	e7e7      	b.n	800a674 <__d2b+0x54>
 800a6a4:	a801      	add	r0, sp, #4
 800a6a6:	f7ff fcf1 	bl	800a08c <__lo0bits>
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	6163      	str	r3, [r4, #20]
 800a6ae:	3020      	adds	r0, #32
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	e7e5      	b.n	800a680 <__d2b+0x60>
 800a6b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6bc:	6038      	str	r0, [r7, #0]
 800a6be:	6918      	ldr	r0, [r3, #16]
 800a6c0:	f7ff fcc4 	bl	800a04c <__hi0bits>
 800a6c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6c8:	e7e2      	b.n	800a690 <__d2b+0x70>
 800a6ca:	bf00      	nop
 800a6cc:	0800b8c6 	.word	0x0800b8c6
 800a6d0:	0800b937 	.word	0x0800b937

0800a6d4 <__ratio>:
 800a6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	4688      	mov	r8, r1
 800a6da:	4669      	mov	r1, sp
 800a6dc:	4681      	mov	r9, r0
 800a6de:	f7ff ff55 	bl	800a58c <__b2d>
 800a6e2:	a901      	add	r1, sp, #4
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	ec55 4b10 	vmov	r4, r5, d0
 800a6ea:	f7ff ff4f 	bl	800a58c <__b2d>
 800a6ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6f6:	eba3 0c02 	sub.w	ip, r3, r2
 800a6fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a704:	ec51 0b10 	vmov	r0, r1, d0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bfd6      	itet	le
 800a70c:	460a      	movle	r2, r1
 800a70e:	462a      	movgt	r2, r5
 800a710:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a714:	468b      	mov	fp, r1
 800a716:	462f      	mov	r7, r5
 800a718:	bfd4      	ite	le
 800a71a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a71e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a722:	4620      	mov	r0, r4
 800a724:	ee10 2a10 	vmov	r2, s0
 800a728:	465b      	mov	r3, fp
 800a72a:	4639      	mov	r1, r7
 800a72c:	f7f6 f88e 	bl	800084c <__aeabi_ddiv>
 800a730:	ec41 0b10 	vmov	d0, r0, r1
 800a734:	b003      	add	sp, #12
 800a736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a73a <__copybits>:
 800a73a:	3901      	subs	r1, #1
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	1149      	asrs	r1, r1, #5
 800a740:	6914      	ldr	r4, [r2, #16]
 800a742:	3101      	adds	r1, #1
 800a744:	f102 0314 	add.w	r3, r2, #20
 800a748:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a74c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a750:	1f05      	subs	r5, r0, #4
 800a752:	42a3      	cmp	r3, r4
 800a754:	d30c      	bcc.n	800a770 <__copybits+0x36>
 800a756:	1aa3      	subs	r3, r4, r2
 800a758:	3b11      	subs	r3, #17
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	3211      	adds	r2, #17
 800a760:	42a2      	cmp	r2, r4
 800a762:	bf88      	it	hi
 800a764:	2300      	movhi	r3, #0
 800a766:	4418      	add	r0, r3
 800a768:	2300      	movs	r3, #0
 800a76a:	4288      	cmp	r0, r1
 800a76c:	d305      	bcc.n	800a77a <__copybits+0x40>
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	f853 6b04 	ldr.w	r6, [r3], #4
 800a774:	f845 6f04 	str.w	r6, [r5, #4]!
 800a778:	e7eb      	b.n	800a752 <__copybits+0x18>
 800a77a:	f840 3b04 	str.w	r3, [r0], #4
 800a77e:	e7f4      	b.n	800a76a <__copybits+0x30>

0800a780 <__any_on>:
 800a780:	f100 0214 	add.w	r2, r0, #20
 800a784:	6900      	ldr	r0, [r0, #16]
 800a786:	114b      	asrs	r3, r1, #5
 800a788:	4298      	cmp	r0, r3
 800a78a:	b510      	push	{r4, lr}
 800a78c:	db11      	blt.n	800a7b2 <__any_on+0x32>
 800a78e:	dd0a      	ble.n	800a7a6 <__any_on+0x26>
 800a790:	f011 011f 	ands.w	r1, r1, #31
 800a794:	d007      	beq.n	800a7a6 <__any_on+0x26>
 800a796:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a79a:	fa24 f001 	lsr.w	r0, r4, r1
 800a79e:	fa00 f101 	lsl.w	r1, r0, r1
 800a7a2:	428c      	cmp	r4, r1
 800a7a4:	d10b      	bne.n	800a7be <__any_on+0x3e>
 800a7a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d803      	bhi.n	800a7b6 <__any_on+0x36>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	bd10      	pop	{r4, pc}
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	e7f7      	b.n	800a7a6 <__any_on+0x26>
 800a7b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	d0f5      	beq.n	800a7aa <__any_on+0x2a>
 800a7be:	2001      	movs	r0, #1
 800a7c0:	e7f6      	b.n	800a7b0 <__any_on+0x30>

0800a7c2 <__ascii_wctomb>:
 800a7c2:	b149      	cbz	r1, 800a7d8 <__ascii_wctomb+0x16>
 800a7c4:	2aff      	cmp	r2, #255	; 0xff
 800a7c6:	bf85      	ittet	hi
 800a7c8:	238a      	movhi	r3, #138	; 0x8a
 800a7ca:	6003      	strhi	r3, [r0, #0]
 800a7cc:	700a      	strbls	r2, [r1, #0]
 800a7ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7d2:	bf98      	it	ls
 800a7d4:	2001      	movls	r0, #1
 800a7d6:	4770      	bx	lr
 800a7d8:	4608      	mov	r0, r1
 800a7da:	4770      	bx	lr

0800a7dc <__ssputs_r>:
 800a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	688e      	ldr	r6, [r1, #8]
 800a7e2:	461f      	mov	r7, r3
 800a7e4:	42be      	cmp	r6, r7
 800a7e6:	680b      	ldr	r3, [r1, #0]
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4690      	mov	r8, r2
 800a7ee:	d82c      	bhi.n	800a84a <__ssputs_r+0x6e>
 800a7f0:	898a      	ldrh	r2, [r1, #12]
 800a7f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7f6:	d026      	beq.n	800a846 <__ssputs_r+0x6a>
 800a7f8:	6965      	ldr	r5, [r4, #20]
 800a7fa:	6909      	ldr	r1, [r1, #16]
 800a7fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a800:	eba3 0901 	sub.w	r9, r3, r1
 800a804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a808:	1c7b      	adds	r3, r7, #1
 800a80a:	444b      	add	r3, r9
 800a80c:	106d      	asrs	r5, r5, #1
 800a80e:	429d      	cmp	r5, r3
 800a810:	bf38      	it	cc
 800a812:	461d      	movcc	r5, r3
 800a814:	0553      	lsls	r3, r2, #21
 800a816:	d527      	bpl.n	800a868 <__ssputs_r+0x8c>
 800a818:	4629      	mov	r1, r5
 800a81a:	f7ff fa87 	bl	8009d2c <_malloc_r>
 800a81e:	4606      	mov	r6, r0
 800a820:	b360      	cbz	r0, 800a87c <__ssputs_r+0xa0>
 800a822:	6921      	ldr	r1, [r4, #16]
 800a824:	464a      	mov	r2, r9
 800a826:	f7fe fe80 	bl	800952a <memcpy>
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	6126      	str	r6, [r4, #16]
 800a838:	6165      	str	r5, [r4, #20]
 800a83a:	444e      	add	r6, r9
 800a83c:	eba5 0509 	sub.w	r5, r5, r9
 800a840:	6026      	str	r6, [r4, #0]
 800a842:	60a5      	str	r5, [r4, #8]
 800a844:	463e      	mov	r6, r7
 800a846:	42be      	cmp	r6, r7
 800a848:	d900      	bls.n	800a84c <__ssputs_r+0x70>
 800a84a:	463e      	mov	r6, r7
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	4632      	mov	r2, r6
 800a850:	4641      	mov	r1, r8
 800a852:	f000 fb6b 	bl	800af2c <memmove>
 800a856:	68a3      	ldr	r3, [r4, #8]
 800a858:	1b9b      	subs	r3, r3, r6
 800a85a:	60a3      	str	r3, [r4, #8]
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	4433      	add	r3, r6
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	2000      	movs	r0, #0
 800a864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a868:	462a      	mov	r2, r5
 800a86a:	f000 fba6 	bl	800afba <_realloc_r>
 800a86e:	4606      	mov	r6, r0
 800a870:	2800      	cmp	r0, #0
 800a872:	d1e0      	bne.n	800a836 <__ssputs_r+0x5a>
 800a874:	6921      	ldr	r1, [r4, #16]
 800a876:	4650      	mov	r0, sl
 800a878:	f7fe fe8c 	bl	8009594 <_free_r>
 800a87c:	230c      	movs	r3, #12
 800a87e:	f8ca 3000 	str.w	r3, [sl]
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	f04f 30ff 	mov.w	r0, #4294967295
 800a88e:	e7e9      	b.n	800a864 <__ssputs_r+0x88>

0800a890 <_svfiprintf_r>:
 800a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	4698      	mov	r8, r3
 800a896:	898b      	ldrh	r3, [r1, #12]
 800a898:	061b      	lsls	r3, r3, #24
 800a89a:	b09d      	sub	sp, #116	; 0x74
 800a89c:	4607      	mov	r7, r0
 800a89e:	460d      	mov	r5, r1
 800a8a0:	4614      	mov	r4, r2
 800a8a2:	d50e      	bpl.n	800a8c2 <_svfiprintf_r+0x32>
 800a8a4:	690b      	ldr	r3, [r1, #16]
 800a8a6:	b963      	cbnz	r3, 800a8c2 <_svfiprintf_r+0x32>
 800a8a8:	2140      	movs	r1, #64	; 0x40
 800a8aa:	f7ff fa3f 	bl	8009d2c <_malloc_r>
 800a8ae:	6028      	str	r0, [r5, #0]
 800a8b0:	6128      	str	r0, [r5, #16]
 800a8b2:	b920      	cbnz	r0, 800a8be <_svfiprintf_r+0x2e>
 800a8b4:	230c      	movs	r3, #12
 800a8b6:	603b      	str	r3, [r7, #0]
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	e0d0      	b.n	800aa60 <_svfiprintf_r+0x1d0>
 800a8be:	2340      	movs	r3, #64	; 0x40
 800a8c0:	616b      	str	r3, [r5, #20]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c6:	2320      	movs	r3, #32
 800a8c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8d0:	2330      	movs	r3, #48	; 0x30
 800a8d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa78 <_svfiprintf_r+0x1e8>
 800a8d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8da:	f04f 0901 	mov.w	r9, #1
 800a8de:	4623      	mov	r3, r4
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8e6:	b10a      	cbz	r2, 800a8ec <_svfiprintf_r+0x5c>
 800a8e8:	2a25      	cmp	r2, #37	; 0x25
 800a8ea:	d1f9      	bne.n	800a8e0 <_svfiprintf_r+0x50>
 800a8ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a8f0:	d00b      	beq.n	800a90a <_svfiprintf_r+0x7a>
 800a8f2:	465b      	mov	r3, fp
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7ff ff6f 	bl	800a7dc <__ssputs_r>
 800a8fe:	3001      	adds	r0, #1
 800a900:	f000 80a9 	beq.w	800aa56 <_svfiprintf_r+0x1c6>
 800a904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a906:	445a      	add	r2, fp
 800a908:	9209      	str	r2, [sp, #36]	; 0x24
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 80a1 	beq.w	800aa56 <_svfiprintf_r+0x1c6>
 800a914:	2300      	movs	r3, #0
 800a916:	f04f 32ff 	mov.w	r2, #4294967295
 800a91a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a91e:	f10a 0a01 	add.w	sl, sl, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	9307      	str	r3, [sp, #28]
 800a926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a92a:	931a      	str	r3, [sp, #104]	; 0x68
 800a92c:	4654      	mov	r4, sl
 800a92e:	2205      	movs	r2, #5
 800a930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a934:	4850      	ldr	r0, [pc, #320]	; (800aa78 <_svfiprintf_r+0x1e8>)
 800a936:	f7f5 fc53 	bl	80001e0 <memchr>
 800a93a:	9a04      	ldr	r2, [sp, #16]
 800a93c:	b9d8      	cbnz	r0, 800a976 <_svfiprintf_r+0xe6>
 800a93e:	06d0      	lsls	r0, r2, #27
 800a940:	bf44      	itt	mi
 800a942:	2320      	movmi	r3, #32
 800a944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a948:	0711      	lsls	r1, r2, #28
 800a94a:	bf44      	itt	mi
 800a94c:	232b      	movmi	r3, #43	; 0x2b
 800a94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a952:	f89a 3000 	ldrb.w	r3, [sl]
 800a956:	2b2a      	cmp	r3, #42	; 0x2a
 800a958:	d015      	beq.n	800a986 <_svfiprintf_r+0xf6>
 800a95a:	9a07      	ldr	r2, [sp, #28]
 800a95c:	4654      	mov	r4, sl
 800a95e:	2000      	movs	r0, #0
 800a960:	f04f 0c0a 	mov.w	ip, #10
 800a964:	4621      	mov	r1, r4
 800a966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a96a:	3b30      	subs	r3, #48	; 0x30
 800a96c:	2b09      	cmp	r3, #9
 800a96e:	d94d      	bls.n	800aa0c <_svfiprintf_r+0x17c>
 800a970:	b1b0      	cbz	r0, 800a9a0 <_svfiprintf_r+0x110>
 800a972:	9207      	str	r2, [sp, #28]
 800a974:	e014      	b.n	800a9a0 <_svfiprintf_r+0x110>
 800a976:	eba0 0308 	sub.w	r3, r0, r8
 800a97a:	fa09 f303 	lsl.w	r3, r9, r3
 800a97e:	4313      	orrs	r3, r2
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	46a2      	mov	sl, r4
 800a984:	e7d2      	b.n	800a92c <_svfiprintf_r+0x9c>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	1d19      	adds	r1, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9103      	str	r1, [sp, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfbb      	ittet	lt
 800a992:	425b      	neglt	r3, r3
 800a994:	f042 0202 	orrlt.w	r2, r2, #2
 800a998:	9307      	strge	r3, [sp, #28]
 800a99a:	9307      	strlt	r3, [sp, #28]
 800a99c:	bfb8      	it	lt
 800a99e:	9204      	strlt	r2, [sp, #16]
 800a9a0:	7823      	ldrb	r3, [r4, #0]
 800a9a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9a4:	d10c      	bne.n	800a9c0 <_svfiprintf_r+0x130>
 800a9a6:	7863      	ldrb	r3, [r4, #1]
 800a9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9aa:	d134      	bne.n	800aa16 <_svfiprintf_r+0x186>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	9203      	str	r2, [sp, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bfb8      	it	lt
 800a9b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9bc:	3402      	adds	r4, #2
 800a9be:	9305      	str	r3, [sp, #20]
 800a9c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa88 <_svfiprintf_r+0x1f8>
 800a9c4:	7821      	ldrb	r1, [r4, #0]
 800a9c6:	2203      	movs	r2, #3
 800a9c8:	4650      	mov	r0, sl
 800a9ca:	f7f5 fc09 	bl	80001e0 <memchr>
 800a9ce:	b138      	cbz	r0, 800a9e0 <_svfiprintf_r+0x150>
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	eba0 000a 	sub.w	r0, r0, sl
 800a9d6:	2240      	movs	r2, #64	; 0x40
 800a9d8:	4082      	lsls	r2, r0
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	3401      	adds	r4, #1
 800a9de:	9304      	str	r3, [sp, #16]
 800a9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e4:	4825      	ldr	r0, [pc, #148]	; (800aa7c <_svfiprintf_r+0x1ec>)
 800a9e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9ea:	2206      	movs	r2, #6
 800a9ec:	f7f5 fbf8 	bl	80001e0 <memchr>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d038      	beq.n	800aa66 <_svfiprintf_r+0x1d6>
 800a9f4:	4b22      	ldr	r3, [pc, #136]	; (800aa80 <_svfiprintf_r+0x1f0>)
 800a9f6:	bb1b      	cbnz	r3, 800aa40 <_svfiprintf_r+0x1b0>
 800a9f8:	9b03      	ldr	r3, [sp, #12]
 800a9fa:	3307      	adds	r3, #7
 800a9fc:	f023 0307 	bic.w	r3, r3, #7
 800aa00:	3308      	adds	r3, #8
 800aa02:	9303      	str	r3, [sp, #12]
 800aa04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa06:	4433      	add	r3, r6
 800aa08:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0a:	e768      	b.n	800a8de <_svfiprintf_r+0x4e>
 800aa0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa10:	460c      	mov	r4, r1
 800aa12:	2001      	movs	r0, #1
 800aa14:	e7a6      	b.n	800a964 <_svfiprintf_r+0xd4>
 800aa16:	2300      	movs	r3, #0
 800aa18:	3401      	adds	r4, #1
 800aa1a:	9305      	str	r3, [sp, #20]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	f04f 0c0a 	mov.w	ip, #10
 800aa22:	4620      	mov	r0, r4
 800aa24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa28:	3a30      	subs	r2, #48	; 0x30
 800aa2a:	2a09      	cmp	r2, #9
 800aa2c:	d903      	bls.n	800aa36 <_svfiprintf_r+0x1a6>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d0c6      	beq.n	800a9c0 <_svfiprintf_r+0x130>
 800aa32:	9105      	str	r1, [sp, #20]
 800aa34:	e7c4      	b.n	800a9c0 <_svfiprintf_r+0x130>
 800aa36:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e7f0      	b.n	800aa22 <_svfiprintf_r+0x192>
 800aa40:	ab03      	add	r3, sp, #12
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	462a      	mov	r2, r5
 800aa46:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <_svfiprintf_r+0x1f4>)
 800aa48:	a904      	add	r1, sp, #16
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	f3af 8000 	nop.w
 800aa50:	1c42      	adds	r2, r0, #1
 800aa52:	4606      	mov	r6, r0
 800aa54:	d1d6      	bne.n	800aa04 <_svfiprintf_r+0x174>
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	065b      	lsls	r3, r3, #25
 800aa5a:	f53f af2d 	bmi.w	800a8b8 <_svfiprintf_r+0x28>
 800aa5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa60:	b01d      	add	sp, #116	; 0x74
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	ab03      	add	r3, sp, #12
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <_svfiprintf_r+0x1f4>)
 800aa6e:	a904      	add	r1, sp, #16
 800aa70:	4638      	mov	r0, r7
 800aa72:	f000 f879 	bl	800ab68 <_printf_i>
 800aa76:	e7eb      	b.n	800aa50 <_svfiprintf_r+0x1c0>
 800aa78:	0800ba8c 	.word	0x0800ba8c
 800aa7c:	0800ba96 	.word	0x0800ba96
 800aa80:	00000000 	.word	0x00000000
 800aa84:	0800a7dd 	.word	0x0800a7dd
 800aa88:	0800ba92 	.word	0x0800ba92

0800aa8c <_printf_common>:
 800aa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	4616      	mov	r6, r2
 800aa92:	4699      	mov	r9, r3
 800aa94:	688a      	ldr	r2, [r1, #8]
 800aa96:	690b      	ldr	r3, [r1, #16]
 800aa98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	bfb8      	it	lt
 800aaa0:	4613      	movlt	r3, r2
 800aaa2:	6033      	str	r3, [r6, #0]
 800aaa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	460c      	mov	r4, r1
 800aaac:	b10a      	cbz	r2, 800aab2 <_printf_common+0x26>
 800aaae:	3301      	adds	r3, #1
 800aab0:	6033      	str	r3, [r6, #0]
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	0699      	lsls	r1, r3, #26
 800aab6:	bf42      	ittt	mi
 800aab8:	6833      	ldrmi	r3, [r6, #0]
 800aaba:	3302      	addmi	r3, #2
 800aabc:	6033      	strmi	r3, [r6, #0]
 800aabe:	6825      	ldr	r5, [r4, #0]
 800aac0:	f015 0506 	ands.w	r5, r5, #6
 800aac4:	d106      	bne.n	800aad4 <_printf_common+0x48>
 800aac6:	f104 0a19 	add.w	sl, r4, #25
 800aaca:	68e3      	ldr	r3, [r4, #12]
 800aacc:	6832      	ldr	r2, [r6, #0]
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	42ab      	cmp	r3, r5
 800aad2:	dc26      	bgt.n	800ab22 <_printf_common+0x96>
 800aad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aad8:	1e13      	subs	r3, r2, #0
 800aada:	6822      	ldr	r2, [r4, #0]
 800aadc:	bf18      	it	ne
 800aade:	2301      	movne	r3, #1
 800aae0:	0692      	lsls	r2, r2, #26
 800aae2:	d42b      	bmi.n	800ab3c <_printf_common+0xb0>
 800aae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aae8:	4649      	mov	r1, r9
 800aaea:	4638      	mov	r0, r7
 800aaec:	47c0      	blx	r8
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d01e      	beq.n	800ab30 <_printf_common+0xa4>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	6922      	ldr	r2, [r4, #16]
 800aaf6:	f003 0306 	and.w	r3, r3, #6
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	bf02      	ittt	eq
 800aafe:	68e5      	ldreq	r5, [r4, #12]
 800ab00:	6833      	ldreq	r3, [r6, #0]
 800ab02:	1aed      	subeq	r5, r5, r3
 800ab04:	68a3      	ldr	r3, [r4, #8]
 800ab06:	bf0c      	ite	eq
 800ab08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab0c:	2500      	movne	r5, #0
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	bfc4      	itt	gt
 800ab12:	1a9b      	subgt	r3, r3, r2
 800ab14:	18ed      	addgt	r5, r5, r3
 800ab16:	2600      	movs	r6, #0
 800ab18:	341a      	adds	r4, #26
 800ab1a:	42b5      	cmp	r5, r6
 800ab1c:	d11a      	bne.n	800ab54 <_printf_common+0xc8>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	e008      	b.n	800ab34 <_printf_common+0xa8>
 800ab22:	2301      	movs	r3, #1
 800ab24:	4652      	mov	r2, sl
 800ab26:	4649      	mov	r1, r9
 800ab28:	4638      	mov	r0, r7
 800ab2a:	47c0      	blx	r8
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d103      	bne.n	800ab38 <_printf_common+0xac>
 800ab30:	f04f 30ff 	mov.w	r0, #4294967295
 800ab34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab38:	3501      	adds	r5, #1
 800ab3a:	e7c6      	b.n	800aaca <_printf_common+0x3e>
 800ab3c:	18e1      	adds	r1, r4, r3
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	2030      	movs	r0, #48	; 0x30
 800ab42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab46:	4422      	add	r2, r4
 800ab48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab50:	3302      	adds	r3, #2
 800ab52:	e7c7      	b.n	800aae4 <_printf_common+0x58>
 800ab54:	2301      	movs	r3, #1
 800ab56:	4622      	mov	r2, r4
 800ab58:	4649      	mov	r1, r9
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	47c0      	blx	r8
 800ab5e:	3001      	adds	r0, #1
 800ab60:	d0e6      	beq.n	800ab30 <_printf_common+0xa4>
 800ab62:	3601      	adds	r6, #1
 800ab64:	e7d9      	b.n	800ab1a <_printf_common+0x8e>
	...

0800ab68 <_printf_i>:
 800ab68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	7e0f      	ldrb	r7, [r1, #24]
 800ab6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab70:	2f78      	cmp	r7, #120	; 0x78
 800ab72:	4691      	mov	r9, r2
 800ab74:	4680      	mov	r8, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	469a      	mov	sl, r3
 800ab7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab7e:	d807      	bhi.n	800ab90 <_printf_i+0x28>
 800ab80:	2f62      	cmp	r7, #98	; 0x62
 800ab82:	d80a      	bhi.n	800ab9a <_printf_i+0x32>
 800ab84:	2f00      	cmp	r7, #0
 800ab86:	f000 80d4 	beq.w	800ad32 <_printf_i+0x1ca>
 800ab8a:	2f58      	cmp	r7, #88	; 0x58
 800ab8c:	f000 80c0 	beq.w	800ad10 <_printf_i+0x1a8>
 800ab90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab98:	e03a      	b.n	800ac10 <_printf_i+0xa8>
 800ab9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab9e:	2b15      	cmp	r3, #21
 800aba0:	d8f6      	bhi.n	800ab90 <_printf_i+0x28>
 800aba2:	a101      	add	r1, pc, #4	; (adr r1, 800aba8 <_printf_i+0x40>)
 800aba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aba8:	0800ac01 	.word	0x0800ac01
 800abac:	0800ac15 	.word	0x0800ac15
 800abb0:	0800ab91 	.word	0x0800ab91
 800abb4:	0800ab91 	.word	0x0800ab91
 800abb8:	0800ab91 	.word	0x0800ab91
 800abbc:	0800ab91 	.word	0x0800ab91
 800abc0:	0800ac15 	.word	0x0800ac15
 800abc4:	0800ab91 	.word	0x0800ab91
 800abc8:	0800ab91 	.word	0x0800ab91
 800abcc:	0800ab91 	.word	0x0800ab91
 800abd0:	0800ab91 	.word	0x0800ab91
 800abd4:	0800ad19 	.word	0x0800ad19
 800abd8:	0800ac41 	.word	0x0800ac41
 800abdc:	0800acd3 	.word	0x0800acd3
 800abe0:	0800ab91 	.word	0x0800ab91
 800abe4:	0800ab91 	.word	0x0800ab91
 800abe8:	0800ad3b 	.word	0x0800ad3b
 800abec:	0800ab91 	.word	0x0800ab91
 800abf0:	0800ac41 	.word	0x0800ac41
 800abf4:	0800ab91 	.word	0x0800ab91
 800abf8:	0800ab91 	.word	0x0800ab91
 800abfc:	0800acdb 	.word	0x0800acdb
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	1d1a      	adds	r2, r3, #4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	602a      	str	r2, [r5, #0]
 800ac08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac10:	2301      	movs	r3, #1
 800ac12:	e09f      	b.n	800ad54 <_printf_i+0x1ec>
 800ac14:	6820      	ldr	r0, [r4, #0]
 800ac16:	682b      	ldr	r3, [r5, #0]
 800ac18:	0607      	lsls	r7, r0, #24
 800ac1a:	f103 0104 	add.w	r1, r3, #4
 800ac1e:	6029      	str	r1, [r5, #0]
 800ac20:	d501      	bpl.n	800ac26 <_printf_i+0xbe>
 800ac22:	681e      	ldr	r6, [r3, #0]
 800ac24:	e003      	b.n	800ac2e <_printf_i+0xc6>
 800ac26:	0646      	lsls	r6, r0, #25
 800ac28:	d5fb      	bpl.n	800ac22 <_printf_i+0xba>
 800ac2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	da03      	bge.n	800ac3a <_printf_i+0xd2>
 800ac32:	232d      	movs	r3, #45	; 0x2d
 800ac34:	4276      	negs	r6, r6
 800ac36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac3a:	485a      	ldr	r0, [pc, #360]	; (800ada4 <_printf_i+0x23c>)
 800ac3c:	230a      	movs	r3, #10
 800ac3e:	e012      	b.n	800ac66 <_printf_i+0xfe>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	6820      	ldr	r0, [r4, #0]
 800ac44:	1d19      	adds	r1, r3, #4
 800ac46:	6029      	str	r1, [r5, #0]
 800ac48:	0605      	lsls	r5, r0, #24
 800ac4a:	d501      	bpl.n	800ac50 <_printf_i+0xe8>
 800ac4c:	681e      	ldr	r6, [r3, #0]
 800ac4e:	e002      	b.n	800ac56 <_printf_i+0xee>
 800ac50:	0641      	lsls	r1, r0, #25
 800ac52:	d5fb      	bpl.n	800ac4c <_printf_i+0xe4>
 800ac54:	881e      	ldrh	r6, [r3, #0]
 800ac56:	4853      	ldr	r0, [pc, #332]	; (800ada4 <_printf_i+0x23c>)
 800ac58:	2f6f      	cmp	r7, #111	; 0x6f
 800ac5a:	bf0c      	ite	eq
 800ac5c:	2308      	moveq	r3, #8
 800ac5e:	230a      	movne	r3, #10
 800ac60:	2100      	movs	r1, #0
 800ac62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac66:	6865      	ldr	r5, [r4, #4]
 800ac68:	60a5      	str	r5, [r4, #8]
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	bfa2      	ittt	ge
 800ac6e:	6821      	ldrge	r1, [r4, #0]
 800ac70:	f021 0104 	bicge.w	r1, r1, #4
 800ac74:	6021      	strge	r1, [r4, #0]
 800ac76:	b90e      	cbnz	r6, 800ac7c <_printf_i+0x114>
 800ac78:	2d00      	cmp	r5, #0
 800ac7a:	d04b      	beq.n	800ad14 <_printf_i+0x1ac>
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac82:	fb03 6711 	mls	r7, r3, r1, r6
 800ac86:	5dc7      	ldrb	r7, [r0, r7]
 800ac88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac8c:	4637      	mov	r7, r6
 800ac8e:	42bb      	cmp	r3, r7
 800ac90:	460e      	mov	r6, r1
 800ac92:	d9f4      	bls.n	800ac7e <_printf_i+0x116>
 800ac94:	2b08      	cmp	r3, #8
 800ac96:	d10b      	bne.n	800acb0 <_printf_i+0x148>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	07de      	lsls	r6, r3, #31
 800ac9c:	d508      	bpl.n	800acb0 <_printf_i+0x148>
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	6861      	ldr	r1, [r4, #4]
 800aca2:	4299      	cmp	r1, r3
 800aca4:	bfde      	ittt	le
 800aca6:	2330      	movle	r3, #48	; 0x30
 800aca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acb0:	1b52      	subs	r2, r2, r5
 800acb2:	6122      	str	r2, [r4, #16]
 800acb4:	f8cd a000 	str.w	sl, [sp]
 800acb8:	464b      	mov	r3, r9
 800acba:	aa03      	add	r2, sp, #12
 800acbc:	4621      	mov	r1, r4
 800acbe:	4640      	mov	r0, r8
 800acc0:	f7ff fee4 	bl	800aa8c <_printf_common>
 800acc4:	3001      	adds	r0, #1
 800acc6:	d14a      	bne.n	800ad5e <_printf_i+0x1f6>
 800acc8:	f04f 30ff 	mov.w	r0, #4294967295
 800accc:	b004      	add	sp, #16
 800acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	f043 0320 	orr.w	r3, r3, #32
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	4833      	ldr	r0, [pc, #204]	; (800ada8 <_printf_i+0x240>)
 800acdc:	2778      	movs	r7, #120	; 0x78
 800acde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	6829      	ldr	r1, [r5, #0]
 800ace6:	061f      	lsls	r7, r3, #24
 800ace8:	f851 6b04 	ldr.w	r6, [r1], #4
 800acec:	d402      	bmi.n	800acf4 <_printf_i+0x18c>
 800acee:	065f      	lsls	r7, r3, #25
 800acf0:	bf48      	it	mi
 800acf2:	b2b6      	uxthmi	r6, r6
 800acf4:	07df      	lsls	r7, r3, #31
 800acf6:	bf48      	it	mi
 800acf8:	f043 0320 	orrmi.w	r3, r3, #32
 800acfc:	6029      	str	r1, [r5, #0]
 800acfe:	bf48      	it	mi
 800ad00:	6023      	strmi	r3, [r4, #0]
 800ad02:	b91e      	cbnz	r6, 800ad0c <_printf_i+0x1a4>
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	f023 0320 	bic.w	r3, r3, #32
 800ad0a:	6023      	str	r3, [r4, #0]
 800ad0c:	2310      	movs	r3, #16
 800ad0e:	e7a7      	b.n	800ac60 <_printf_i+0xf8>
 800ad10:	4824      	ldr	r0, [pc, #144]	; (800ada4 <_printf_i+0x23c>)
 800ad12:	e7e4      	b.n	800acde <_printf_i+0x176>
 800ad14:	4615      	mov	r5, r2
 800ad16:	e7bd      	b.n	800ac94 <_printf_i+0x12c>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	6826      	ldr	r6, [r4, #0]
 800ad1c:	6961      	ldr	r1, [r4, #20]
 800ad1e:	1d18      	adds	r0, r3, #4
 800ad20:	6028      	str	r0, [r5, #0]
 800ad22:	0635      	lsls	r5, r6, #24
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	d501      	bpl.n	800ad2c <_printf_i+0x1c4>
 800ad28:	6019      	str	r1, [r3, #0]
 800ad2a:	e002      	b.n	800ad32 <_printf_i+0x1ca>
 800ad2c:	0670      	lsls	r0, r6, #25
 800ad2e:	d5fb      	bpl.n	800ad28 <_printf_i+0x1c0>
 800ad30:	8019      	strh	r1, [r3, #0]
 800ad32:	2300      	movs	r3, #0
 800ad34:	6123      	str	r3, [r4, #16]
 800ad36:	4615      	mov	r5, r2
 800ad38:	e7bc      	b.n	800acb4 <_printf_i+0x14c>
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	1d1a      	adds	r2, r3, #4
 800ad3e:	602a      	str	r2, [r5, #0]
 800ad40:	681d      	ldr	r5, [r3, #0]
 800ad42:	6862      	ldr	r2, [r4, #4]
 800ad44:	2100      	movs	r1, #0
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7f5 fa4a 	bl	80001e0 <memchr>
 800ad4c:	b108      	cbz	r0, 800ad52 <_printf_i+0x1ea>
 800ad4e:	1b40      	subs	r0, r0, r5
 800ad50:	6060      	str	r0, [r4, #4]
 800ad52:	6863      	ldr	r3, [r4, #4]
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	2300      	movs	r3, #0
 800ad58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad5c:	e7aa      	b.n	800acb4 <_printf_i+0x14c>
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	462a      	mov	r2, r5
 800ad62:	4649      	mov	r1, r9
 800ad64:	4640      	mov	r0, r8
 800ad66:	47d0      	blx	sl
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d0ad      	beq.n	800acc8 <_printf_i+0x160>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	079b      	lsls	r3, r3, #30
 800ad70:	d413      	bmi.n	800ad9a <_printf_i+0x232>
 800ad72:	68e0      	ldr	r0, [r4, #12]
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	4298      	cmp	r0, r3
 800ad78:	bfb8      	it	lt
 800ad7a:	4618      	movlt	r0, r3
 800ad7c:	e7a6      	b.n	800accc <_printf_i+0x164>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	4632      	mov	r2, r6
 800ad82:	4649      	mov	r1, r9
 800ad84:	4640      	mov	r0, r8
 800ad86:	47d0      	blx	sl
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d09d      	beq.n	800acc8 <_printf_i+0x160>
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	68e3      	ldr	r3, [r4, #12]
 800ad90:	9903      	ldr	r1, [sp, #12]
 800ad92:	1a5b      	subs	r3, r3, r1
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	dcf2      	bgt.n	800ad7e <_printf_i+0x216>
 800ad98:	e7eb      	b.n	800ad72 <_printf_i+0x20a>
 800ad9a:	2500      	movs	r5, #0
 800ad9c:	f104 0619 	add.w	r6, r4, #25
 800ada0:	e7f5      	b.n	800ad8e <_printf_i+0x226>
 800ada2:	bf00      	nop
 800ada4:	0800ba9d 	.word	0x0800ba9d
 800ada8:	0800baae 	.word	0x0800baae

0800adac <__sflush_r>:
 800adac:	898a      	ldrh	r2, [r1, #12]
 800adae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb2:	4605      	mov	r5, r0
 800adb4:	0710      	lsls	r0, r2, #28
 800adb6:	460c      	mov	r4, r1
 800adb8:	d458      	bmi.n	800ae6c <__sflush_r+0xc0>
 800adba:	684b      	ldr	r3, [r1, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dc05      	bgt.n	800adcc <__sflush_r+0x20>
 800adc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dc02      	bgt.n	800adcc <__sflush_r+0x20>
 800adc6:	2000      	movs	r0, #0
 800adc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adce:	2e00      	cmp	r6, #0
 800add0:	d0f9      	beq.n	800adc6 <__sflush_r+0x1a>
 800add2:	2300      	movs	r3, #0
 800add4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800add8:	682f      	ldr	r7, [r5, #0]
 800adda:	6a21      	ldr	r1, [r4, #32]
 800addc:	602b      	str	r3, [r5, #0]
 800adde:	d032      	beq.n	800ae46 <__sflush_r+0x9a>
 800ade0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ade2:	89a3      	ldrh	r3, [r4, #12]
 800ade4:	075a      	lsls	r2, r3, #29
 800ade6:	d505      	bpl.n	800adf4 <__sflush_r+0x48>
 800ade8:	6863      	ldr	r3, [r4, #4]
 800adea:	1ac0      	subs	r0, r0, r3
 800adec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adee:	b10b      	cbz	r3, 800adf4 <__sflush_r+0x48>
 800adf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adf2:	1ac0      	subs	r0, r0, r3
 800adf4:	2300      	movs	r3, #0
 800adf6:	4602      	mov	r2, r0
 800adf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adfa:	6a21      	ldr	r1, [r4, #32]
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b0      	blx	r6
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	d106      	bne.n	800ae14 <__sflush_r+0x68>
 800ae06:	6829      	ldr	r1, [r5, #0]
 800ae08:	291d      	cmp	r1, #29
 800ae0a:	d82b      	bhi.n	800ae64 <__sflush_r+0xb8>
 800ae0c:	4a29      	ldr	r2, [pc, #164]	; (800aeb4 <__sflush_r+0x108>)
 800ae0e:	410a      	asrs	r2, r1
 800ae10:	07d6      	lsls	r6, r2, #31
 800ae12:	d427      	bmi.n	800ae64 <__sflush_r+0xb8>
 800ae14:	2200      	movs	r2, #0
 800ae16:	6062      	str	r2, [r4, #4]
 800ae18:	04d9      	lsls	r1, r3, #19
 800ae1a:	6922      	ldr	r2, [r4, #16]
 800ae1c:	6022      	str	r2, [r4, #0]
 800ae1e:	d504      	bpl.n	800ae2a <__sflush_r+0x7e>
 800ae20:	1c42      	adds	r2, r0, #1
 800ae22:	d101      	bne.n	800ae28 <__sflush_r+0x7c>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b903      	cbnz	r3, 800ae2a <__sflush_r+0x7e>
 800ae28:	6560      	str	r0, [r4, #84]	; 0x54
 800ae2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae2c:	602f      	str	r7, [r5, #0]
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	d0c9      	beq.n	800adc6 <__sflush_r+0x1a>
 800ae32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae36:	4299      	cmp	r1, r3
 800ae38:	d002      	beq.n	800ae40 <__sflush_r+0x94>
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f7fe fbaa 	bl	8009594 <_free_r>
 800ae40:	2000      	movs	r0, #0
 800ae42:	6360      	str	r0, [r4, #52]	; 0x34
 800ae44:	e7c0      	b.n	800adc8 <__sflush_r+0x1c>
 800ae46:	2301      	movs	r3, #1
 800ae48:	4628      	mov	r0, r5
 800ae4a:	47b0      	blx	r6
 800ae4c:	1c41      	adds	r1, r0, #1
 800ae4e:	d1c8      	bne.n	800ade2 <__sflush_r+0x36>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d0c5      	beq.n	800ade2 <__sflush_r+0x36>
 800ae56:	2b1d      	cmp	r3, #29
 800ae58:	d001      	beq.n	800ae5e <__sflush_r+0xb2>
 800ae5a:	2b16      	cmp	r3, #22
 800ae5c:	d101      	bne.n	800ae62 <__sflush_r+0xb6>
 800ae5e:	602f      	str	r7, [r5, #0]
 800ae60:	e7b1      	b.n	800adc6 <__sflush_r+0x1a>
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae68:	81a3      	strh	r3, [r4, #12]
 800ae6a:	e7ad      	b.n	800adc8 <__sflush_r+0x1c>
 800ae6c:	690f      	ldr	r7, [r1, #16]
 800ae6e:	2f00      	cmp	r7, #0
 800ae70:	d0a9      	beq.n	800adc6 <__sflush_r+0x1a>
 800ae72:	0793      	lsls	r3, r2, #30
 800ae74:	680e      	ldr	r6, [r1, #0]
 800ae76:	bf08      	it	eq
 800ae78:	694b      	ldreq	r3, [r1, #20]
 800ae7a:	600f      	str	r7, [r1, #0]
 800ae7c:	bf18      	it	ne
 800ae7e:	2300      	movne	r3, #0
 800ae80:	eba6 0807 	sub.w	r8, r6, r7
 800ae84:	608b      	str	r3, [r1, #8]
 800ae86:	f1b8 0f00 	cmp.w	r8, #0
 800ae8a:	dd9c      	ble.n	800adc6 <__sflush_r+0x1a>
 800ae8c:	6a21      	ldr	r1, [r4, #32]
 800ae8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae90:	4643      	mov	r3, r8
 800ae92:	463a      	mov	r2, r7
 800ae94:	4628      	mov	r0, r5
 800ae96:	47b0      	blx	r6
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	dc06      	bgt.n	800aeaa <__sflush_r+0xfe>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295
 800aea8:	e78e      	b.n	800adc8 <__sflush_r+0x1c>
 800aeaa:	4407      	add	r7, r0
 800aeac:	eba8 0800 	sub.w	r8, r8, r0
 800aeb0:	e7e9      	b.n	800ae86 <__sflush_r+0xda>
 800aeb2:	bf00      	nop
 800aeb4:	dfbffffe 	.word	0xdfbffffe

0800aeb8 <_fflush_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	690b      	ldr	r3, [r1, #16]
 800aebc:	4605      	mov	r5, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	b913      	cbnz	r3, 800aec8 <_fflush_r+0x10>
 800aec2:	2500      	movs	r5, #0
 800aec4:	4628      	mov	r0, r5
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	b118      	cbz	r0, 800aed2 <_fflush_r+0x1a>
 800aeca:	6a03      	ldr	r3, [r0, #32]
 800aecc:	b90b      	cbnz	r3, 800aed2 <_fflush_r+0x1a>
 800aece:	f7fe f927 	bl	8009120 <__sinit>
 800aed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0f3      	beq.n	800aec2 <_fflush_r+0xa>
 800aeda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aedc:	07d0      	lsls	r0, r2, #31
 800aede:	d404      	bmi.n	800aeea <_fflush_r+0x32>
 800aee0:	0599      	lsls	r1, r3, #22
 800aee2:	d402      	bmi.n	800aeea <_fflush_r+0x32>
 800aee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aee6:	f7fe fb1e 	bl	8009526 <__retarget_lock_acquire_recursive>
 800aeea:	4628      	mov	r0, r5
 800aeec:	4621      	mov	r1, r4
 800aeee:	f7ff ff5d 	bl	800adac <__sflush_r>
 800aef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aef4:	07da      	lsls	r2, r3, #31
 800aef6:	4605      	mov	r5, r0
 800aef8:	d4e4      	bmi.n	800aec4 <_fflush_r+0xc>
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	059b      	lsls	r3, r3, #22
 800aefe:	d4e1      	bmi.n	800aec4 <_fflush_r+0xc>
 800af00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af02:	f7fe fb11 	bl	8009528 <__retarget_lock_release_recursive>
 800af06:	e7dd      	b.n	800aec4 <_fflush_r+0xc>

0800af08 <fiprintf>:
 800af08:	b40e      	push	{r1, r2, r3}
 800af0a:	b503      	push	{r0, r1, lr}
 800af0c:	4601      	mov	r1, r0
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	4805      	ldr	r0, [pc, #20]	; (800af28 <fiprintf+0x20>)
 800af12:	f853 2b04 	ldr.w	r2, [r3], #4
 800af16:	6800      	ldr	r0, [r0, #0]
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	f000 f8a7 	bl	800b06c <_vfiprintf_r>
 800af1e:	b002      	add	sp, #8
 800af20:	f85d eb04 	ldr.w	lr, [sp], #4
 800af24:	b003      	add	sp, #12
 800af26:	4770      	bx	lr
 800af28:	200001d8 	.word	0x200001d8

0800af2c <memmove>:
 800af2c:	4288      	cmp	r0, r1
 800af2e:	b510      	push	{r4, lr}
 800af30:	eb01 0402 	add.w	r4, r1, r2
 800af34:	d902      	bls.n	800af3c <memmove+0x10>
 800af36:	4284      	cmp	r4, r0
 800af38:	4623      	mov	r3, r4
 800af3a:	d807      	bhi.n	800af4c <memmove+0x20>
 800af3c:	1e43      	subs	r3, r0, #1
 800af3e:	42a1      	cmp	r1, r4
 800af40:	d008      	beq.n	800af54 <memmove+0x28>
 800af42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af4a:	e7f8      	b.n	800af3e <memmove+0x12>
 800af4c:	4402      	add	r2, r0
 800af4e:	4601      	mov	r1, r0
 800af50:	428a      	cmp	r2, r1
 800af52:	d100      	bne.n	800af56 <memmove+0x2a>
 800af54:	bd10      	pop	{r4, pc}
 800af56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af5e:	e7f7      	b.n	800af50 <memmove+0x24>

0800af60 <_sbrk_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d06      	ldr	r5, [pc, #24]	; (800af7c <_sbrk_r+0x1c>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	602b      	str	r3, [r5, #0]
 800af6c:	f7f6 fbce 	bl	800170c <_sbrk>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_sbrk_r+0x1a>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_sbrk_r+0x1a>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	20001f2c 	.word	0x20001f2c

0800af80 <abort>:
 800af80:	b508      	push	{r3, lr}
 800af82:	2006      	movs	r0, #6
 800af84:	f000 fa4a 	bl	800b41c <raise>
 800af88:	2001      	movs	r0, #1
 800af8a:	f7f6 fb47 	bl	800161c <_exit>

0800af8e <_calloc_r>:
 800af8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af90:	fba1 2402 	umull	r2, r4, r1, r2
 800af94:	b94c      	cbnz	r4, 800afaa <_calloc_r+0x1c>
 800af96:	4611      	mov	r1, r2
 800af98:	9201      	str	r2, [sp, #4]
 800af9a:	f7fe fec7 	bl	8009d2c <_malloc_r>
 800af9e:	9a01      	ldr	r2, [sp, #4]
 800afa0:	4605      	mov	r5, r0
 800afa2:	b930      	cbnz	r0, 800afb2 <_calloc_r+0x24>
 800afa4:	4628      	mov	r0, r5
 800afa6:	b003      	add	sp, #12
 800afa8:	bd30      	pop	{r4, r5, pc}
 800afaa:	220c      	movs	r2, #12
 800afac:	6002      	str	r2, [r0, #0]
 800afae:	2500      	movs	r5, #0
 800afb0:	e7f8      	b.n	800afa4 <_calloc_r+0x16>
 800afb2:	4621      	mov	r1, r4
 800afb4:	f7fe f966 	bl	8009284 <memset>
 800afb8:	e7f4      	b.n	800afa4 <_calloc_r+0x16>

0800afba <_realloc_r>:
 800afba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afbe:	4680      	mov	r8, r0
 800afc0:	4614      	mov	r4, r2
 800afc2:	460e      	mov	r6, r1
 800afc4:	b921      	cbnz	r1, 800afd0 <_realloc_r+0x16>
 800afc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afca:	4611      	mov	r1, r2
 800afcc:	f7fe beae 	b.w	8009d2c <_malloc_r>
 800afd0:	b92a      	cbnz	r2, 800afde <_realloc_r+0x24>
 800afd2:	f7fe fadf 	bl	8009594 <_free_r>
 800afd6:	4625      	mov	r5, r4
 800afd8:	4628      	mov	r0, r5
 800afda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afde:	f000 fa39 	bl	800b454 <_malloc_usable_size_r>
 800afe2:	4284      	cmp	r4, r0
 800afe4:	4607      	mov	r7, r0
 800afe6:	d802      	bhi.n	800afee <_realloc_r+0x34>
 800afe8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afec:	d812      	bhi.n	800b014 <_realloc_r+0x5a>
 800afee:	4621      	mov	r1, r4
 800aff0:	4640      	mov	r0, r8
 800aff2:	f7fe fe9b 	bl	8009d2c <_malloc_r>
 800aff6:	4605      	mov	r5, r0
 800aff8:	2800      	cmp	r0, #0
 800affa:	d0ed      	beq.n	800afd8 <_realloc_r+0x1e>
 800affc:	42bc      	cmp	r4, r7
 800affe:	4622      	mov	r2, r4
 800b000:	4631      	mov	r1, r6
 800b002:	bf28      	it	cs
 800b004:	463a      	movcs	r2, r7
 800b006:	f7fe fa90 	bl	800952a <memcpy>
 800b00a:	4631      	mov	r1, r6
 800b00c:	4640      	mov	r0, r8
 800b00e:	f7fe fac1 	bl	8009594 <_free_r>
 800b012:	e7e1      	b.n	800afd8 <_realloc_r+0x1e>
 800b014:	4635      	mov	r5, r6
 800b016:	e7df      	b.n	800afd8 <_realloc_r+0x1e>

0800b018 <__sfputc_r>:
 800b018:	6893      	ldr	r3, [r2, #8]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	b410      	push	{r4}
 800b020:	6093      	str	r3, [r2, #8]
 800b022:	da08      	bge.n	800b036 <__sfputc_r+0x1e>
 800b024:	6994      	ldr	r4, [r2, #24]
 800b026:	42a3      	cmp	r3, r4
 800b028:	db01      	blt.n	800b02e <__sfputc_r+0x16>
 800b02a:	290a      	cmp	r1, #10
 800b02c:	d103      	bne.n	800b036 <__sfputc_r+0x1e>
 800b02e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b032:	f000 b935 	b.w	800b2a0 <__swbuf_r>
 800b036:	6813      	ldr	r3, [r2, #0]
 800b038:	1c58      	adds	r0, r3, #1
 800b03a:	6010      	str	r0, [r2, #0]
 800b03c:	7019      	strb	r1, [r3, #0]
 800b03e:	4608      	mov	r0, r1
 800b040:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <__sfputs_r>:
 800b046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b048:	4606      	mov	r6, r0
 800b04a:	460f      	mov	r7, r1
 800b04c:	4614      	mov	r4, r2
 800b04e:	18d5      	adds	r5, r2, r3
 800b050:	42ac      	cmp	r4, r5
 800b052:	d101      	bne.n	800b058 <__sfputs_r+0x12>
 800b054:	2000      	movs	r0, #0
 800b056:	e007      	b.n	800b068 <__sfputs_r+0x22>
 800b058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b05c:	463a      	mov	r2, r7
 800b05e:	4630      	mov	r0, r6
 800b060:	f7ff ffda 	bl	800b018 <__sfputc_r>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d1f3      	bne.n	800b050 <__sfputs_r+0xa>
 800b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b06c <_vfiprintf_r>:
 800b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b070:	460d      	mov	r5, r1
 800b072:	b09d      	sub	sp, #116	; 0x74
 800b074:	4614      	mov	r4, r2
 800b076:	4698      	mov	r8, r3
 800b078:	4606      	mov	r6, r0
 800b07a:	b118      	cbz	r0, 800b084 <_vfiprintf_r+0x18>
 800b07c:	6a03      	ldr	r3, [r0, #32]
 800b07e:	b90b      	cbnz	r3, 800b084 <_vfiprintf_r+0x18>
 800b080:	f7fe f84e 	bl	8009120 <__sinit>
 800b084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b086:	07d9      	lsls	r1, r3, #31
 800b088:	d405      	bmi.n	800b096 <_vfiprintf_r+0x2a>
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	059a      	lsls	r2, r3, #22
 800b08e:	d402      	bmi.n	800b096 <_vfiprintf_r+0x2a>
 800b090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b092:	f7fe fa48 	bl	8009526 <__retarget_lock_acquire_recursive>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	071b      	lsls	r3, r3, #28
 800b09a:	d501      	bpl.n	800b0a0 <_vfiprintf_r+0x34>
 800b09c:	692b      	ldr	r3, [r5, #16]
 800b09e:	b99b      	cbnz	r3, 800b0c8 <_vfiprintf_r+0x5c>
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f000 f93a 	bl	800b31c <__swsetup_r>
 800b0a8:	b170      	cbz	r0, 800b0c8 <_vfiprintf_r+0x5c>
 800b0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ac:	07dc      	lsls	r4, r3, #31
 800b0ae:	d504      	bpl.n	800b0ba <_vfiprintf_r+0x4e>
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b4:	b01d      	add	sp, #116	; 0x74
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ba:	89ab      	ldrh	r3, [r5, #12]
 800b0bc:	0598      	lsls	r0, r3, #22
 800b0be:	d4f7      	bmi.n	800b0b0 <_vfiprintf_r+0x44>
 800b0c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0c2:	f7fe fa31 	bl	8009528 <__retarget_lock_release_recursive>
 800b0c6:	e7f3      	b.n	800b0b0 <_vfiprintf_r+0x44>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b0cc:	2320      	movs	r3, #32
 800b0ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0d6:	2330      	movs	r3, #48	; 0x30
 800b0d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b28c <_vfiprintf_r+0x220>
 800b0dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0e0:	f04f 0901 	mov.w	r9, #1
 800b0e4:	4623      	mov	r3, r4
 800b0e6:	469a      	mov	sl, r3
 800b0e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0ec:	b10a      	cbz	r2, 800b0f2 <_vfiprintf_r+0x86>
 800b0ee:	2a25      	cmp	r2, #37	; 0x25
 800b0f0:	d1f9      	bne.n	800b0e6 <_vfiprintf_r+0x7a>
 800b0f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b0f6:	d00b      	beq.n	800b110 <_vfiprintf_r+0xa4>
 800b0f8:	465b      	mov	r3, fp
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7ff ffa1 	bl	800b046 <__sfputs_r>
 800b104:	3001      	adds	r0, #1
 800b106:	f000 80a9 	beq.w	800b25c <_vfiprintf_r+0x1f0>
 800b10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b10c:	445a      	add	r2, fp
 800b10e:	9209      	str	r2, [sp, #36]	; 0x24
 800b110:	f89a 3000 	ldrb.w	r3, [sl]
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 80a1 	beq.w	800b25c <_vfiprintf_r+0x1f0>
 800b11a:	2300      	movs	r3, #0
 800b11c:	f04f 32ff 	mov.w	r2, #4294967295
 800b120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b124:	f10a 0a01 	add.w	sl, sl, #1
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b130:	931a      	str	r3, [sp, #104]	; 0x68
 800b132:	4654      	mov	r4, sl
 800b134:	2205      	movs	r2, #5
 800b136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13a:	4854      	ldr	r0, [pc, #336]	; (800b28c <_vfiprintf_r+0x220>)
 800b13c:	f7f5 f850 	bl	80001e0 <memchr>
 800b140:	9a04      	ldr	r2, [sp, #16]
 800b142:	b9d8      	cbnz	r0, 800b17c <_vfiprintf_r+0x110>
 800b144:	06d1      	lsls	r1, r2, #27
 800b146:	bf44      	itt	mi
 800b148:	2320      	movmi	r3, #32
 800b14a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b14e:	0713      	lsls	r3, r2, #28
 800b150:	bf44      	itt	mi
 800b152:	232b      	movmi	r3, #43	; 0x2b
 800b154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b158:	f89a 3000 	ldrb.w	r3, [sl]
 800b15c:	2b2a      	cmp	r3, #42	; 0x2a
 800b15e:	d015      	beq.n	800b18c <_vfiprintf_r+0x120>
 800b160:	9a07      	ldr	r2, [sp, #28]
 800b162:	4654      	mov	r4, sl
 800b164:	2000      	movs	r0, #0
 800b166:	f04f 0c0a 	mov.w	ip, #10
 800b16a:	4621      	mov	r1, r4
 800b16c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b170:	3b30      	subs	r3, #48	; 0x30
 800b172:	2b09      	cmp	r3, #9
 800b174:	d94d      	bls.n	800b212 <_vfiprintf_r+0x1a6>
 800b176:	b1b0      	cbz	r0, 800b1a6 <_vfiprintf_r+0x13a>
 800b178:	9207      	str	r2, [sp, #28]
 800b17a:	e014      	b.n	800b1a6 <_vfiprintf_r+0x13a>
 800b17c:	eba0 0308 	sub.w	r3, r0, r8
 800b180:	fa09 f303 	lsl.w	r3, r9, r3
 800b184:	4313      	orrs	r3, r2
 800b186:	9304      	str	r3, [sp, #16]
 800b188:	46a2      	mov	sl, r4
 800b18a:	e7d2      	b.n	800b132 <_vfiprintf_r+0xc6>
 800b18c:	9b03      	ldr	r3, [sp, #12]
 800b18e:	1d19      	adds	r1, r3, #4
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	9103      	str	r1, [sp, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	bfbb      	ittet	lt
 800b198:	425b      	neglt	r3, r3
 800b19a:	f042 0202 	orrlt.w	r2, r2, #2
 800b19e:	9307      	strge	r3, [sp, #28]
 800b1a0:	9307      	strlt	r3, [sp, #28]
 800b1a2:	bfb8      	it	lt
 800b1a4:	9204      	strlt	r2, [sp, #16]
 800b1a6:	7823      	ldrb	r3, [r4, #0]
 800b1a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b1aa:	d10c      	bne.n	800b1c6 <_vfiprintf_r+0x15a>
 800b1ac:	7863      	ldrb	r3, [r4, #1]
 800b1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b1b0:	d134      	bne.n	800b21c <_vfiprintf_r+0x1b0>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	1d1a      	adds	r2, r3, #4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	9203      	str	r2, [sp, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bfb8      	it	lt
 800b1be:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1c2:	3402      	adds	r4, #2
 800b1c4:	9305      	str	r3, [sp, #20]
 800b1c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b29c <_vfiprintf_r+0x230>
 800b1ca:	7821      	ldrb	r1, [r4, #0]
 800b1cc:	2203      	movs	r2, #3
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	f7f5 f806 	bl	80001e0 <memchr>
 800b1d4:	b138      	cbz	r0, 800b1e6 <_vfiprintf_r+0x17a>
 800b1d6:	9b04      	ldr	r3, [sp, #16]
 800b1d8:	eba0 000a 	sub.w	r0, r0, sl
 800b1dc:	2240      	movs	r2, #64	; 0x40
 800b1de:	4082      	lsls	r2, r0
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ea:	4829      	ldr	r0, [pc, #164]	; (800b290 <_vfiprintf_r+0x224>)
 800b1ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1f0:	2206      	movs	r2, #6
 800b1f2:	f7f4 fff5 	bl	80001e0 <memchr>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d03f      	beq.n	800b27a <_vfiprintf_r+0x20e>
 800b1fa:	4b26      	ldr	r3, [pc, #152]	; (800b294 <_vfiprintf_r+0x228>)
 800b1fc:	bb1b      	cbnz	r3, 800b246 <_vfiprintf_r+0x1da>
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	3307      	adds	r3, #7
 800b202:	f023 0307 	bic.w	r3, r3, #7
 800b206:	3308      	adds	r3, #8
 800b208:	9303      	str	r3, [sp, #12]
 800b20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20c:	443b      	add	r3, r7
 800b20e:	9309      	str	r3, [sp, #36]	; 0x24
 800b210:	e768      	b.n	800b0e4 <_vfiprintf_r+0x78>
 800b212:	fb0c 3202 	mla	r2, ip, r2, r3
 800b216:	460c      	mov	r4, r1
 800b218:	2001      	movs	r0, #1
 800b21a:	e7a6      	b.n	800b16a <_vfiprintf_r+0xfe>
 800b21c:	2300      	movs	r3, #0
 800b21e:	3401      	adds	r4, #1
 800b220:	9305      	str	r3, [sp, #20]
 800b222:	4619      	mov	r1, r3
 800b224:	f04f 0c0a 	mov.w	ip, #10
 800b228:	4620      	mov	r0, r4
 800b22a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b22e:	3a30      	subs	r2, #48	; 0x30
 800b230:	2a09      	cmp	r2, #9
 800b232:	d903      	bls.n	800b23c <_vfiprintf_r+0x1d0>
 800b234:	2b00      	cmp	r3, #0
 800b236:	d0c6      	beq.n	800b1c6 <_vfiprintf_r+0x15a>
 800b238:	9105      	str	r1, [sp, #20]
 800b23a:	e7c4      	b.n	800b1c6 <_vfiprintf_r+0x15a>
 800b23c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b240:	4604      	mov	r4, r0
 800b242:	2301      	movs	r3, #1
 800b244:	e7f0      	b.n	800b228 <_vfiprintf_r+0x1bc>
 800b246:	ab03      	add	r3, sp, #12
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	462a      	mov	r2, r5
 800b24c:	4b12      	ldr	r3, [pc, #72]	; (800b298 <_vfiprintf_r+0x22c>)
 800b24e:	a904      	add	r1, sp, #16
 800b250:	4630      	mov	r0, r6
 800b252:	f3af 8000 	nop.w
 800b256:	4607      	mov	r7, r0
 800b258:	1c78      	adds	r0, r7, #1
 800b25a:	d1d6      	bne.n	800b20a <_vfiprintf_r+0x19e>
 800b25c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b25e:	07d9      	lsls	r1, r3, #31
 800b260:	d405      	bmi.n	800b26e <_vfiprintf_r+0x202>
 800b262:	89ab      	ldrh	r3, [r5, #12]
 800b264:	059a      	lsls	r2, r3, #22
 800b266:	d402      	bmi.n	800b26e <_vfiprintf_r+0x202>
 800b268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b26a:	f7fe f95d 	bl	8009528 <__retarget_lock_release_recursive>
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	065b      	lsls	r3, r3, #25
 800b272:	f53f af1d 	bmi.w	800b0b0 <_vfiprintf_r+0x44>
 800b276:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b278:	e71c      	b.n	800b0b4 <_vfiprintf_r+0x48>
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	462a      	mov	r2, r5
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <_vfiprintf_r+0x22c>)
 800b282:	a904      	add	r1, sp, #16
 800b284:	4630      	mov	r0, r6
 800b286:	f7ff fc6f 	bl	800ab68 <_printf_i>
 800b28a:	e7e4      	b.n	800b256 <_vfiprintf_r+0x1ea>
 800b28c:	0800ba8c 	.word	0x0800ba8c
 800b290:	0800ba96 	.word	0x0800ba96
 800b294:	00000000 	.word	0x00000000
 800b298:	0800b047 	.word	0x0800b047
 800b29c:	0800ba92 	.word	0x0800ba92

0800b2a0 <__swbuf_r>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	460e      	mov	r6, r1
 800b2a4:	4614      	mov	r4, r2
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	b118      	cbz	r0, 800b2b2 <__swbuf_r+0x12>
 800b2aa:	6a03      	ldr	r3, [r0, #32]
 800b2ac:	b90b      	cbnz	r3, 800b2b2 <__swbuf_r+0x12>
 800b2ae:	f7fd ff37 	bl	8009120 <__sinit>
 800b2b2:	69a3      	ldr	r3, [r4, #24]
 800b2b4:	60a3      	str	r3, [r4, #8]
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	071a      	lsls	r2, r3, #28
 800b2ba:	d525      	bpl.n	800b308 <__swbuf_r+0x68>
 800b2bc:	6923      	ldr	r3, [r4, #16]
 800b2be:	b31b      	cbz	r3, 800b308 <__swbuf_r+0x68>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	6922      	ldr	r2, [r4, #16]
 800b2c4:	1a98      	subs	r0, r3, r2
 800b2c6:	6963      	ldr	r3, [r4, #20]
 800b2c8:	b2f6      	uxtb	r6, r6
 800b2ca:	4283      	cmp	r3, r0
 800b2cc:	4637      	mov	r7, r6
 800b2ce:	dc04      	bgt.n	800b2da <__swbuf_r+0x3a>
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f7ff fdf0 	bl	800aeb8 <_fflush_r>
 800b2d8:	b9e0      	cbnz	r0, 800b314 <__swbuf_r+0x74>
 800b2da:	68a3      	ldr	r3, [r4, #8]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	60a3      	str	r3, [r4, #8]
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	6022      	str	r2, [r4, #0]
 800b2e6:	701e      	strb	r6, [r3, #0]
 800b2e8:	6962      	ldr	r2, [r4, #20]
 800b2ea:	1c43      	adds	r3, r0, #1
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d004      	beq.n	800b2fa <__swbuf_r+0x5a>
 800b2f0:	89a3      	ldrh	r3, [r4, #12]
 800b2f2:	07db      	lsls	r3, r3, #31
 800b2f4:	d506      	bpl.n	800b304 <__swbuf_r+0x64>
 800b2f6:	2e0a      	cmp	r6, #10
 800b2f8:	d104      	bne.n	800b304 <__swbuf_r+0x64>
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f7ff fddb 	bl	800aeb8 <_fflush_r>
 800b302:	b938      	cbnz	r0, 800b314 <__swbuf_r+0x74>
 800b304:	4638      	mov	r0, r7
 800b306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b308:	4621      	mov	r1, r4
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 f806 	bl	800b31c <__swsetup_r>
 800b310:	2800      	cmp	r0, #0
 800b312:	d0d5      	beq.n	800b2c0 <__swbuf_r+0x20>
 800b314:	f04f 37ff 	mov.w	r7, #4294967295
 800b318:	e7f4      	b.n	800b304 <__swbuf_r+0x64>
	...

0800b31c <__swsetup_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4b2a      	ldr	r3, [pc, #168]	; (800b3c8 <__swsetup_r+0xac>)
 800b320:	4605      	mov	r5, r0
 800b322:	6818      	ldr	r0, [r3, #0]
 800b324:	460c      	mov	r4, r1
 800b326:	b118      	cbz	r0, 800b330 <__swsetup_r+0x14>
 800b328:	6a03      	ldr	r3, [r0, #32]
 800b32a:	b90b      	cbnz	r3, 800b330 <__swsetup_r+0x14>
 800b32c:	f7fd fef8 	bl	8009120 <__sinit>
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b336:	0718      	lsls	r0, r3, #28
 800b338:	d422      	bmi.n	800b380 <__swsetup_r+0x64>
 800b33a:	06d9      	lsls	r1, r3, #27
 800b33c:	d407      	bmi.n	800b34e <__swsetup_r+0x32>
 800b33e:	2309      	movs	r3, #9
 800b340:	602b      	str	r3, [r5, #0]
 800b342:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	f04f 30ff 	mov.w	r0, #4294967295
 800b34c:	e034      	b.n	800b3b8 <__swsetup_r+0x9c>
 800b34e:	0758      	lsls	r0, r3, #29
 800b350:	d512      	bpl.n	800b378 <__swsetup_r+0x5c>
 800b352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b354:	b141      	cbz	r1, 800b368 <__swsetup_r+0x4c>
 800b356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b35a:	4299      	cmp	r1, r3
 800b35c:	d002      	beq.n	800b364 <__swsetup_r+0x48>
 800b35e:	4628      	mov	r0, r5
 800b360:	f7fe f918 	bl	8009594 <_free_r>
 800b364:	2300      	movs	r3, #0
 800b366:	6363      	str	r3, [r4, #52]	; 0x34
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	2300      	movs	r3, #0
 800b372:	6063      	str	r3, [r4, #4]
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	f043 0308 	orr.w	r3, r3, #8
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	6923      	ldr	r3, [r4, #16]
 800b382:	b94b      	cbnz	r3, 800b398 <__swsetup_r+0x7c>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b38a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b38e:	d003      	beq.n	800b398 <__swsetup_r+0x7c>
 800b390:	4621      	mov	r1, r4
 800b392:	4628      	mov	r0, r5
 800b394:	f000 f88c 	bl	800b4b0 <__smakebuf_r>
 800b398:	89a0      	ldrh	r0, [r4, #12]
 800b39a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b39e:	f010 0301 	ands.w	r3, r0, #1
 800b3a2:	d00a      	beq.n	800b3ba <__swsetup_r+0x9e>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60a3      	str	r3, [r4, #8]
 800b3a8:	6963      	ldr	r3, [r4, #20]
 800b3aa:	425b      	negs	r3, r3
 800b3ac:	61a3      	str	r3, [r4, #24]
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	b943      	cbnz	r3, 800b3c4 <__swsetup_r+0xa8>
 800b3b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3b6:	d1c4      	bne.n	800b342 <__swsetup_r+0x26>
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ba:	0781      	lsls	r1, r0, #30
 800b3bc:	bf58      	it	pl
 800b3be:	6963      	ldrpl	r3, [r4, #20]
 800b3c0:	60a3      	str	r3, [r4, #8]
 800b3c2:	e7f4      	b.n	800b3ae <__swsetup_r+0x92>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e7f7      	b.n	800b3b8 <__swsetup_r+0x9c>
 800b3c8:	200001d8 	.word	0x200001d8

0800b3cc <_raise_r>:
 800b3cc:	291f      	cmp	r1, #31
 800b3ce:	b538      	push	{r3, r4, r5, lr}
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	d904      	bls.n	800b3e0 <_raise_r+0x14>
 800b3d6:	2316      	movs	r3, #22
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	f04f 30ff 	mov.w	r0, #4294967295
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b3e2:	b112      	cbz	r2, 800b3ea <_raise_r+0x1e>
 800b3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3e8:	b94b      	cbnz	r3, 800b3fe <_raise_r+0x32>
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 f830 	bl	800b450 <_getpid_r>
 800b3f0:	462a      	mov	r2, r5
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fa:	f000 b817 	b.w	800b42c <_kill_r>
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d00a      	beq.n	800b418 <_raise_r+0x4c>
 800b402:	1c59      	adds	r1, r3, #1
 800b404:	d103      	bne.n	800b40e <_raise_r+0x42>
 800b406:	2316      	movs	r3, #22
 800b408:	6003      	str	r3, [r0, #0]
 800b40a:	2001      	movs	r0, #1
 800b40c:	e7e7      	b.n	800b3de <_raise_r+0x12>
 800b40e:	2400      	movs	r4, #0
 800b410:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b414:	4628      	mov	r0, r5
 800b416:	4798      	blx	r3
 800b418:	2000      	movs	r0, #0
 800b41a:	e7e0      	b.n	800b3de <_raise_r+0x12>

0800b41c <raise>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <raise+0xc>)
 800b41e:	4601      	mov	r1, r0
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	f7ff bfd3 	b.w	800b3cc <_raise_r>
 800b426:	bf00      	nop
 800b428:	200001d8 	.word	0x200001d8

0800b42c <_kill_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4d07      	ldr	r5, [pc, #28]	; (800b44c <_kill_r+0x20>)
 800b430:	2300      	movs	r3, #0
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	4611      	mov	r1, r2
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	f7f6 f8df 	bl	80015fc <_kill>
 800b43e:	1c43      	adds	r3, r0, #1
 800b440:	d102      	bne.n	800b448 <_kill_r+0x1c>
 800b442:	682b      	ldr	r3, [r5, #0]
 800b444:	b103      	cbz	r3, 800b448 <_kill_r+0x1c>
 800b446:	6023      	str	r3, [r4, #0]
 800b448:	bd38      	pop	{r3, r4, r5, pc}
 800b44a:	bf00      	nop
 800b44c:	20001f2c 	.word	0x20001f2c

0800b450 <_getpid_r>:
 800b450:	f7f6 b8cc 	b.w	80015ec <_getpid>

0800b454 <_malloc_usable_size_r>:
 800b454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b458:	1f18      	subs	r0, r3, #4
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bfbc      	itt	lt
 800b45e:	580b      	ldrlt	r3, [r1, r0]
 800b460:	18c0      	addlt	r0, r0, r3
 800b462:	4770      	bx	lr

0800b464 <__swhatbuf_r>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	460c      	mov	r4, r1
 800b468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46c:	2900      	cmp	r1, #0
 800b46e:	b096      	sub	sp, #88	; 0x58
 800b470:	4615      	mov	r5, r2
 800b472:	461e      	mov	r6, r3
 800b474:	da0d      	bge.n	800b492 <__swhatbuf_r+0x2e>
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b47c:	f04f 0100 	mov.w	r1, #0
 800b480:	bf0c      	ite	eq
 800b482:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b486:	2340      	movne	r3, #64	; 0x40
 800b488:	2000      	movs	r0, #0
 800b48a:	6031      	str	r1, [r6, #0]
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	b016      	add	sp, #88	; 0x58
 800b490:	bd70      	pop	{r4, r5, r6, pc}
 800b492:	466a      	mov	r2, sp
 800b494:	f000 f848 	bl	800b528 <_fstat_r>
 800b498:	2800      	cmp	r0, #0
 800b49a:	dbec      	blt.n	800b476 <__swhatbuf_r+0x12>
 800b49c:	9901      	ldr	r1, [sp, #4]
 800b49e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b4a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b4a6:	4259      	negs	r1, r3
 800b4a8:	4159      	adcs	r1, r3
 800b4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4ae:	e7eb      	b.n	800b488 <__swhatbuf_r+0x24>

0800b4b0 <__smakebuf_r>:
 800b4b0:	898b      	ldrh	r3, [r1, #12]
 800b4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4b4:	079d      	lsls	r5, r3, #30
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	d507      	bpl.n	800b4cc <__smakebuf_r+0x1c>
 800b4bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	6123      	str	r3, [r4, #16]
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	6163      	str	r3, [r4, #20]
 800b4c8:	b002      	add	sp, #8
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	ab01      	add	r3, sp, #4
 800b4ce:	466a      	mov	r2, sp
 800b4d0:	f7ff ffc8 	bl	800b464 <__swhatbuf_r>
 800b4d4:	9900      	ldr	r1, [sp, #0]
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7fe fc27 	bl	8009d2c <_malloc_r>
 800b4de:	b948      	cbnz	r0, 800b4f4 <__smakebuf_r+0x44>
 800b4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e4:	059a      	lsls	r2, r3, #22
 800b4e6:	d4ef      	bmi.n	800b4c8 <__smakebuf_r+0x18>
 800b4e8:	f023 0303 	bic.w	r3, r3, #3
 800b4ec:	f043 0302 	orr.w	r3, r3, #2
 800b4f0:	81a3      	strh	r3, [r4, #12]
 800b4f2:	e7e3      	b.n	800b4bc <__smakebuf_r+0xc>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	6020      	str	r0, [r4, #0]
 800b4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4fc:	81a3      	strh	r3, [r4, #12]
 800b4fe:	9b00      	ldr	r3, [sp, #0]
 800b500:	6163      	str	r3, [r4, #20]
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	6120      	str	r0, [r4, #16]
 800b506:	b15b      	cbz	r3, 800b520 <__smakebuf_r+0x70>
 800b508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b50c:	4630      	mov	r0, r6
 800b50e:	f000 f81d 	bl	800b54c <_isatty_r>
 800b512:	b128      	cbz	r0, 800b520 <__smakebuf_r+0x70>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	f023 0303 	bic.w	r3, r3, #3
 800b51a:	f043 0301 	orr.w	r3, r3, #1
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	431d      	orrs	r5, r3
 800b524:	81a5      	strh	r5, [r4, #12]
 800b526:	e7cf      	b.n	800b4c8 <__smakebuf_r+0x18>

0800b528 <_fstat_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4d07      	ldr	r5, [pc, #28]	; (800b548 <_fstat_r+0x20>)
 800b52c:	2300      	movs	r3, #0
 800b52e:	4604      	mov	r4, r0
 800b530:	4608      	mov	r0, r1
 800b532:	4611      	mov	r1, r2
 800b534:	602b      	str	r3, [r5, #0]
 800b536:	f7f6 f8c0 	bl	80016ba <_fstat>
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	d102      	bne.n	800b544 <_fstat_r+0x1c>
 800b53e:	682b      	ldr	r3, [r5, #0]
 800b540:	b103      	cbz	r3, 800b544 <_fstat_r+0x1c>
 800b542:	6023      	str	r3, [r4, #0]
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	bf00      	nop
 800b548:	20001f2c 	.word	0x20001f2c

0800b54c <_isatty_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4d06      	ldr	r5, [pc, #24]	; (800b568 <_isatty_r+0x1c>)
 800b550:	2300      	movs	r3, #0
 800b552:	4604      	mov	r4, r0
 800b554:	4608      	mov	r0, r1
 800b556:	602b      	str	r3, [r5, #0]
 800b558:	f7f6 f8bf 	bl	80016da <_isatty>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_isatty_r+0x1a>
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	b103      	cbz	r3, 800b566 <_isatty_r+0x1a>
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	20001f2c 	.word	0x20001f2c

0800b56c <_init>:
 800b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56e:	bf00      	nop
 800b570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b572:	bc08      	pop	{r3}
 800b574:	469e      	mov	lr, r3
 800b576:	4770      	bx	lr

0800b578 <_fini>:
 800b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57a:	bf00      	nop
 800b57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b57e:	bc08      	pop	{r3}
 800b580:	469e      	mov	lr, r3
 800b582:	4770      	bx	lr
